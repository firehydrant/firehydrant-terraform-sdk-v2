// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
)

type PatchV1FunctionalitiesFunctionalityIDServices struct {
	// ID of a service
	ID string `json:"id"`
	// Set to true if you want to remove the given service from the functionality
	Remove *bool `json:"remove,omitempty"`
}

func (o *PatchV1FunctionalitiesFunctionalityIDServices) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PatchV1FunctionalitiesFunctionalityIDServices) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

type PatchV1FunctionalitiesFunctionalityIDLinks struct {
	// URL
	HrefURL string `json:"href_url"`
	// Short name used to display and identify this link
	Name string `json:"name"`
	// An optional URL to an icon representing this link
	IconURL *string `json:"icon_url,omitempty"`
	// If you are trying to remove a link, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
	// If updating an existing link, specify it's id.
	ID *string `json:"id,omitempty"`
}

func (o *PatchV1FunctionalitiesFunctionalityIDLinks) GetHrefURL() string {
	if o == nil {
		return ""
	}
	return o.HrefURL
}

func (o *PatchV1FunctionalitiesFunctionalityIDLinks) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PatchV1FunctionalitiesFunctionalityIDLinks) GetIconURL() *string {
	if o == nil {
		return nil
	}
	return o.IconURL
}

func (o *PatchV1FunctionalitiesFunctionalityIDLinks) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

func (o *PatchV1FunctionalitiesFunctionalityIDLinks) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// PatchV1FunctionalitiesFunctionalityIDOwner - An object representing a Team that owns the functionality
type PatchV1FunctionalitiesFunctionalityIDOwner struct {
	ID string `json:"id"`
}

func (o *PatchV1FunctionalitiesFunctionalityIDOwner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type PatchV1FunctionalitiesFunctionalityIDTeams struct {
	ID string `json:"id"`
	// If you are trying to remove a team from a functionality, set this to 'true'
	Remove *bool `json:"remove,omitempty"`
}

func (o *PatchV1FunctionalitiesFunctionalityIDTeams) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PatchV1FunctionalitiesFunctionalityIDTeams) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

type PatchV1FunctionalitiesFunctionalityIDExternalResources struct {
	RemoteID string `json:"remote_id"`
	// The integration slug for the external resource. Can be one of: github, opsgenie, pager_duty, statuspage, victorops. Not required if the resource has already been imported.
	ConnectionType *string `json:"connection_type,omitempty"`
	// If you are trying to remove an external resource from a service, set this to 'true'.
	Remove *bool `json:"remove,omitempty"`
}

func (o *PatchV1FunctionalitiesFunctionalityIDExternalResources) GetRemoteID() string {
	if o == nil {
		return ""
	}
	return o.RemoteID
}

func (o *PatchV1FunctionalitiesFunctionalityIDExternalResources) GetConnectionType() *string {
	if o == nil {
		return nil
	}
	return o.ConnectionType
}

func (o *PatchV1FunctionalitiesFunctionalityIDExternalResources) GetRemove() *bool {
	if o == nil {
		return nil
	}
	return o.Remove
}

// PatchV1FunctionalitiesFunctionalityID - Update a functionalities attributes
type PatchV1FunctionalitiesFunctionalityID struct {
	Name        *string                                         `json:"name,omitempty"`
	Description *string                                         `json:"description,omitempty"`
	Services    []PatchV1FunctionalitiesFunctionalityIDServices `json:"services,omitempty"`
	// An array of links to associate with this functionality. This will remove all links not present in the patch. Only acts if 'links' key is included in the payload.
	Links []PatchV1FunctionalitiesFunctionalityIDLinks `json:"links,omitempty"`
	// An object representing a Team that owns the functionality
	Owner *PatchV1FunctionalitiesFunctionalityIDOwner `json:"owner,omitempty"`
	// If you are trying to remove a team as an owner from a functionality, set this to 'true'
	RemoveOwner *bool `json:"remove_owner,omitempty"`
	// An array of teams to attach to this functionality.
	Teams []PatchV1FunctionalitiesFunctionalityIDTeams `json:"teams,omitempty"`
	// If set to true, any teams tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the teams
	RemoveRemainingTeams *bool `json:"remove_remaining_teams,omitempty"`
	// An array of external resources to attach to this service.
	ExternalResources []PatchV1FunctionalitiesFunctionalityIDExternalResources `json:"external_resources,omitempty"`
	// If set to true, any external_resources tagged on the service that are not included in the given array will be removed. Set this to true if you want to do a replacement operation for the external_resources
	RemoveRemainingExternalResources *bool `json:"remove_remaining_external_resources,omitempty"`
	// A hash of label keys and values
	Labels                map[string]string `json:"labels,omitempty"`
	AlertOnAdd            *bool             `json:"alert_on_add,omitempty"`
	AutoAddRespondingTeam *bool             `json:"auto_add_responding_team,omitempty"`
	// Set this to true if you want to remove all of the services that are not included in the services array from the functionality
	RemoveRemainingServices *bool `default:"false" json:"remove_remaining_services"`
}

func (p PatchV1FunctionalitiesFunctionalityID) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PatchV1FunctionalitiesFunctionalityID) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetServices() []PatchV1FunctionalitiesFunctionalityIDServices {
	if o == nil {
		return nil
	}
	return o.Services
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetLinks() []PatchV1FunctionalitiesFunctionalityIDLinks {
	if o == nil {
		return nil
	}
	return o.Links
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetOwner() *PatchV1FunctionalitiesFunctionalityIDOwner {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetRemoveOwner() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveOwner
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetTeams() []PatchV1FunctionalitiesFunctionalityIDTeams {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetRemoveRemainingTeams() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingTeams
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetExternalResources() []PatchV1FunctionalitiesFunctionalityIDExternalResources {
	if o == nil {
		return nil
	}
	return o.ExternalResources
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetRemoveRemainingExternalResources() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingExternalResources
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetLabels() map[string]string {
	if o == nil {
		return nil
	}
	return o.Labels
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetAlertOnAdd() *bool {
	if o == nil {
		return nil
	}
	return o.AlertOnAdd
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetAutoAddRespondingTeam() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAddRespondingTeam
}

func (o *PatchV1FunctionalitiesFunctionalityID) GetRemoveRemainingServices() *bool {
	if o == nil {
		return nil
	}
	return o.RemoveRemainingServices
}
