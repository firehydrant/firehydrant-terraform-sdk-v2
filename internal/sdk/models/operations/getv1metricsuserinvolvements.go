// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/types"
	"net/http"
)

type SortField string

const (
	SortFieldUserCount     SortField = "user_count"
	SortFieldIncidentCount SortField = "incident_count"
	SortFieldTimeSpent     SortField = "time_spent"
)

func (e SortField) ToPointer() *SortField {
	return &e
}
func (e *SortField) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_count":
		fallthrough
	case "incident_count":
		fallthrough
	case "time_spent":
		*e = SortField(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SortField: %v", v)
	}
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "asc"
	SortDirectionDesc SortDirection = "desc"
)

func (e SortDirection) ToPointer() *SortDirection {
	return &e
}
func (e *SortDirection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = SortDirection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SortDirection: %v", v)
	}
}

type GetV1MetricsUserInvolvementsRequest struct {
	// The start date to return metrics from
	StartDate *types.Date `queryParam:"style=form,explode=true,name=start_date"`
	// The end date to return metrics from
	EndDate       *types.Date    `queryParam:"style=form,explode=true,name=end_date"`
	BucketSize    *string        `queryParam:"style=form,explode=true,name=bucket_size"`
	By            *string        `queryParam:"style=form,explode=true,name=by"`
	SortField     *SortField     `queryParam:"style=form,explode=true,name=sort_field"`
	SortDirection *SortDirection `queryParam:"style=form,explode=true,name=sort_direction"`
	SortLimit     *int           `queryParam:"style=form,explode=true,name=sort_limit"`
}

func (g GetV1MetricsUserInvolvementsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetV1MetricsUserInvolvementsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetV1MetricsUserInvolvementsRequest) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *GetV1MetricsUserInvolvementsRequest) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *GetV1MetricsUserInvolvementsRequest) GetBucketSize() *string {
	if o == nil {
		return nil
	}
	return o.BucketSize
}

func (o *GetV1MetricsUserInvolvementsRequest) GetBy() *string {
	if o == nil {
		return nil
	}
	return o.By
}

func (o *GetV1MetricsUserInvolvementsRequest) GetSortField() *SortField {
	if o == nil {
		return nil
	}
	return o.SortField
}

func (o *GetV1MetricsUserInvolvementsRequest) GetSortDirection() *SortDirection {
	if o == nil {
		return nil
	}
	return o.SortDirection
}

func (o *GetV1MetricsUserInvolvementsRequest) GetSortLimit() *int {
	if o == nil {
		return nil
	}
	return o.SortLimit
}

type GetV1MetricsUserInvolvementsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Returns a report with time bucketed analytics data
	MetricsMetricsEntity *shared.MetricsMetricsEntity
}

func (o *GetV1MetricsUserInvolvementsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetV1MetricsUserInvolvementsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetV1MetricsUserInvolvementsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetV1MetricsUserInvolvementsResponse) GetMetricsMetricsEntity() *shared.MetricsMetricsEntity {
	if o == nil {
		return nil
	}
	return o.MetricsMetricsEntity
}
