// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/hooks"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/internal/utils"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.firehydrant.io",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	ServerIndex       int
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], nil
}

type Firehydrant struct {
	// Operations about pings
	Ping *Ping
	// Operations about environments
	Environments *Environments
	// Operations about services
	Services            *Services
	ServiceDependencies *ServiceDependencies
	// Operations about functionalities
	Functionalities *Functionalities
	// Operations about teams
	Teams *Teams
	// Operations about changes
	Changes *Changes
	// Operations about change_types
	ChangeTypes *ChangeTypes
	// Operations about entitlements
	Entitlements *Entitlements
	// Operations about incidents
	Incidents     *Incidents
	IncidentRoles *IncidentRoles
	IncidentTags  *IncidentTags
	IncidentTypes *IncidentTypes
	// Operations about integrations
	Integrations *Integrations
	// Operations about users
	Users       *Users
	CurrentUser *CurrentUser
	// Operations about reports
	Reports *Reports
	// Operations about metrics
	Metrics *Metrics
	// Operations about runbooks
	Runbooks      *Runbooks
	RunbookAudits *RunbookAudits
	// Operations about nunc_connections
	NuncConnections *NuncConnections
	SavedSearches   *SavedSearches
	// Operations about lifecycles
	Lifecycles *Lifecycles
	// Operations about priorities
	Priorities *Priorities
	// Operations about severities
	Severities     *Severities
	SeverityMatrix *SeverityMatrix
	// Operations about scheduled_maintenances
	ScheduledMaintenances *ScheduledMaintenances
	// Operations about schedules
	Schedules *Schedules
	// Operations about infrastructures
	Infrastructures *Infrastructures
	// Operations about nuncs
	Nunc *Nunc
	// Operations about status_update_templates
	StatusUpdateTemplates *StatusUpdateTemplates
	CustomFields          *CustomFields
	PostMortems           *PostMortems
	// Operations about alerts
	Alerts *Alerts
	// Operations about processing_log_entries
	ProcessingLogEntries *ProcessingLogEntries
	// Operations about ticketings
	Ticketing *Ticketing
	// Operations about task_lists
	TaskLists *TaskLists
	// Operations about noauths
	Noauth *Noauth
	// Operations about scims
	Scim *Scim
	// Operations about catalogs
	Catalogs           *Catalogs
	ChecklistTemplates *ChecklistTemplates
	// Operations about bootstraps
	Bootstrap          *Bootstrap
	FormConfigurations *FormConfigurations
	// Operations about conversations
	Conversations *Conversations
	// Operations about signals
	Signals *Signals
	// Operations about signals_on_calls
	SignalsOnCall *SignalsOnCall
	// Operations about webhooks
	Webhooks *Webhooks
	// Operations about ais
	Ai *Ai

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*Firehydrant)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Firehydrant) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Firehydrant) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *Firehydrant) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Firehydrant) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *Firehydrant) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (shared.Security, error)) SDKOption {
	return func(sdk *Firehydrant) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Firehydrant) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Firehydrant) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Firehydrant {
	sdk := &Firehydrant{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "0.0.1",
			SDKVersion:        "0.0.1",
			GenVersion:        "2.438.3",
			UserAgent:         "speakeasy-sdk/go 0.0.1 2.438.3 0.0.1 github.com/firehydrant/terraform-provider-firehydrant/internal/sdk",
			Hooks:             hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.Ping = newPing(sdk.sdkConfiguration)

	sdk.Environments = newEnvironments(sdk.sdkConfiguration)

	sdk.Services = newServices(sdk.sdkConfiguration)

	sdk.ServiceDependencies = newServiceDependencies(sdk.sdkConfiguration)

	sdk.Functionalities = newFunctionalities(sdk.sdkConfiguration)

	sdk.Teams = newTeams(sdk.sdkConfiguration)

	sdk.Changes = newChanges(sdk.sdkConfiguration)

	sdk.ChangeTypes = newChangeTypes(sdk.sdkConfiguration)

	sdk.Entitlements = newEntitlements(sdk.sdkConfiguration)

	sdk.Incidents = newIncidents(sdk.sdkConfiguration)

	sdk.IncidentRoles = newIncidentRoles(sdk.sdkConfiguration)

	sdk.IncidentTags = newIncidentTags(sdk.sdkConfiguration)

	sdk.IncidentTypes = newIncidentTypes(sdk.sdkConfiguration)

	sdk.Integrations = newIntegrations(sdk.sdkConfiguration)

	sdk.Users = newUsers(sdk.sdkConfiguration)

	sdk.CurrentUser = newCurrentUser(sdk.sdkConfiguration)

	sdk.Reports = newReports(sdk.sdkConfiguration)

	sdk.Metrics = newMetrics(sdk.sdkConfiguration)

	sdk.Runbooks = newRunbooks(sdk.sdkConfiguration)

	sdk.RunbookAudits = newRunbookAudits(sdk.sdkConfiguration)

	sdk.NuncConnections = newNuncConnections(sdk.sdkConfiguration)

	sdk.SavedSearches = newSavedSearches(sdk.sdkConfiguration)

	sdk.Lifecycles = newLifecycles(sdk.sdkConfiguration)

	sdk.Priorities = newPriorities(sdk.sdkConfiguration)

	sdk.Severities = newSeverities(sdk.sdkConfiguration)

	sdk.SeverityMatrix = newSeverityMatrix(sdk.sdkConfiguration)

	sdk.ScheduledMaintenances = newScheduledMaintenances(sdk.sdkConfiguration)

	sdk.Schedules = newSchedules(sdk.sdkConfiguration)

	sdk.Infrastructures = newInfrastructures(sdk.sdkConfiguration)

	sdk.Nunc = newNunc(sdk.sdkConfiguration)

	sdk.StatusUpdateTemplates = newStatusUpdateTemplates(sdk.sdkConfiguration)

	sdk.CustomFields = newCustomFields(sdk.sdkConfiguration)

	sdk.PostMortems = newPostMortems(sdk.sdkConfiguration)

	sdk.Alerts = newAlerts(sdk.sdkConfiguration)

	sdk.ProcessingLogEntries = newProcessingLogEntries(sdk.sdkConfiguration)

	sdk.Ticketing = newTicketing(sdk.sdkConfiguration)

	sdk.TaskLists = newTaskLists(sdk.sdkConfiguration)

	sdk.Noauth = newNoauth(sdk.sdkConfiguration)

	sdk.Scim = newScim(sdk.sdkConfiguration)

	sdk.Catalogs = newCatalogs(sdk.sdkConfiguration)

	sdk.ChecklistTemplates = newChecklistTemplates(sdk.sdkConfiguration)

	sdk.Bootstrap = newBootstrap(sdk.sdkConfiguration)

	sdk.FormConfigurations = newFormConfigurations(sdk.sdkConfiguration)

	sdk.Conversations = newConversations(sdk.sdkConfiguration)

	sdk.Signals = newSignals(sdk.sdkConfiguration)

	sdk.SignalsOnCall = newSignalsOnCall(sdk.sdkConfiguration)

	sdk.Webhooks = newWebhooks(sdk.sdkConfiguration)

	sdk.Ai = newAi(sdk.sdkConfiguration)

	return sdk
}
