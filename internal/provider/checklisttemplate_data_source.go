// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &ChecklistTemplateDataSource{}
var _ datasource.DataSourceWithConfigure = &ChecklistTemplateDataSource{}

func NewChecklistTemplateDataSource() datasource.DataSource {
	return &ChecklistTemplateDataSource{}
}

// ChecklistTemplateDataSource is the data source implementation.
type ChecklistTemplateDataSource struct {
	client *sdk.FirehydrantTerraformSDK
}

// ChecklistTemplateDataSourceModel describes the data model.
type ChecklistTemplateDataSourceModel struct {
	Checks      []tfTypes.ChecklistCheckEntity `tfsdk:"checks"`
	CreatedAt   types.String                   `tfsdk:"created_at"`
	Description types.String                   `tfsdk:"description"`
	ID          types.String                   `tfsdk:"id"`
	Name        types.String                   `tfsdk:"name"`
	Owner       *tfTypes.TeamEntity            `tfsdk:"owner"`
	UpdatedAt   types.String                   `tfsdk:"updated_at"`
}

// Metadata returns the data source type name.
func (r *ChecklistTemplateDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_checklist_template"
}

// Schema defines the schema for the data source.
func (r *ChecklistTemplateDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ChecklistTemplate DataSource",

		Attributes: map[string]schema.Attribute{
			"checks": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"description": schema.StringAttribute{
							Computed: true,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"status": schema.BoolAttribute{
							Computed: true,
						},
					},
				},
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Required: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"owner": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed: true,
					},
					"created_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"functionalities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"active_incidents": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `List of active incident guids`,
								},
								"alert_on_add": schema.BoolAttribute{
									Computed: true,
								},
								"auto_add_responding_team": schema.BoolAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"external_resources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"connection_id": schema.StringAttribute{
												Computed: true,
											},
											"connection_name": schema.StringAttribute{
												Computed: true,
											},
											"connection_type": schema.StringAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"remote_id": schema.StringAttribute{
												Computed: true,
											},
											"remote_url": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `Information about known linkages to representations of services outside of FireHydrant.`,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"labels": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `An object of label key and values`,
								},
								"links": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"href_url": schema.StringAttribute{
												Computed: true,
											},
											"icon_url": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of links attached to this functionality.`,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `TeamEntity model`,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"updated_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"memberships": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"default_incident_role": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"discarded_at": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"summary": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `IncidentRoleEntity model`,
								},
								"schedule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"discarded": schema.BoolAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"integration": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"user": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
										},
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"signals_enabled_notification_types": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"slack_linked": schema.BoolAttribute{
											Computed: true,
										},
										"slack_user_id": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
					"ms_teams_channel": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"channel_id": schema.StringAttribute{
								Computed: true,
							},
							"channel_name": schema.StringAttribute{
								Computed: true,
							},
							"channel_url": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"incident": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"active": schema.BoolAttribute{
										Computed: true,
									},
									"ai_incident_summary": schema.StringAttribute{
										Computed: true,
									},
									"channel_id": schema.StringAttribute{
										Computed: true,
									},
									"channel_name": schema.StringAttribute{
										Computed: true,
									},
									"channel_reference": schema.StringAttribute{
										Computed: true,
									},
									"channel_status": schema.StringAttribute{
										Computed:    true,
										Description: `inoperative: 0, operational: 1, archived: 2`,
									},
									"conference_bridges": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"context_object": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"context_description": schema.StringAttribute{
												Computed: true,
											},
											"context_tag": schema.StringAttribute{
												Computed: true,
											},
											"object_id": schema.StringAttribute{
												Computed: true,
											},
											"object_type": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"conversations": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"channel": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"comments_url": schema.StringAttribute{
													Computed: true,
												},
												"field": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"resource_class": schema.StringAttribute{
													Computed: true,
												},
												"resource_id": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"created_at": schema.StringAttribute{
										Computed:    true,
										Description: `The time the incident was opened`,
									},
									"created_by": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"email": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"source": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"current_milestone": schema.StringAttribute{
										Computed:    true,
										Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
									},
									"custom_fields": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"description": schema.StringAttribute{
													Computed: true,
												},
												"display_name": schema.StringAttribute{
													Computed: true,
												},
												"field_id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"slug": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
												"value_array": schema.StringAttribute{
													Computed: true,
												},
												"value_string": schema.StringAttribute{
													Computed: true,
												},
												"value_type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"customer_impact_summary": schema.StringAttribute{
										Computed: true,
									},
									"customers_impacted": schema.Int64Attribute{
										Computed: true,
									},
									"description": schema.StringAttribute{
										Computed: true,
									},
									"discarded_at": schema.StringAttribute{
										Computed:    true,
										Description: `The time the incident was archived`,
									},
									"environments": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"field_requirements": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"field_id": schema.StringAttribute{
													Computed:    true,
													Description: `A unique identifier for the field.`,
												},
												"required_at_milestone_id": schema.StringAttribute{
													Computed:    true,
													Description: `The milestone at which this field is required. If null, this field is always required.`,
												},
											},
										},
									},
									"functionalities": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"id": schema.StringAttribute{
										Computed:    true,
										Description: `UUID of the Incident`,
									},
									"impacts": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"condition": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"position": schema.Int64Attribute{
															Computed:    true,
															Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
														},
													},
													Description: `SeverityMatrix_ConditionEntity model`,
												},
												"conversations": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"channel": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"comments_url": schema.StringAttribute{
																Computed: true,
															},
															"field": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"resource_class": schema.StringAttribute{
																Computed: true,
															},
															"resource_id": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"impact": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"incident_channels": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"icon_url": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
												"source_id": schema.StringAttribute{
													Computed: true,
												},
												"source_name": schema.StringAttribute{
													Computed: true,
												},
												"status": schema.StringAttribute{
													Computed: true,
												},
												"url": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"incident_tickets": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"assignees": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"created_at": schema.StringAttribute{
													Computed: true,
												},
												"created_by": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"email": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"source": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"description": schema.StringAttribute{
													Computed: true,
												},
												"due_at": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"incident_current_milestone": schema.StringAttribute{
													Computed:    true,
													Description: `Milestone of incident that this ticket is related to`,
												},
												"incident_id": schema.StringAttribute{
													Computed:    true,
													Description: `ID of incident that this ticket is related to`,
												},
												"incident_name": schema.StringAttribute{
													Computed:    true,
													Description: `Name of incident that this ticket is related to`,
												},
												"link": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"deletable": schema.BoolAttribute{
															Computed:    true,
															Description: `Link can be deleted`,
														},
														"display_text": schema.StringAttribute{
															Computed: true,
														},
														"editable": schema.BoolAttribute{
															Computed:    true,
															Description: `Link can be edited`,
														},
														"href_url": schema.StringAttribute{
															Computed: true,
														},
														"icon_url": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
													},
													Description: `Attachments_LinkEntity model`,
												},
												"priority": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"position": schema.Int64Attribute{
															Computed: true,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
														},
													},
													Description: `Ticketing_PriorityEntity model`,
												},
												"state": schema.StringAttribute{
													Computed: true,
												},
												"summary": schema.StringAttribute{
													Computed: true,
												},
												"tag_list": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"task_id": schema.StringAttribute{
													Computed:    true,
													Description: `ID of task that this ticket is related to`,
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"incident_url": schema.StringAttribute{
										Computed: true,
									},
									"labels": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
										Description: `A key/value of labels`,
									},
									"last_note": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"body": schema.StringAttribute{
												Computed: true,
											},
											"conversations": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"channel": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"comments_url": schema.StringAttribute{
															Computed: true,
														},
														"field": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"resource_class": schema.StringAttribute{
															Computed: true,
														},
														"resource_id": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"status_pages": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"display_name": schema.StringAttribute{
															Computed: true,
														},
														"external_id": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"integration": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																},
																"display_name": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"integration_name": schema.StringAttribute{
																	Computed: true,
																},
																"integration_slug": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"url": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
										},
										Description: `Event_NoteEntity model`,
									},
									"last_update": schema.StringAttribute{
										Computed: true,
									},
									"lifecycle_measurements": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"calculated_at": schema.StringAttribute{
													Computed: true,
												},
												"description": schema.StringAttribute{
													Computed: true,
												},
												"ends_at_milestone": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"slug": schema.StringAttribute{
													Computed: true,
												},
												"starts_at_milestone": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"lifecycle_phases": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"description": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"milestones": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"description": schema.StringAttribute{
																Computed: true,
															},
															"duration": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"occurred_at": schema.StringAttribute{
																Computed: true,
															},
															"position": schema.Int64Attribute{
																Computed: true,
															},
															"slug": schema.StringAttribute{
																Computed: true,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
															},
															"updated_by": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
													},
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"position": schema.Int64Attribute{
													Computed: true,
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"milestones": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
												},
												"duration": schema.StringAttribute{
													Computed:    true,
													Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"occurred_at": schema.StringAttribute{
													Computed: true,
												},
												"type": schema.StringAttribute{
													Computed:    true,
													Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										Description: `DEPRECATED: Please use lifecycle phases instead`,
									},
									"monetary_impact": schema.Int64Attribute{
										Computed: true,
									},
									"monetary_impact_cents": schema.Int64Attribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `Name of the incident`,
									},
									"number": schema.Int64Attribute{
										Computed:    true,
										Description: `Incident number`,
									},
									"organization": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									"organization_id": schema.StringAttribute{
										Computed: true,
									},
									"priority": schema.StringAttribute{
										Computed: true,
									},
									"private_id": schema.StringAttribute{
										Computed: true,
									},
									"private_status_page_url": schema.StringAttribute{
										Computed: true,
									},
									"report_id": schema.StringAttribute{
										Computed: true,
									},
									"role_assignments": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"incident_role": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"discarded_at": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"summary": schema.StringAttribute{
															Computed: true,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
														},
													},
													Description: `IncidentRoleEntity model`,
												},
												"status": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
												},
												"user": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
														},
														"email": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"signals_enabled_notification_types": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
														},
														"slack_linked": schema.BoolAttribute{
															Computed: true,
														},
														"slack_user_id": schema.StringAttribute{
															Computed: true,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
										},
									},
									"services": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"severity": schema.StringAttribute{
										Computed: true,
									},
									"severity_color": schema.StringAttribute{
										Computed: true,
									},
									"severity_condition": schema.StringAttribute{
										Computed: true,
									},
									"severity_condition_object": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"position": schema.Int64Attribute{
												Computed:    true,
												Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
											},
										},
										Description: `SeverityMatrix_ConditionEntity model`,
									},
									"severity_impact": schema.StringAttribute{
										Computed: true,
									},
									"severity_impact_object": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"affects_id": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"position": schema.Int64Attribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `SeverityMatrix_ImpactEntity model`,
									},
									"started_at": schema.StringAttribute{
										Computed:    true,
										Description: `The time the incident started`,
									},
									"status_pages": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"display_name": schema.StringAttribute{
													Computed: true,
												},
												"external_id": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"integration": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
														},
														"display_name": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"integration_name": schema.StringAttribute{
															Computed: true,
														},
														"integration_slug": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"url": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"summary": schema.StringAttribute{
										Computed: true,
									},
									"tag_list": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
									},
									"team_assignments": schema.ListNestedAttribute{
										Computed: true,
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"status": schema.StringAttribute{
													Computed: true,
												},
												"team": schema.SingleNestedAttribute{
													Computed:    true,
													Description: `TeamEntity model`,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
									"ticket": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"assignees": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"email": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"source": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"created_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"due_at": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"incident_current_milestone": schema.StringAttribute{
												Computed:    true,
												Description: `Milestone of incident that this ticket is related to`,
											},
											"incident_id": schema.StringAttribute{
												Computed:    true,
												Description: `ID of incident that this ticket is related to`,
											},
											"incident_name": schema.StringAttribute{
												Computed:    true,
												Description: `Name of incident that this ticket is related to`,
											},
											"link": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"deletable": schema.BoolAttribute{
														Computed:    true,
														Description: `Link can be deleted`,
													},
													"display_text": schema.StringAttribute{
														Computed: true,
													},
													"editable": schema.BoolAttribute{
														Computed:    true,
														Description: `Link can be edited`,
													},
													"href_url": schema.StringAttribute{
														Computed: true,
													},
													"icon_url": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
												},
												Description: `Attachments_LinkEntity model`,
											},
											"priority": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"position": schema.Int64Attribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
													},
												},
												Description: `Ticketing_PriorityEntity model`,
											},
											"state": schema.StringAttribute{
												Computed: true,
											},
											"summary": schema.StringAttribute{
												Computed: true,
											},
											"tag_list": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"task_id": schema.StringAttribute{
												Computed:    true,
												Description: `ID of task that this ticket is related to`,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `Ticketing_TicketEntity model`,
									},
								},
								Description: `IncidentEntity model`,
							},
							"ms_team_id": schema.StringAttribute{
								Computed: true,
							},
							"status": schema.StringAttribute{
								Computed: true,
							},
							"team_name": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"owned_functionalities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"active_incidents": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `List of active incident guids`,
								},
								"alert_on_add": schema.BoolAttribute{
									Computed: true,
								},
								"auto_add_responding_team": schema.BoolAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"external_resources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"connection_id": schema.StringAttribute{
												Computed: true,
											},
											"connection_name": schema.StringAttribute{
												Computed: true,
											},
											"connection_type": schema.StringAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"remote_id": schema.StringAttribute{
												Computed: true,
											},
											"remote_url": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `Information about known linkages to representations of services outside of FireHydrant.`,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"labels": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `An object of label key and values`,
								},
								"links": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"href_url": schema.StringAttribute{
												Computed: true,
											},
											"icon_url": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of links attached to this functionality.`,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `TeamEntity model`,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
								"updated_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
					},
					"owned_runbooks": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"attachment_rule": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"logic": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
										},
										"user_data": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"label": schema.StringAttribute{
													Computed: true,
												},
												"type": schema.StringAttribute{
													Computed: true,
												},
												"value": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
								"categories": schema.StringAttribute{
									Computed:    true,
									Description: `categories the runbook applies to`,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `TeamEntity model`,
								},
								"summary": schema.StringAttribute{
									Computed: true,
								},
								"type": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
					"signals_ical_url": schema.StringAttribute{
						Computed: true,
					},
					"slack_channel": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"slack_channel_id": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
					},
				},
				Description: `TeamEntity model`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *ChecklistTemplateDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.FirehydrantTerraformSDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.FirehydrantTerraformSDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ChecklistTemplateDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *ChecklistTemplateDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var id string
	id = data.ID.ValueString()

	request := operations.GetV1ChecklistTemplatesIDRequest{
		ID: id,
	}
	res, err := r.client.ChecklistTemplates.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ChecklistTemplateEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedChecklistTemplateEntity(res.ChecklistTemplateEntity)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
