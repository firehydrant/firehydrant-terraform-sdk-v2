// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *EnvironmentResourceModel) ToSharedPostV1Environments() *shared.PostV1Environments {
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.PostV1Environments{
		Name:        name,
		Description: description,
	}
	return &out
}

func (r *EnvironmentResourceModel) RefreshFromSharedEnvironmentEntryEntity(resp *shared.EnvironmentEntryEntity) {
	if resp != nil {
		r.ActiveIncidents = types.StringPointerValue(resp.ActiveIncidents)
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ExternalResources = []tfTypes.ExternalResourceEntity{}
		if len(r.ExternalResources) > len(resp.ExternalResources) {
			r.ExternalResources = r.ExternalResources[:len(resp.ExternalResources)]
		}
		for externalResourcesCount, externalResourcesItem := range resp.ExternalResources {
			var externalResources1 tfTypes.ExternalResourceEntity
			externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
			externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
			externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
			if externalResourcesItem.CreatedAt != nil {
				externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				externalResources1.CreatedAt = types.StringNull()
			}
			externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
			externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
			externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
			if externalResourcesItem.UpdatedAt != nil {
				externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				externalResources1.UpdatedAt = types.StringNull()
			}
			if externalResourcesCount+1 > len(r.ExternalResources) {
				r.ExternalResources = append(r.ExternalResources, externalResources1)
			} else {
				r.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
				r.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
				r.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
				r.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
				r.ExternalResources[externalResourcesCount].Name = externalResources1.Name
				r.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
				r.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
				r.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		r.Slug = types.StringPointerValue(resp.Slug)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
	}
}

func (r *EnvironmentResourceModel) ToSharedPatchV1EnvironmentsEnvironmentID() *shared.PatchV1EnvironmentsEnvironmentID {
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	out := shared.PatchV1EnvironmentsEnvironmentID{
		Name:        name,
		Description: description,
	}
	return &out
}
