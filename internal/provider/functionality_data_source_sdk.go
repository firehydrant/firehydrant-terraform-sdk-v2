// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"time"
)

func (r *FunctionalityDataSourceModel) RefreshFromSharedFunctionalityEntity(resp *shared.FunctionalityEntity) {
	if resp != nil {
		r.ActiveIncidents = []types.String{}
		for _, v := range resp.ActiveIncidents {
			r.ActiveIncidents = append(r.ActiveIncidents, types.StringValue(v))
		}
		r.AlertOnAdd = types.BoolPointerValue(resp.AlertOnAdd)
		r.AutoAddRespondingTeam = types.BoolPointerValue(resp.AutoAddRespondingTeam)
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ExternalResources = []tfTypes.ExternalResourceEntity{}
		if len(r.ExternalResources) > len(resp.ExternalResources) {
			r.ExternalResources = r.ExternalResources[:len(resp.ExternalResources)]
		}
		for externalResourcesCount, externalResourcesItem := range resp.ExternalResources {
			var externalResources1 tfTypes.ExternalResourceEntity
			externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
			externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
			externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
			if externalResourcesItem.CreatedAt != nil {
				externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				externalResources1.CreatedAt = types.StringNull()
			}
			externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
			externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
			externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
			if externalResourcesItem.UpdatedAt != nil {
				externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				externalResources1.UpdatedAt = types.StringNull()
			}
			if externalResourcesCount+1 > len(r.ExternalResources) {
				r.ExternalResources = append(r.ExternalResources, externalResources1)
			} else {
				r.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
				r.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
				r.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
				r.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
				r.ExternalResources[externalResourcesCount].Name = externalResources1.Name
				r.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
				r.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
				r.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Links = []tfTypes.LinksEntity{}
		if len(r.Links) > len(resp.Links) {
			r.Links = r.Links[:len(resp.Links)]
		}
		for linksCount, linksItem := range resp.Links {
			var links1 tfTypes.LinksEntity
			links1.HrefURL = types.StringPointerValue(linksItem.HrefURL)
			links1.IconURL = types.StringPointerValue(linksItem.IconURL)
			links1.ID = types.StringPointerValue(linksItem.ID)
			links1.Name = types.StringPointerValue(linksItem.Name)
			if linksCount+1 > len(r.Links) {
				r.Links = append(r.Links, links1)
			} else {
				r.Links[linksCount].HrefURL = links1.HrefURL
				r.Links[linksCount].IconURL = links1.IconURL
				r.Links[linksCount].ID = links1.ID
				r.Links[linksCount].Name = links1.Name
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Owner == nil {
			r.Owner = nil
		} else {
			r.Owner = &tfTypes.TeamEntity1{}
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
		if resp.UpdatedBy == nil {
			r.UpdatedBy = nil
		} else {
			r.UpdatedBy = &tfTypes.AuthorEntity{}
			r.UpdatedBy.Email = types.StringPointerValue(resp.UpdatedBy.Email)
			r.UpdatedBy.ID = types.StringPointerValue(resp.UpdatedBy.ID)
			r.UpdatedBy.Name = types.StringPointerValue(resp.UpdatedBy.Name)
			r.UpdatedBy.Source = types.StringPointerValue(resp.UpdatedBy.Source)
		}
	}
}
