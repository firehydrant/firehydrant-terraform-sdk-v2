// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &FunctionalitiesDataSource{}
var _ datasource.DataSourceWithConfigure = &FunctionalitiesDataSource{}

func NewFunctionalitiesDataSource() datasource.DataSource {
	return &FunctionalitiesDataSource{}
}

// FunctionalitiesDataSource is the data source implementation.
type FunctionalitiesDataSource struct {
	client *sdk.FirehydrantTerraformSDK
}

// FunctionalitiesDataSourceModel describes the data model.
type FunctionalitiesDataSourceModel struct {
	Data       []tfTypes.FunctionalityEntity `tfsdk:"data"`
	Impacted   types.String                  `tfsdk:"impacted"`
	Labels     types.String                  `tfsdk:"labels"`
	Lite       types.Bool                    `tfsdk:"lite"`
	Name       types.String                  `tfsdk:"name"`
	Owner      types.String                  `tfsdk:"owner"`
	Page       types.Int64                   `tfsdk:"page"`
	Pagination *tfTypes.PaginationEntity     `tfsdk:"pagination"`
	PerPage    types.Int64                   `tfsdk:"per_page"`
	Query      types.String                  `tfsdk:"query"`
}

// Metadata returns the data source type name.
func (r *FunctionalitiesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_functionalities"
}

// Schema defines the schema for the data source.
func (r *FunctionalitiesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Functionalities DataSource",

		Attributes: map[string]schema.Attribute{
			"data": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"active_incidents": schema.ListAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `List of active incident guids`,
						},
						"alert_on_add": schema.BoolAttribute{
							Computed: true,
						},
						"auto_add_responding_team": schema.BoolAttribute{
							Computed: true,
						},
						"created_at": schema.StringAttribute{
							Computed: true,
						},
						"description": schema.StringAttribute{
							Computed: true,
						},
						"external_resources": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"connection_id": schema.StringAttribute{
										Computed: true,
									},
									"connection_name": schema.StringAttribute{
										Computed: true,
									},
									"connection_type": schema.StringAttribute{
										Computed: true,
									},
									"created_at": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"remote_id": schema.StringAttribute{
										Computed: true,
									},
									"remote_url": schema.StringAttribute{
										Computed: true,
									},
									"updated_at": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							Description: `Information about known linkages to representations of services outside of FireHydrant.`,
						},
						"id": schema.StringAttribute{
							Computed: true,
						},
						"labels": schema.MapAttribute{
							Computed:    true,
							ElementType: types.StringType,
							Description: `An object of label key and values`,
						},
						"links": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"href_url": schema.StringAttribute{
										Computed: true,
									},
									"icon_url": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							Description: `List of links attached to this functionality.`,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"owner": schema.SingleNestedAttribute{
							Computed:    true,
							Description: `TeamEntity model`,
						},
						"slug": schema.StringAttribute{
							Computed: true,
						},
						"updated_at": schema.StringAttribute{
							Computed: true,
						},
						"updated_by": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"email": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"source": schema.StringAttribute{
									Computed: true,
								},
							},
						},
					},
				},
			},
			"impacted": schema.StringAttribute{
				Optional:    true,
				Description: `A query to search services by if they are impacted with active incidents`,
			},
			"labels": schema.StringAttribute{
				Optional:    true,
				Description: `A comma separated list of label key / values in the format of 'key=value,key2=value2'. To filter change events that have a key (with no specific value), omit the value`,
			},
			"lite": schema.BoolAttribute{
				Optional:    true,
				Description: `Boolean to determine whether to return a slimified version of the functionalities object`,
			},
			"name": schema.StringAttribute{
				Optional:    true,
				Description: `A query to search functionalities by their name`,
			},
			"owner": schema.StringAttribute{
				Optional:    true,
				Description: `A query to search functionalities by their owning team ID`,
			},
			"page": schema.Int64Attribute{
				Optional: true,
			},
			"pagination": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"count": schema.Int64Attribute{
						Computed: true,
					},
					"items": schema.Int64Attribute{
						Computed: true,
					},
					"last": schema.Int64Attribute{
						Computed: true,
					},
					"next": schema.Int64Attribute{
						Computed: true,
					},
					"page": schema.Int64Attribute{
						Computed: true,
					},
					"pages": schema.Int64Attribute{
						Computed: true,
					},
					"prev": schema.Int64Attribute{
						Computed: true,
					},
				},
			},
			"per_page": schema.Int64Attribute{
				Optional: true,
			},
			"query": schema.StringAttribute{
				Optional:    true,
				Description: `A query to search functionalities by their name or description`,
			},
		},
	}
}

func (r *FunctionalitiesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.FirehydrantTerraformSDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.FirehydrantTerraformSDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *FunctionalitiesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *FunctionalitiesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	query := new(string)
	if !data.Query.IsUnknown() && !data.Query.IsNull() {
		*query = data.Query.ValueString()
	} else {
		query = nil
	}
	name := new(string)
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		*name = data.Name.ValueString()
	} else {
		name = nil
	}
	impacted := new(string)
	if !data.Impacted.IsUnknown() && !data.Impacted.IsNull() {
		*impacted = data.Impacted.ValueString()
	} else {
		impacted = nil
	}
	labels := new(string)
	if !data.Labels.IsUnknown() && !data.Labels.IsNull() {
		*labels = data.Labels.ValueString()
	} else {
		labels = nil
	}
	owner := new(string)
	if !data.Owner.IsUnknown() && !data.Owner.IsNull() {
		*owner = data.Owner.ValueString()
	} else {
		owner = nil
	}
	lite := new(bool)
	if !data.Lite.IsUnknown() && !data.Lite.IsNull() {
		*lite = data.Lite.ValueBool()
	} else {
		lite = nil
	}
	page := new(int)
	if !data.Page.IsUnknown() && !data.Page.IsNull() {
		*page = int(data.Page.ValueInt64())
	} else {
		page = nil
	}
	perPage := new(int)
	if !data.PerPage.IsUnknown() && !data.PerPage.IsNull() {
		*perPage = int(data.PerPage.ValueInt64())
	} else {
		perPage = nil
	}
	request := operations.GetV1FunctionalitiesRequest{
		Query:    query,
		Name:     name,
		Impacted: impacted,
		Labels:   labels,
		Owner:    owner,
		Lite:     lite,
		Page:     page,
		PerPage:  perPage,
	}
	res, err := r.client.Functionalities.List(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.FunctionalityEntityPaginated != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedFunctionalityEntityPaginated(res.FunctionalityEntityPaginated)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
