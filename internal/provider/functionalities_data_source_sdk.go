// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"time"
)

func (r *FunctionalitiesDataSourceModel) RefreshFromSharedFunctionalityEntityPaginated(resp *shared.FunctionalityEntityPaginated) {
	if resp != nil {
		r.Data = []tfTypes.FunctionalityEntity{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data1 tfTypes.FunctionalityEntity
			data1.ActiveIncidents = []types.String{}
			for _, v := range dataItem.ActiveIncidents {
				data1.ActiveIncidents = append(data1.ActiveIncidents, types.StringValue(v))
			}
			data1.AlertOnAdd = types.BoolPointerValue(dataItem.AlertOnAdd)
			data1.AutoAddRespondingTeam = types.BoolPointerValue(dataItem.AutoAddRespondingTeam)
			if dataItem.CreatedAt != nil {
				data1.CreatedAt = types.StringValue(dataItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				data1.CreatedAt = types.StringNull()
			}
			data1.Description = types.StringPointerValue(dataItem.Description)
			data1.ExternalResources = []tfTypes.ExternalResourceEntity{}
			for externalResourcesCount, externalResourcesItem := range dataItem.ExternalResources {
				var externalResources1 tfTypes.ExternalResourceEntity
				externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
				externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
				externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
				if externalResourcesItem.CreatedAt != nil {
					externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					externalResources1.CreatedAt = types.StringNull()
				}
				externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
				externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
				externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
				if externalResourcesItem.UpdatedAt != nil {
					externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					externalResources1.UpdatedAt = types.StringNull()
				}
				if externalResourcesCount+1 > len(data1.ExternalResources) {
					data1.ExternalResources = append(data1.ExternalResources, externalResources1)
				} else {
					data1.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
					data1.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
					data1.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
					data1.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
					data1.ExternalResources[externalResourcesCount].Name = externalResources1.Name
					data1.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
					data1.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
					data1.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
				}
			}
			data1.ID = types.StringPointerValue(dataItem.ID)
			if len(dataItem.Labels) > 0 {
				data1.Labels = make(map[string]types.String)
				for key, value := range dataItem.Labels {
					data1.Labels[key] = types.StringValue(value)
				}
			}
			data1.Links = []tfTypes.LinksEntity{}
			for linksCount, linksItem := range dataItem.Links {
				var links1 tfTypes.LinksEntity
				links1.HrefURL = types.StringPointerValue(linksItem.HrefURL)
				links1.IconURL = types.StringPointerValue(linksItem.IconURL)
				links1.ID = types.StringPointerValue(linksItem.ID)
				links1.Name = types.StringPointerValue(linksItem.Name)
				if linksCount+1 > len(data1.Links) {
					data1.Links = append(data1.Links, links1)
				} else {
					data1.Links[linksCount].HrefURL = links1.HrefURL
					data1.Links[linksCount].IconURL = links1.IconURL
					data1.Links[linksCount].ID = links1.ID
					data1.Links[linksCount].Name = links1.Name
				}
			}
			data1.Name = types.StringPointerValue(dataItem.Name)
			if dataItem.Owner == nil {
				data1.Owner = nil
			} else {
				data1.Owner = &tfTypes.TeamEntity1{}
			}
			data1.Slug = types.StringPointerValue(dataItem.Slug)
			if dataItem.UpdatedAt != nil {
				data1.UpdatedAt = types.StringValue(dataItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				data1.UpdatedAt = types.StringNull()
			}
			if dataItem.UpdatedBy == nil {
				data1.UpdatedBy = nil
			} else {
				data1.UpdatedBy = &tfTypes.AuthorEntity{}
				data1.UpdatedBy.Email = types.StringPointerValue(dataItem.UpdatedBy.Email)
				data1.UpdatedBy.ID = types.StringPointerValue(dataItem.UpdatedBy.ID)
				data1.UpdatedBy.Name = types.StringPointerValue(dataItem.UpdatedBy.Name)
				data1.UpdatedBy.Source = types.StringPointerValue(dataItem.UpdatedBy.Source)
			}
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data1)
			} else {
				r.Data[dataCount].ActiveIncidents = data1.ActiveIncidents
				r.Data[dataCount].AlertOnAdd = data1.AlertOnAdd
				r.Data[dataCount].AutoAddRespondingTeam = data1.AutoAddRespondingTeam
				r.Data[dataCount].CreatedAt = data1.CreatedAt
				r.Data[dataCount].Description = data1.Description
				r.Data[dataCount].ExternalResources = data1.ExternalResources
				r.Data[dataCount].ID = data1.ID
				r.Data[dataCount].Labels = data1.Labels
				r.Data[dataCount].Links = data1.Links
				r.Data[dataCount].Name = data1.Name
				r.Data[dataCount].Owner = data1.Owner
				r.Data[dataCount].Slug = data1.Slug
				r.Data[dataCount].UpdatedAt = data1.UpdatedAt
				r.Data[dataCount].UpdatedBy = data1.UpdatedBy
			}
		}
		if resp.Pagination == nil {
			r.Pagination = nil
		} else {
			r.Pagination = &tfTypes.PaginationEntity{}
			if resp.Pagination.Count != nil {
				r.Pagination.Count = types.Int64Value(int64(*resp.Pagination.Count))
			} else {
				r.Pagination.Count = types.Int64Null()
			}
			if resp.Pagination.Items != nil {
				r.Pagination.Items = types.Int64Value(int64(*resp.Pagination.Items))
			} else {
				r.Pagination.Items = types.Int64Null()
			}
			if resp.Pagination.Last != nil {
				r.Pagination.Last = types.Int64Value(int64(*resp.Pagination.Last))
			} else {
				r.Pagination.Last = types.Int64Null()
			}
			if resp.Pagination.Next != nil {
				r.Pagination.Next = types.Int64Value(int64(*resp.Pagination.Next))
			} else {
				r.Pagination.Next = types.Int64Null()
			}
			if resp.Pagination.Page != nil {
				r.Pagination.Page = types.Int64Value(int64(*resp.Pagination.Page))
			} else {
				r.Pagination.Page = types.Int64Null()
			}
			if resp.Pagination.Pages != nil {
				r.Pagination.Pages = types.Int64Value(int64(*resp.Pagination.Pages))
			} else {
				r.Pagination.Pages = types.Int64Null()
			}
			if resp.Pagination.Prev != nil {
				r.Pagination.Prev = types.Int64Value(int64(*resp.Pagination.Prev))
			} else {
				r.Pagination.Prev = types.Int64Null()
			}
		}
	}
}
