// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &RunbooksDataSource{}
var _ datasource.DataSourceWithConfigure = &RunbooksDataSource{}

func NewRunbooksDataSource() datasource.DataSource {
	return &RunbooksDataSource{}
}

// RunbooksDataSource is the data source implementation.
type RunbooksDataSource struct {
	client *sdk.FirehydrantTerraformSDK
}

// RunbooksDataSourceModel describes the data model.
type RunbooksDataSourceModel struct {
	ActionElements                  []tfTypes.TeamEntity1   `tfsdk:"action_elements"`
	ActionID                        types.String            `tfsdk:"action_id"`
	ActiveIncidents                 []types.String          `tfsdk:"active_incidents"`
	AlertOnAdd                      types.Bool              `tfsdk:"alert_on_add"`
	AsyncURL                        types.String            `tfsdk:"async_url"`
	AuthorizedBy                    types.String            `tfsdk:"authorized_by"`
	AuthorizedByID                  types.String            `tfsdk:"authorized_by_id"`
	AutoAddRespondingTeam           types.Bool              `tfsdk:"auto_add_responding_team"`
	AutoAttachToRestrictedIncidents types.Bool              `tfsdk:"auto_attach_to_restricted_incidents"`
	Automatable                     types.Bool              `tfsdk:"automatable"`
	Automatic                       types.Bool              `tfsdk:"automatic"`
	Categories                      types.String            `tfsdk:"categories"`
	Category                        types.String            `tfsdk:"category"`
	ChannelID                       types.String            `tfsdk:"channel_id"`
	ChannelName                     types.String            `tfsdk:"channel_name"`
	ChannelURL                      types.String            `tfsdk:"channel_url"`
	Clearable                       types.Bool              `tfsdk:"clearable"`
	Config                          *tfTypes.TeamEntity1    `tfsdk:"config"`
	ConfigurationURL                types.String            `tfsdk:"configuration_url"`
	ConnectionID                    types.String            `tfsdk:"connection_id"`
	ConnectionName                  types.String            `tfsdk:"connection_name"`
	ConnectionType                  types.String            `tfsdk:"connection_type"`
	CreatedAt                       types.String            `tfsdk:"created_at"`
	DefaultLogic                    *tfTypes.TeamEntity1    `tfsdk:"default_logic"`
	DefaultRuleData                 *tfTypes.TeamEntity1    `tfsdk:"default_rule_data"`
	DefaultValue                    types.String            `tfsdk:"default_value"`
	DelayDuration                   types.String            `tfsdk:"delay_duration"`
	Deprecated                      types.Bool              `tfsdk:"deprecated"`
	Description                     types.String            `tfsdk:"description"`
	Details                         *tfTypes.TeamEntity1    `tfsdk:"details"`
	Discarded                       types.Bool              `tfsdk:"discarded"`
	DiscardedAt                     types.String            `tfsdk:"discarded_at"`
	Disliked                        types.Bool              `tfsdk:"disliked"`
	Dislikes                        types.Int64             `tfsdk:"dislikes"`
	DisplayName                     types.String            `tfsdk:"display_name"`
	DocumentationURL                types.String            `tfsdk:"documentation_url"`
	Email                           types.String            `tfsdk:"email"`
	Enabled                         types.Bool              `tfsdk:"enabled"`
	HrefURL                         types.String            `tfsdk:"href_url"`
	IconURL                         types.String            `tfsdk:"icon_url"`
	ID                              types.String            `tfsdk:"id"`
	Installed                       types.Bool              `tfsdk:"installed"`
	Integration                     types.String            `tfsdk:"integration"`
	IntegrationID                   types.String            `tfsdk:"integration_id"`
	IntegrationSlug                 types.String            `tfsdk:"integration_slug"`
	IsEditable                      types.Bool              `tfsdk:"is_editable"`
	IsMulti                         types.Bool              `tfsdk:"is_multi"`
	Label                           types.String            `tfsdk:"label"`
	Labels                          map[string]types.String `tfsdk:"labels"`
	Liked                           types.Bool              `tfsdk:"liked"`
	Likes                           types.Int64             `tfsdk:"likes"`
	Logic                           *tfTypes.TeamEntity1    `tfsdk:"logic"`
	LogoURL                         types.String            `tfsdk:"logo_url"`
	MsTeamID                        types.String            `tfsdk:"ms_team_id"`
	Name                            types.String            `tfsdk:"name"`
	NatIP                           types.String            `tfsdk:"nat_ip"`
	Owner                           *tfTypes.TeamEntity1    `tfsdk:"owner"`
	Owners                          types.String            `tfsdk:"owners"`
	Page                            types.Int64             `tfsdk:"page"`
	PerPage                         types.Int64             `tfsdk:"per_page"`
	Placeholder                     types.String            `tfsdk:"placeholder"`
	Prerequisites                   *tfTypes.TeamEntity1    `tfsdk:"prerequisites"`
	RemoteID                        types.String            `tfsdk:"remote_id"`
	RemoteURL                       types.String            `tfsdk:"remote_url"`
	Repeatable                      types.Bool              `tfsdk:"repeatable"`
	Repeats                         types.Bool              `tfsdk:"repeats"`
	RepeatsDuration                 types.String            `tfsdk:"repeats_duration"`
	Required                        types.Bool              `tfsdk:"required"`
	Rerunnable                      types.Bool              `tfsdk:"rerunnable"`
	Reruns                          types.Bool              `tfsdk:"reruns"`
	RunbookTemplateID               types.String            `tfsdk:"runbook_template_id"`
	SetupURL                        types.String            `tfsdk:"setup_url"`
	SignalsEnabledNotificationTypes []types.String          `tfsdk:"signals_enabled_notification_types"`
	SignalsIcalURL                  types.String            `tfsdk:"signals_ical_url"`
	SlackChannelID                  types.String            `tfsdk:"slack_channel_id"`
	SlackLinked                     types.Bool              `tfsdk:"slack_linked"`
	SlackUserID                     types.String            `tfsdk:"slack_user_id"`
	Slug                            types.String            `tfsdk:"slug"`
	Sort                            types.String            `tfsdk:"sort"`
	Source                          types.String            `tfsdk:"source"`
	Status                          types.String            `tfsdk:"status"`
	StepElements                    []tfTypes.TeamEntity1   `tfsdk:"step_elements"`
	StepID                          types.String            `tfsdk:"step_id"`
	Summary                         types.String            `tfsdk:"summary"`
	SupportedRunbookTypes           []types.String          `tfsdk:"supported_runbook_types"`
	TeamName                        types.String            `tfsdk:"team_name"`
	Text                            types.String            `tfsdk:"text"`
	Tutorial                        types.Bool              `tfsdk:"tutorial"`
	Type                            types.String            `tfsdk:"type"`
	UpdatedAt                       types.String            `tfsdk:"updated_at"`
	Value                           types.String            `tfsdk:"value"`
	Voted                           types.Bool              `tfsdk:"voted"`
}

// Metadata returns the data source type name.
func (r *RunbooksDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_runbooks"
}

// Schema defines the schema for the data source.
func (r *RunbooksDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Runbooks DataSource",

		Attributes: map[string]schema.Attribute{
			"action_elements": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `A list of action elements`,
			},
			"action_id": schema.StringAttribute{
				Computed: true,
			},
			"active_incidents": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `List of active incident guids`,
			},
			"alert_on_add": schema.BoolAttribute{
				Computed: true,
			},
			"async_url": schema.StringAttribute{
				Computed: true,
			},
			"authorized_by": schema.StringAttribute{
				Computed: true,
			},
			"authorized_by_id": schema.StringAttribute{
				Computed: true,
			},
			"auto_add_responding_team": schema.BoolAttribute{
				Computed: true,
			},
			"auto_attach_to_restricted_incidents": schema.BoolAttribute{
				Computed: true,
			},
			"automatable": schema.BoolAttribute{
				Computed: true,
			},
			"automatic": schema.BoolAttribute{
				Computed: true,
			},
			"categories": schema.StringAttribute{
				Computed:    true,
				Description: `categories the runbook applies to`,
			},
			"category": schema.StringAttribute{
				Computed: true,
			},
			"channel_id": schema.StringAttribute{
				Computed: true,
			},
			"channel_name": schema.StringAttribute{
				Computed: true,
			},
			"channel_url": schema.StringAttribute{
				Computed: true,
			},
			"clearable": schema.BoolAttribute{
				Computed: true,
			},
			"config": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `An unstructured object of key/value pairs describing the config settings for the step.`,
			},
			"configuration_url": schema.StringAttribute{
				Computed: true,
			},
			"connection_id": schema.StringAttribute{
				Computed: true,
			},
			"connection_name": schema.StringAttribute{
				Computed: true,
			},
			"connection_type": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
			},
			"default_logic": schema.SingleNestedAttribute{
				Computed: true,
			},
			"default_rule_data": schema.SingleNestedAttribute{
				Computed: true,
			},
			"default_value": schema.StringAttribute{
				Computed: true,
			},
			"delay_duration": schema.StringAttribute{
				Computed: true,
			},
			"deprecated": schema.BoolAttribute{
				Computed: true,
			},
			"description": schema.StringAttribute{
				Computed: true,
			},
			"details": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `Integration-specific details of this connection. As identified by the integration_slug, this object will be represented by that integration's ConnectionEntity.`,
			},
			"discarded": schema.BoolAttribute{
				Computed: true,
			},
			"discarded_at": schema.StringAttribute{
				Computed: true,
			},
			"disliked": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether or not the current actor has voted negatively`,
			},
			"dislikes": schema.Int64Attribute{
				Computed: true,
			},
			"display_name": schema.StringAttribute{
				Computed: true,
			},
			"documentation_url": schema.StringAttribute{
				Computed:    true,
				Description: `Location of documentation for this action`,
			},
			"email": schema.StringAttribute{
				Computed: true,
			},
			"enabled": schema.BoolAttribute{
				Computed: true,
			},
			"href_url": schema.StringAttribute{
				Computed: true,
			},
			"icon_url": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"installed": schema.BoolAttribute{
				Computed: true,
			},
			"integration": schema.StringAttribute{
				Computed: true,
			},
			"integration_id": schema.StringAttribute{
				Computed: true,
			},
			"integration_slug": schema.StringAttribute{
				Computed: true,
			},
			"is_editable": schema.BoolAttribute{
				Computed: true,
			},
			"is_multi": schema.BoolAttribute{
				Computed: true,
			},
			"label": schema.StringAttribute{
				Computed: true,
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `An object of label key and values`,
			},
			"liked": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether or not the current actor has voted positively`,
			},
			"likes": schema.Int64Attribute{
				Computed: true,
			},
			"logic": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
			},
			"logo_url": schema.StringAttribute{
				Computed: true,
			},
			"ms_team_id": schema.StringAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A query to search runbooks by their name`,
			},
			"nat_ip": schema.StringAttribute{
				Computed: true,
			},
			"owner": schema.SingleNestedAttribute{
				Computed:    true,
				Description: `TeamEntity model`,
			},
			"owners": schema.StringAttribute{
				Optional:    true,
				Description: `A query to search runbooks by their owners`,
			},
			"page": schema.Int64Attribute{
				Optional: true,
			},
			"per_page": schema.Int64Attribute{
				Optional: true,
			},
			"placeholder": schema.StringAttribute{
				Computed: true,
			},
			"prerequisites": schema.SingleNestedAttribute{
				Computed: true,
			},
			"remote_id": schema.StringAttribute{
				Computed: true,
			},
			"remote_url": schema.StringAttribute{
				Computed: true,
			},
			"repeatable": schema.BoolAttribute{
				Computed: true,
			},
			"repeats": schema.BoolAttribute{
				Computed: true,
			},
			"repeats_duration": schema.StringAttribute{
				Computed: true,
			},
			"required": schema.BoolAttribute{
				Computed: true,
			},
			"rerunnable": schema.BoolAttribute{
				Computed: true,
			},
			"reruns": schema.BoolAttribute{
				Computed: true,
			},
			"runbook_template_id": schema.StringAttribute{
				Computed: true,
			},
			"setup_url": schema.StringAttribute{
				Computed: true,
			},
			"signals_enabled_notification_types": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"signals_ical_url": schema.StringAttribute{
				Computed: true,
			},
			"slack_channel_id": schema.StringAttribute{
				Computed: true,
			},
			"slack_linked": schema.BoolAttribute{
				Computed: true,
			},
			"slack_user_id": schema.StringAttribute{
				Computed: true,
			},
			"slug": schema.StringAttribute{
				Computed: true,
			},
			"sort": schema.StringAttribute{
				Optional:    true,
				Description: `Sort runbooks by their updated date. Accepts 'asc', 'desc'`,
			},
			"source": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"step_elements": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{},
				},
				Description: `A list of step elements`,
			},
			"step_id": schema.StringAttribute{
				Computed: true,
			},
			"summary": schema.StringAttribute{
				Computed: true,
			},
			"supported_runbook_types": schema.ListAttribute{
				Computed:    true,
				ElementType: types.StringType,
			},
			"team_name": schema.StringAttribute{
				Computed: true,
			},
			"text": schema.StringAttribute{
				Computed: true,
			},
			"tutorial": schema.BoolAttribute{
				Computed: true,
			},
			"type": schema.StringAttribute{
				Computed: true,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
			},
			"value": schema.StringAttribute{
				Computed: true,
			},
			"voted": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether or not the current actor has voted`,
			},
		},
	}
}

func (r *RunbooksDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.FirehydrantTerraformSDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.FirehydrantTerraformSDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *RunbooksDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *RunbooksDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	page := new(int)
	if !data.Page.IsUnknown() && !data.Page.IsNull() {
		*page = int(data.Page.ValueInt64())
	} else {
		page = nil
	}
	perPage := new(int)
	if !data.PerPage.IsUnknown() && !data.PerPage.IsNull() {
		*perPage = int(data.PerPage.ValueInt64())
	} else {
		perPage = nil
	}
	name := new(string)
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		*name = data.Name.ValueString()
	} else {
		name = nil
	}
	owners := new(string)
	if !data.Owners.IsUnknown() && !data.Owners.IsNull() {
		*owners = data.Owners.ValueString()
	} else {
		owners = nil
	}
	sort := new(operations.QueryParamSort)
	if !data.Sort.IsUnknown() && !data.Sort.IsNull() {
		*sort = operations.QueryParamSort(data.Sort.ValueString())
	} else {
		sort = nil
	}
	request := operations.GetV1RunbooksRequest{
		Page:    page,
		PerPage: perPage,
		Name:    name,
		Owners:  owners,
		Sort:    sort,
	}
	res, err := r.client.Runbooks.List(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
