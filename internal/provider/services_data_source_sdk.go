// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	tfTypes "github.com/firehydrant/terraform-provider-firehydrant/internal/provider/types"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"time"
)

func (r *ServicesDataSourceModel) RefreshFromSharedServiceEntityPaginated(resp *shared.ServiceEntityPaginated) {
	if resp != nil {
		r.Data = []tfTypes.ServiceEntity{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data1 tfTypes.ServiceEntity
			data1.ActiveIncidents = []types.String{}
			for _, v := range dataItem.ActiveIncidents {
				data1.ActiveIncidents = append(data1.ActiveIncidents, types.StringValue(v))
			}
			data1.AlertOnAdd = types.BoolPointerValue(dataItem.AlertOnAdd)
			data1.AllowedParams = []types.String{}
			for _, v := range dataItem.AllowedParams {
				data1.AllowedParams = append(data1.AllowedParams, types.StringValue(v))
			}
			data1.AutoAddRespondingTeam = types.BoolPointerValue(dataItem.AutoAddRespondingTeam)
			data1.Checklists = []tfTypes.Checklists{}
			for checklistsCount, checklistsItem := range dataItem.Checklists {
				var checklists1 tfTypes.Checklists
				checklists1.Checks = []tfTypes.ChecklistCheckEntity{}
				for checksCount, checksItem := range checklistsItem.Checks {
					var checks1 tfTypes.ChecklistCheckEntity
					checks1.Description = types.StringPointerValue(checksItem.Description)
					checks1.ID = types.StringPointerValue(checksItem.ID)
					checks1.Name = types.StringPointerValue(checksItem.Name)
					checks1.Status = types.BoolPointerValue(checksItem.Status)
					if checksCount+1 > len(checklists1.Checks) {
						checklists1.Checks = append(checklists1.Checks, checks1)
					} else {
						checklists1.Checks[checksCount].Description = checks1.Description
						checklists1.Checks[checksCount].ID = checks1.ID
						checklists1.Checks[checksCount].Name = checks1.Name
						checklists1.Checks[checksCount].Status = checks1.Status
					}
				}
				checklists1.CreatedAt = types.StringPointerValue(checklistsItem.CreatedAt)
				checklists1.Description = types.StringPointerValue(checklistsItem.Description)
				checklists1.ID = types.StringPointerValue(checklistsItem.ID)
				checklists1.Name = types.StringPointerValue(checklistsItem.Name)
				if checklistsItem.Owner == nil {
					checklists1.Owner = nil
				} else {
					checklists1.Owner = &tfTypes.TeamEntity{}
					if checklistsItem.Owner.CreatedAt != nil {
						checklists1.Owner.CreatedAt = types.StringValue(checklistsItem.Owner.CreatedAt.Format(time.RFC3339Nano))
					} else {
						checklists1.Owner.CreatedAt = types.StringNull()
					}
					if checklistsItem.Owner.CreatedBy == nil {
						checklists1.Owner.CreatedBy = nil
					} else {
						checklists1.Owner.CreatedBy = &tfTypes.AuthorEntity{}
						checklists1.Owner.CreatedBy.Email = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Email)
						checklists1.Owner.CreatedBy.ID = types.StringPointerValue(checklistsItem.Owner.CreatedBy.ID)
						checklists1.Owner.CreatedBy.Name = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Name)
						checklists1.Owner.CreatedBy.Source = types.StringPointerValue(checklistsItem.Owner.CreatedBy.Source)
					}
					checklists1.Owner.Description = types.StringPointerValue(checklistsItem.Owner.Description)
					checklists1.Owner.Functionalities = []tfTypes.FunctionalityEntity{}
					for functionalitiesCount, functionalitiesItem := range checklistsItem.Owner.Functionalities {
						var functionalities1 tfTypes.FunctionalityEntity
						functionalities1.ActiveIncidents = []types.String{}
						for _, v := range functionalitiesItem.ActiveIncidents {
							functionalities1.ActiveIncidents = append(functionalities1.ActiveIncidents, types.StringValue(v))
						}
						functionalities1.AlertOnAdd = types.BoolPointerValue(functionalitiesItem.AlertOnAdd)
						functionalities1.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem.AutoAddRespondingTeam)
						if functionalitiesItem.CreatedAt != nil {
							functionalities1.CreatedAt = types.StringValue(functionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							functionalities1.CreatedAt = types.StringNull()
						}
						functionalities1.Description = types.StringPointerValue(functionalitiesItem.Description)
						functionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
						for externalResourcesCount, externalResourcesItem := range functionalitiesItem.ExternalResources {
							var externalResources1 tfTypes.ExternalResourceEntity
							externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
							externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
							externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
							if externalResourcesItem.CreatedAt != nil {
								externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
							} else {
								externalResources1.CreatedAt = types.StringNull()
							}
							externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
							externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
							externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
							if externalResourcesItem.UpdatedAt != nil {
								externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								externalResources1.UpdatedAt = types.StringNull()
							}
							if externalResourcesCount+1 > len(functionalities1.ExternalResources) {
								functionalities1.ExternalResources = append(functionalities1.ExternalResources, externalResources1)
							} else {
								functionalities1.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
								functionalities1.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
								functionalities1.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
								functionalities1.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
								functionalities1.ExternalResources[externalResourcesCount].Name = externalResources1.Name
								functionalities1.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
								functionalities1.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
								functionalities1.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
							}
						}
						functionalities1.ID = types.StringPointerValue(functionalitiesItem.ID)
						if len(functionalitiesItem.Labels) > 0 {
							functionalities1.Labels = make(map[string]types.String)
							for key, value := range functionalitiesItem.Labels {
								functionalities1.Labels[key] = types.StringValue(value)
							}
						}
						functionalities1.Links = []tfTypes.LinksEntity{}
						for linksCount, linksItem := range functionalitiesItem.Links {
							var links1 tfTypes.LinksEntity
							links1.HrefURL = types.StringPointerValue(linksItem.HrefURL)
							links1.IconURL = types.StringPointerValue(linksItem.IconURL)
							links1.ID = types.StringPointerValue(linksItem.ID)
							links1.Name = types.StringPointerValue(linksItem.Name)
							if linksCount+1 > len(functionalities1.Links) {
								functionalities1.Links = append(functionalities1.Links, links1)
							} else {
								functionalities1.Links[linksCount].HrefURL = links1.HrefURL
								functionalities1.Links[linksCount].IconURL = links1.IconURL
								functionalities1.Links[linksCount].ID = links1.ID
								functionalities1.Links[linksCount].Name = links1.Name
							}
						}
						functionalities1.Name = types.StringPointerValue(functionalitiesItem.Name)
						if functionalitiesItem.Owner == nil {
							functionalities1.Owner = nil
						} else {
							functionalities1.Owner = &tfTypes.TeamEntity1{}
						}
						functionalities1.Slug = types.StringPointerValue(functionalitiesItem.Slug)
						if functionalitiesItem.UpdatedAt != nil {
							functionalities1.UpdatedAt = types.StringValue(functionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							functionalities1.UpdatedAt = types.StringNull()
						}
						if functionalitiesItem.UpdatedBy == nil {
							functionalities1.UpdatedBy = nil
						} else {
							functionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
							functionalities1.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem.UpdatedBy.Email)
							functionalities1.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem.UpdatedBy.ID)
							functionalities1.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem.UpdatedBy.Name)
							functionalities1.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem.UpdatedBy.Source)
						}
						if functionalitiesCount+1 > len(checklists1.Owner.Functionalities) {
							checklists1.Owner.Functionalities = append(checklists1.Owner.Functionalities, functionalities1)
						} else {
							checklists1.Owner.Functionalities[functionalitiesCount].ActiveIncidents = functionalities1.ActiveIncidents
							checklists1.Owner.Functionalities[functionalitiesCount].AlertOnAdd = functionalities1.AlertOnAdd
							checklists1.Owner.Functionalities[functionalitiesCount].AutoAddRespondingTeam = functionalities1.AutoAddRespondingTeam
							checklists1.Owner.Functionalities[functionalitiesCount].CreatedAt = functionalities1.CreatedAt
							checklists1.Owner.Functionalities[functionalitiesCount].Description = functionalities1.Description
							checklists1.Owner.Functionalities[functionalitiesCount].ExternalResources = functionalities1.ExternalResources
							checklists1.Owner.Functionalities[functionalitiesCount].ID = functionalities1.ID
							checklists1.Owner.Functionalities[functionalitiesCount].Labels = functionalities1.Labels
							checklists1.Owner.Functionalities[functionalitiesCount].Links = functionalities1.Links
							checklists1.Owner.Functionalities[functionalitiesCount].Name = functionalities1.Name
							checklists1.Owner.Functionalities[functionalitiesCount].Owner = functionalities1.Owner
							checklists1.Owner.Functionalities[functionalitiesCount].Slug = functionalities1.Slug
							checklists1.Owner.Functionalities[functionalitiesCount].UpdatedAt = functionalities1.UpdatedAt
							checklists1.Owner.Functionalities[functionalitiesCount].UpdatedBy = functionalities1.UpdatedBy
						}
					}
					checklists1.Owner.ID = types.StringPointerValue(checklistsItem.Owner.ID)
					checklists1.Owner.Memberships = []tfTypes.MembershipEntity{}
					for membershipsCount, membershipsItem := range checklistsItem.Owner.Memberships {
						var memberships1 tfTypes.MembershipEntity
						if membershipsItem.DefaultIncidentRole == nil {
							memberships1.DefaultIncidentRole = nil
						} else {
							memberships1.DefaultIncidentRole = &tfTypes.IncidentRoleEntity{}
							if membershipsItem.DefaultIncidentRole.CreatedAt != nil {
								memberships1.DefaultIncidentRole.CreatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.CreatedAt.Format(time.RFC3339Nano))
							} else {
								memberships1.DefaultIncidentRole.CreatedAt = types.StringNull()
							}
							memberships1.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Description)
							if membershipsItem.DefaultIncidentRole.DiscardedAt != nil {
								memberships1.DefaultIncidentRole.DiscardedAt = types.StringValue(membershipsItem.DefaultIncidentRole.DiscardedAt.Format(time.RFC3339Nano))
							} else {
								memberships1.DefaultIncidentRole.DiscardedAt = types.StringNull()
							}
							memberships1.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem.DefaultIncidentRole.ID)
							memberships1.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Name)
							memberships1.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Summary)
							if membershipsItem.DefaultIncidentRole.UpdatedAt != nil {
								memberships1.DefaultIncidentRole.UpdatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								memberships1.DefaultIncidentRole.UpdatedAt = types.StringNull()
							}
						}
						if membershipsItem.Schedule == nil {
							memberships1.Schedule = nil
						} else {
							memberships1.Schedule = &tfTypes.ScheduleEntity{}
							memberships1.Schedule.Discarded = types.BoolPointerValue(membershipsItem.Schedule.Discarded)
							memberships1.Schedule.ID = types.StringPointerValue(membershipsItem.Schedule.ID)
							memberships1.Schedule.Integration = types.StringPointerValue(membershipsItem.Schedule.Integration)
							memberships1.Schedule.Name = types.StringPointerValue(membershipsItem.Schedule.Name)
						}
						if membershipsItem.User == nil {
							memberships1.User = nil
						} else {
							memberships1.User = &tfTypes.UserEntity{}
							if membershipsItem.User.CreatedAt != nil {
								memberships1.User.CreatedAt = types.StringValue(membershipsItem.User.CreatedAt.Format(time.RFC3339Nano))
							} else {
								memberships1.User.CreatedAt = types.StringNull()
							}
							memberships1.User.Email = types.StringPointerValue(membershipsItem.User.Email)
							memberships1.User.ID = types.StringPointerValue(membershipsItem.User.ID)
							memberships1.User.Name = types.StringPointerValue(membershipsItem.User.Name)
							memberships1.User.SignalsEnabledNotificationTypes = []types.String{}
							for _, v := range membershipsItem.User.SignalsEnabledNotificationTypes {
								memberships1.User.SignalsEnabledNotificationTypes = append(memberships1.User.SignalsEnabledNotificationTypes, types.StringValue(v))
							}
							memberships1.User.SlackLinked = types.BoolPointerValue(membershipsItem.User.SlackLinked)
							memberships1.User.SlackUserID = types.StringPointerValue(membershipsItem.User.SlackUserID)
							if membershipsItem.User.UpdatedAt != nil {
								memberships1.User.UpdatedAt = types.StringValue(membershipsItem.User.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								memberships1.User.UpdatedAt = types.StringNull()
							}
						}
						if membershipsCount+1 > len(checklists1.Owner.Memberships) {
							checklists1.Owner.Memberships = append(checklists1.Owner.Memberships, memberships1)
						} else {
							checklists1.Owner.Memberships[membershipsCount].DefaultIncidentRole = memberships1.DefaultIncidentRole
							checklists1.Owner.Memberships[membershipsCount].Schedule = memberships1.Schedule
							checklists1.Owner.Memberships[membershipsCount].User = memberships1.User
						}
					}
					if checklistsItem.Owner.MsTeamsChannel == nil {
						checklists1.Owner.MsTeamsChannel = nil
					} else {
						checklists1.Owner.MsTeamsChannel = &tfTypes.IntegrationsMicrosoftTeamsV2ChannelEntity{}
						checklists1.Owner.MsTeamsChannel.ChannelID = types.StringPointerValue(checklistsItem.Owner.MsTeamsChannel.ChannelID)
						checklists1.Owner.MsTeamsChannel.ChannelName = types.StringPointerValue(checklistsItem.Owner.MsTeamsChannel.ChannelName)
						checklists1.Owner.MsTeamsChannel.ChannelURL = types.StringPointerValue(checklistsItem.Owner.MsTeamsChannel.ChannelURL)
						checklists1.Owner.MsTeamsChannel.ID = types.StringPointerValue(checklistsItem.Owner.MsTeamsChannel.ID)
						checklists1.Owner.MsTeamsChannel.MsTeamID = types.StringPointerValue(checklistsItem.Owner.MsTeamsChannel.MsTeamID)
						checklists1.Owner.MsTeamsChannel.Status = types.StringPointerValue(checklistsItem.Owner.MsTeamsChannel.Status)
						checklists1.Owner.MsTeamsChannel.TeamName = types.StringPointerValue(checklistsItem.Owner.MsTeamsChannel.TeamName)
					}
					checklists1.Owner.Name = types.StringPointerValue(checklistsItem.Owner.Name)
					checklists1.Owner.OwnedFunctionalities = []tfTypes.FunctionalityEntity{}
					for ownedFunctionalitiesCount, ownedFunctionalitiesItem := range checklistsItem.Owner.OwnedFunctionalities {
						var ownedFunctionalities1 tfTypes.FunctionalityEntity
						ownedFunctionalities1.ActiveIncidents = []types.String{}
						for _, v := range ownedFunctionalitiesItem.ActiveIncidents {
							ownedFunctionalities1.ActiveIncidents = append(ownedFunctionalities1.ActiveIncidents, types.StringValue(v))
						}
						ownedFunctionalities1.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem.AlertOnAdd)
						ownedFunctionalities1.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem.AutoAddRespondingTeam)
						if ownedFunctionalitiesItem.CreatedAt != nil {
							ownedFunctionalities1.CreatedAt = types.StringValue(ownedFunctionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							ownedFunctionalities1.CreatedAt = types.StringNull()
						}
						ownedFunctionalities1.Description = types.StringPointerValue(ownedFunctionalitiesItem.Description)
						ownedFunctionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
						for externalResourcesCount1, externalResourcesItem1 := range ownedFunctionalitiesItem.ExternalResources {
							var externalResources3 tfTypes.ExternalResourceEntity
							externalResources3.ConnectionID = types.StringPointerValue(externalResourcesItem1.ConnectionID)
							externalResources3.ConnectionName = types.StringPointerValue(externalResourcesItem1.ConnectionName)
							externalResources3.ConnectionType = types.StringPointerValue(externalResourcesItem1.ConnectionType)
							if externalResourcesItem1.CreatedAt != nil {
								externalResources3.CreatedAt = types.StringValue(externalResourcesItem1.CreatedAt.Format(time.RFC3339Nano))
							} else {
								externalResources3.CreatedAt = types.StringNull()
							}
							externalResources3.Name = types.StringPointerValue(externalResourcesItem1.Name)
							externalResources3.RemoteID = types.StringPointerValue(externalResourcesItem1.RemoteID)
							externalResources3.RemoteURL = types.StringPointerValue(externalResourcesItem1.RemoteURL)
							if externalResourcesItem1.UpdatedAt != nil {
								externalResources3.UpdatedAt = types.StringValue(externalResourcesItem1.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								externalResources3.UpdatedAt = types.StringNull()
							}
							if externalResourcesCount1+1 > len(ownedFunctionalities1.ExternalResources) {
								ownedFunctionalities1.ExternalResources = append(ownedFunctionalities1.ExternalResources, externalResources3)
							} else {
								ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionID = externalResources3.ConnectionID
								ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionName = externalResources3.ConnectionName
								ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionType = externalResources3.ConnectionType
								ownedFunctionalities1.ExternalResources[externalResourcesCount1].CreatedAt = externalResources3.CreatedAt
								ownedFunctionalities1.ExternalResources[externalResourcesCount1].Name = externalResources3.Name
								ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteID = externalResources3.RemoteID
								ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteURL = externalResources3.RemoteURL
								ownedFunctionalities1.ExternalResources[externalResourcesCount1].UpdatedAt = externalResources3.UpdatedAt
							}
						}
						ownedFunctionalities1.ID = types.StringPointerValue(ownedFunctionalitiesItem.ID)
						if len(ownedFunctionalitiesItem.Labels) > 0 {
							ownedFunctionalities1.Labels = make(map[string]types.String)
							for key1, value1 := range ownedFunctionalitiesItem.Labels {
								ownedFunctionalities1.Labels[key1] = types.StringValue(value1)
							}
						}
						ownedFunctionalities1.Links = []tfTypes.LinksEntity{}
						for linksCount1, linksItem1 := range ownedFunctionalitiesItem.Links {
							var links3 tfTypes.LinksEntity
							links3.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
							links3.IconURL = types.StringPointerValue(linksItem1.IconURL)
							links3.ID = types.StringPointerValue(linksItem1.ID)
							links3.Name = types.StringPointerValue(linksItem1.Name)
							if linksCount1+1 > len(ownedFunctionalities1.Links) {
								ownedFunctionalities1.Links = append(ownedFunctionalities1.Links, links3)
							} else {
								ownedFunctionalities1.Links[linksCount1].HrefURL = links3.HrefURL
								ownedFunctionalities1.Links[linksCount1].IconURL = links3.IconURL
								ownedFunctionalities1.Links[linksCount1].ID = links3.ID
								ownedFunctionalities1.Links[linksCount1].Name = links3.Name
							}
						}
						ownedFunctionalities1.Name = types.StringPointerValue(ownedFunctionalitiesItem.Name)
						if ownedFunctionalitiesItem.Owner == nil {
							ownedFunctionalities1.Owner = nil
						} else {
							ownedFunctionalities1.Owner = &tfTypes.TeamEntity1{}
						}
						ownedFunctionalities1.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Slug)
						if ownedFunctionalitiesItem.UpdatedAt != nil {
							ownedFunctionalities1.UpdatedAt = types.StringValue(ownedFunctionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							ownedFunctionalities1.UpdatedAt = types.StringNull()
						}
						if ownedFunctionalitiesItem.UpdatedBy == nil {
							ownedFunctionalities1.UpdatedBy = nil
						} else {
							ownedFunctionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
							ownedFunctionalities1.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Email)
							ownedFunctionalities1.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.ID)
							ownedFunctionalities1.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Name)
							ownedFunctionalities1.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Source)
						}
						if ownedFunctionalitiesCount+1 > len(checklists1.Owner.OwnedFunctionalities) {
							checklists1.Owner.OwnedFunctionalities = append(checklists1.Owner.OwnedFunctionalities, ownedFunctionalities1)
						} else {
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ActiveIncidents = ownedFunctionalities1.ActiveIncidents
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].AlertOnAdd = ownedFunctionalities1.AlertOnAdd
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].AutoAddRespondingTeam = ownedFunctionalities1.AutoAddRespondingTeam
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].CreatedAt = ownedFunctionalities1.CreatedAt
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Description = ownedFunctionalities1.Description
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ExternalResources = ownedFunctionalities1.ExternalResources
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ID = ownedFunctionalities1.ID
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Labels = ownedFunctionalities1.Labels
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Links = ownedFunctionalities1.Links
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Name = ownedFunctionalities1.Name
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Owner = ownedFunctionalities1.Owner
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Slug = ownedFunctionalities1.Slug
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedAt = ownedFunctionalities1.UpdatedAt
							checklists1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedBy = ownedFunctionalities1.UpdatedBy
						}
					}
					checklists1.Owner.OwnedRunbooks = []tfTypes.SlimRunbookEntity{}
					for ownedRunbooksCount, ownedRunbooksItem := range checklistsItem.Owner.OwnedRunbooks {
						var ownedRunbooks1 tfTypes.SlimRunbookEntity
						if ownedRunbooksItem.AttachmentRule == nil {
							ownedRunbooks1.AttachmentRule = nil
						} else {
							ownedRunbooks1.AttachmentRule = &tfTypes.RulesRuleEntity{}
							if ownedRunbooksItem.AttachmentRule.Logic == nil {
								ownedRunbooks1.AttachmentRule.Logic = nil
							} else {
								ownedRunbooks1.AttachmentRule.Logic = &tfTypes.TeamEntity1{}
							}
							if ownedRunbooksItem.AttachmentRule.UserData == nil {
								ownedRunbooks1.AttachmentRule.UserData = nil
							} else {
								ownedRunbooks1.AttachmentRule.UserData = &tfTypes.FHTypesGenericEntity{}
								ownedRunbooks1.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Label)
								ownedRunbooks1.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Type)
								ownedRunbooks1.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Value)
							}
						}
						ownedRunbooks1.Categories = types.StringPointerValue(ownedRunbooksItem.Categories)
						if ownedRunbooksItem.CreatedAt != nil {
							ownedRunbooks1.CreatedAt = types.StringValue(ownedRunbooksItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							ownedRunbooks1.CreatedAt = types.StringNull()
						}
						ownedRunbooks1.Description = types.StringPointerValue(ownedRunbooksItem.Description)
						ownedRunbooks1.ID = types.StringPointerValue(ownedRunbooksItem.ID)
						ownedRunbooks1.Name = types.StringPointerValue(ownedRunbooksItem.Name)
						if ownedRunbooksItem.Owner == nil {
							ownedRunbooks1.Owner = nil
						} else {
							ownedRunbooks1.Owner = &tfTypes.TeamEntity1{}
						}
						ownedRunbooks1.Summary = types.StringPointerValue(ownedRunbooksItem.Summary)
						ownedRunbooks1.Type = types.StringPointerValue(ownedRunbooksItem.Type)
						if ownedRunbooksItem.UpdatedAt != nil {
							ownedRunbooks1.UpdatedAt = types.StringValue(ownedRunbooksItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							ownedRunbooks1.UpdatedAt = types.StringNull()
						}
						if ownedRunbooksCount+1 > len(checklists1.Owner.OwnedRunbooks) {
							checklists1.Owner.OwnedRunbooks = append(checklists1.Owner.OwnedRunbooks, ownedRunbooks1)
						} else {
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].AttachmentRule = ownedRunbooks1.AttachmentRule
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].Categories = ownedRunbooks1.Categories
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].CreatedAt = ownedRunbooks1.CreatedAt
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].Description = ownedRunbooks1.Description
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].ID = ownedRunbooks1.ID
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].Name = ownedRunbooks1.Name
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].Owner = ownedRunbooks1.Owner
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].Summary = ownedRunbooks1.Summary
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].Type = ownedRunbooks1.Type
							checklists1.Owner.OwnedRunbooks[ownedRunbooksCount].UpdatedAt = ownedRunbooks1.UpdatedAt
						}
					}
					checklists1.Owner.SignalsIcalURL = types.StringPointerValue(checklistsItem.Owner.SignalsIcalURL)
					if checklistsItem.Owner.SlackChannel == nil {
						checklists1.Owner.SlackChannel = nil
					} else {
						checklists1.Owner.SlackChannel = &tfTypes.IntegrationsSlackSlackChannelEntity{}
						checklists1.Owner.SlackChannel.ID = types.StringPointerValue(checklistsItem.Owner.SlackChannel.ID)
						checklists1.Owner.SlackChannel.Name = types.StringPointerValue(checklistsItem.Owner.SlackChannel.Name)
						checklists1.Owner.SlackChannel.SlackChannelID = types.StringPointerValue(checklistsItem.Owner.SlackChannel.SlackChannelID)
					}
					checklists1.Owner.Slug = types.StringPointerValue(checklistsItem.Owner.Slug)
					if checklistsItem.Owner.UpdatedAt != nil {
						checklists1.Owner.UpdatedAt = types.StringValue(checklistsItem.Owner.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						checklists1.Owner.UpdatedAt = types.StringNull()
					}
				}
				if checklistsItem.UpdatedAt != nil {
					checklists1.UpdatedAt = types.StringValue(checklistsItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					checklists1.UpdatedAt = types.StringNull()
				}
				if checklistsCount+1 > len(data1.Checklists) {
					data1.Checklists = append(data1.Checklists, checklists1)
				} else {
					data1.Checklists[checklistsCount].Checks = checklists1.Checks
					data1.Checklists[checklistsCount].CreatedAt = checklists1.CreatedAt
					data1.Checklists[checklistsCount].Description = checklists1.Description
					data1.Checklists[checklistsCount].ID = checklists1.ID
					data1.Checklists[checklistsCount].Name = checklists1.Name
					data1.Checklists[checklistsCount].Owner = checklists1.Owner
					data1.Checklists[checklistsCount].UpdatedAt = checklists1.UpdatedAt
				}
			}
			if dataItem.CompletedChecks != nil {
				data1.CompletedChecks = types.Int64Value(int64(*dataItem.CompletedChecks))
			} else {
				data1.CompletedChecks = types.Int64Null()
			}
			if dataItem.CreatedAt != nil {
				data1.CreatedAt = types.StringValue(dataItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				data1.CreatedAt = types.StringNull()
			}
			data1.Description = types.StringPointerValue(dataItem.Description)
			data1.ExternalResources = []tfTypes.ExternalResourceEntity{}
			for externalResourcesCount2, externalResourcesItem2 := range dataItem.ExternalResources {
				var externalResources5 tfTypes.ExternalResourceEntity
				externalResources5.ConnectionID = types.StringPointerValue(externalResourcesItem2.ConnectionID)
				externalResources5.ConnectionName = types.StringPointerValue(externalResourcesItem2.ConnectionName)
				externalResources5.ConnectionType = types.StringPointerValue(externalResourcesItem2.ConnectionType)
				if externalResourcesItem2.CreatedAt != nil {
					externalResources5.CreatedAt = types.StringValue(externalResourcesItem2.CreatedAt.Format(time.RFC3339Nano))
				} else {
					externalResources5.CreatedAt = types.StringNull()
				}
				externalResources5.Name = types.StringPointerValue(externalResourcesItem2.Name)
				externalResources5.RemoteID = types.StringPointerValue(externalResourcesItem2.RemoteID)
				externalResources5.RemoteURL = types.StringPointerValue(externalResourcesItem2.RemoteURL)
				if externalResourcesItem2.UpdatedAt != nil {
					externalResources5.UpdatedAt = types.StringValue(externalResourcesItem2.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					externalResources5.UpdatedAt = types.StringNull()
				}
				if externalResourcesCount2+1 > len(data1.ExternalResources) {
					data1.ExternalResources = append(data1.ExternalResources, externalResources5)
				} else {
					data1.ExternalResources[externalResourcesCount2].ConnectionID = externalResources5.ConnectionID
					data1.ExternalResources[externalResourcesCount2].ConnectionName = externalResources5.ConnectionName
					data1.ExternalResources[externalResourcesCount2].ConnectionType = externalResources5.ConnectionType
					data1.ExternalResources[externalResourcesCount2].CreatedAt = externalResources5.CreatedAt
					data1.ExternalResources[externalResourcesCount2].Name = externalResources5.Name
					data1.ExternalResources[externalResourcesCount2].RemoteID = externalResources5.RemoteID
					data1.ExternalResources[externalResourcesCount2].RemoteURL = externalResources5.RemoteURL
					data1.ExternalResources[externalResourcesCount2].UpdatedAt = externalResources5.UpdatedAt
				}
			}
			data1.Functionalities = []tfTypes.FunctionalityEntity{}
			for functionalitiesCount1, functionalitiesItem1 := range dataItem.Functionalities {
				var functionalities3 tfTypes.FunctionalityEntity
				functionalities3.ActiveIncidents = []types.String{}
				for _, v := range functionalitiesItem1.ActiveIncidents {
					functionalities3.ActiveIncidents = append(functionalities3.ActiveIncidents, types.StringValue(v))
				}
				functionalities3.AlertOnAdd = types.BoolPointerValue(functionalitiesItem1.AlertOnAdd)
				functionalities3.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem1.AutoAddRespondingTeam)
				if functionalitiesItem1.CreatedAt != nil {
					functionalities3.CreatedAt = types.StringValue(functionalitiesItem1.CreatedAt.Format(time.RFC3339Nano))
				} else {
					functionalities3.CreatedAt = types.StringNull()
				}
				functionalities3.Description = types.StringPointerValue(functionalitiesItem1.Description)
				functionalities3.ExternalResources = []tfTypes.ExternalResourceEntity{}
				for externalResourcesCount3, externalResourcesItem3 := range functionalitiesItem1.ExternalResources {
					var externalResources7 tfTypes.ExternalResourceEntity
					externalResources7.ConnectionID = types.StringPointerValue(externalResourcesItem3.ConnectionID)
					externalResources7.ConnectionName = types.StringPointerValue(externalResourcesItem3.ConnectionName)
					externalResources7.ConnectionType = types.StringPointerValue(externalResourcesItem3.ConnectionType)
					if externalResourcesItem3.CreatedAt != nil {
						externalResources7.CreatedAt = types.StringValue(externalResourcesItem3.CreatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources7.CreatedAt = types.StringNull()
					}
					externalResources7.Name = types.StringPointerValue(externalResourcesItem3.Name)
					externalResources7.RemoteID = types.StringPointerValue(externalResourcesItem3.RemoteID)
					externalResources7.RemoteURL = types.StringPointerValue(externalResourcesItem3.RemoteURL)
					if externalResourcesItem3.UpdatedAt != nil {
						externalResources7.UpdatedAt = types.StringValue(externalResourcesItem3.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources7.UpdatedAt = types.StringNull()
					}
					if externalResourcesCount3+1 > len(functionalities3.ExternalResources) {
						functionalities3.ExternalResources = append(functionalities3.ExternalResources, externalResources7)
					} else {
						functionalities3.ExternalResources[externalResourcesCount3].ConnectionID = externalResources7.ConnectionID
						functionalities3.ExternalResources[externalResourcesCount3].ConnectionName = externalResources7.ConnectionName
						functionalities3.ExternalResources[externalResourcesCount3].ConnectionType = externalResources7.ConnectionType
						functionalities3.ExternalResources[externalResourcesCount3].CreatedAt = externalResources7.CreatedAt
						functionalities3.ExternalResources[externalResourcesCount3].Name = externalResources7.Name
						functionalities3.ExternalResources[externalResourcesCount3].RemoteID = externalResources7.RemoteID
						functionalities3.ExternalResources[externalResourcesCount3].RemoteURL = externalResources7.RemoteURL
						functionalities3.ExternalResources[externalResourcesCount3].UpdatedAt = externalResources7.UpdatedAt
					}
				}
				functionalities3.ID = types.StringPointerValue(functionalitiesItem1.ID)
				if len(functionalitiesItem1.Labels) > 0 {
					functionalities3.Labels = make(map[string]types.String)
					for key2, value3 := range functionalitiesItem1.Labels {
						functionalities3.Labels[key2] = types.StringValue(value3)
					}
				}
				functionalities3.Links = []tfTypes.LinksEntity{}
				for linksCount2, linksItem2 := range functionalitiesItem1.Links {
					var links5 tfTypes.LinksEntity
					links5.HrefURL = types.StringPointerValue(linksItem2.HrefURL)
					links5.IconURL = types.StringPointerValue(linksItem2.IconURL)
					links5.ID = types.StringPointerValue(linksItem2.ID)
					links5.Name = types.StringPointerValue(linksItem2.Name)
					if linksCount2+1 > len(functionalities3.Links) {
						functionalities3.Links = append(functionalities3.Links, links5)
					} else {
						functionalities3.Links[linksCount2].HrefURL = links5.HrefURL
						functionalities3.Links[linksCount2].IconURL = links5.IconURL
						functionalities3.Links[linksCount2].ID = links5.ID
						functionalities3.Links[linksCount2].Name = links5.Name
					}
				}
				functionalities3.Name = types.StringPointerValue(functionalitiesItem1.Name)
				if functionalitiesItem1.Owner == nil {
					functionalities3.Owner = nil
				} else {
					functionalities3.Owner = &tfTypes.TeamEntity1{}
				}
				functionalities3.Slug = types.StringPointerValue(functionalitiesItem1.Slug)
				if functionalitiesItem1.UpdatedAt != nil {
					functionalities3.UpdatedAt = types.StringValue(functionalitiesItem1.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					functionalities3.UpdatedAt = types.StringNull()
				}
				if functionalitiesItem1.UpdatedBy == nil {
					functionalities3.UpdatedBy = nil
				} else {
					functionalities3.UpdatedBy = &tfTypes.AuthorEntity{}
					functionalities3.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Email)
					functionalities3.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem1.UpdatedBy.ID)
					functionalities3.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Name)
					functionalities3.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Source)
				}
				if functionalitiesCount1+1 > len(data1.Functionalities) {
					data1.Functionalities = append(data1.Functionalities, functionalities3)
				} else {
					data1.Functionalities[functionalitiesCount1].ActiveIncidents = functionalities3.ActiveIncidents
					data1.Functionalities[functionalitiesCount1].AlertOnAdd = functionalities3.AlertOnAdd
					data1.Functionalities[functionalitiesCount1].AutoAddRespondingTeam = functionalities3.AutoAddRespondingTeam
					data1.Functionalities[functionalitiesCount1].CreatedAt = functionalities3.CreatedAt
					data1.Functionalities[functionalitiesCount1].Description = functionalities3.Description
					data1.Functionalities[functionalitiesCount1].ExternalResources = functionalities3.ExternalResources
					data1.Functionalities[functionalitiesCount1].ID = functionalities3.ID
					data1.Functionalities[functionalitiesCount1].Labels = functionalities3.Labels
					data1.Functionalities[functionalitiesCount1].Links = functionalities3.Links
					data1.Functionalities[functionalitiesCount1].Name = functionalities3.Name
					data1.Functionalities[functionalitiesCount1].Owner = functionalities3.Owner
					data1.Functionalities[functionalitiesCount1].Slug = functionalities3.Slug
					data1.Functionalities[functionalitiesCount1].UpdatedAt = functionalities3.UpdatedAt
					data1.Functionalities[functionalitiesCount1].UpdatedBy = functionalities3.UpdatedBy
				}
			}
			data1.ID = types.StringPointerValue(dataItem.ID)
			if len(dataItem.Labels) > 0 {
				data1.Labels = make(map[string]types.String)
				for key3, value4 := range dataItem.Labels {
					data1.Labels[key3] = types.StringValue(value4)
				}
			}
			if dataItem.LastImport == nil {
				data1.LastImport = nil
			} else {
				data1.LastImport = &tfTypes.ImportsImportableResourceEntity{}
				data1.LastImport.ImportErrors = []tfTypes.ImportsImportErrorEntity{}
				for importErrorsCount, importErrorsItem := range dataItem.LastImport.ImportErrors {
					var importErrors1 tfTypes.ImportsImportErrorEntity
					if importErrorsItem.CreatedAt != nil {
						importErrors1.CreatedAt = types.StringValue(importErrorsItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						importErrors1.CreatedAt = types.StringNull()
					}
					if importErrorsItem.Data == nil {
						importErrors1.Data = nil
					} else {
						importErrors1.Data = &tfTypes.TeamEntity1{}
					}
					importErrors1.ID = types.StringPointerValue(importErrorsItem.ID)
					importErrors1.Message = types.StringPointerValue(importErrorsItem.Message)
					if importErrorsItem.Resource == nil {
						importErrors1.Resource = nil
					} else {
						importErrors1.Resource = &tfTypes.ImportsImportErrorEntityResourceEntity{}
						importErrors1.Resource.Name = types.StringPointerValue(importErrorsItem.Resource.Name)
						importErrors1.Resource.ResourceID = types.StringPointerValue(importErrorsItem.Resource.ResourceID)
						importErrors1.Resource.ResourceType = types.StringPointerValue(importErrorsItem.Resource.ResourceType)
					}
					if importErrorsCount+1 > len(data1.LastImport.ImportErrors) {
						data1.LastImport.ImportErrors = append(data1.LastImport.ImportErrors, importErrors1)
					} else {
						data1.LastImport.ImportErrors[importErrorsCount].CreatedAt = importErrors1.CreatedAt
						data1.LastImport.ImportErrors[importErrorsCount].Data = importErrors1.Data
						data1.LastImport.ImportErrors[importErrorsCount].ID = importErrors1.ID
						data1.LastImport.ImportErrors[importErrorsCount].Message = importErrors1.Message
						data1.LastImport.ImportErrors[importErrorsCount].Resource = importErrors1.Resource
					}
				}
				if dataItem.LastImport.ImportedAt != nil {
					data1.LastImport.ImportedAt = types.StringValue(dataItem.LastImport.ImportedAt.Format(time.RFC3339Nano))
				} else {
					data1.LastImport.ImportedAt = types.StringNull()
				}
				data1.LastImport.RemoteID = types.StringPointerValue(dataItem.LastImport.RemoteID)
				if dataItem.LastImport.State != nil {
					data1.LastImport.State = types.StringValue(string(*dataItem.LastImport.State))
				} else {
					data1.LastImport.State = types.StringNull()
				}
			}
			data1.Links = []tfTypes.LinksEntity{}
			for linksCount3, linksItem3 := range dataItem.Links {
				var links7 tfTypes.LinksEntity
				links7.HrefURL = types.StringPointerValue(linksItem3.HrefURL)
				links7.IconURL = types.StringPointerValue(linksItem3.IconURL)
				links7.ID = types.StringPointerValue(linksItem3.ID)
				links7.Name = types.StringPointerValue(linksItem3.Name)
				if linksCount3+1 > len(data1.Links) {
					data1.Links = append(data1.Links, links7)
				} else {
					data1.Links[linksCount3].HrefURL = links7.HrefURL
					data1.Links[linksCount3].IconURL = links7.IconURL
					data1.Links[linksCount3].ID = links7.ID
					data1.Links[linksCount3].Name = links7.Name
				}
			}
			data1.ManagedBy = types.StringPointerValue(dataItem.ManagedBy)
			if dataItem.ManagedBySettings == nil {
				data1.ManagedBySettings = nil
			} else {
				data1.ManagedBySettings = &tfTypes.TeamEntity1{}
			}
			data1.Name = types.StringPointerValue(dataItem.Name)
			if dataItem.Owner == nil {
				data1.Owner = nil
			} else {
				data1.Owner = &tfTypes.TeamEntity{}
				if dataItem.Owner.CreatedAt != nil {
					data1.Owner.CreatedAt = types.StringValue(dataItem.Owner.CreatedAt.Format(time.RFC3339Nano))
				} else {
					data1.Owner.CreatedAt = types.StringNull()
				}
				if dataItem.Owner.CreatedBy == nil {
					data1.Owner.CreatedBy = nil
				} else {
					data1.Owner.CreatedBy = &tfTypes.AuthorEntity{}
					data1.Owner.CreatedBy.Email = types.StringPointerValue(dataItem.Owner.CreatedBy.Email)
					data1.Owner.CreatedBy.ID = types.StringPointerValue(dataItem.Owner.CreatedBy.ID)
					data1.Owner.CreatedBy.Name = types.StringPointerValue(dataItem.Owner.CreatedBy.Name)
					data1.Owner.CreatedBy.Source = types.StringPointerValue(dataItem.Owner.CreatedBy.Source)
				}
				data1.Owner.Description = types.StringPointerValue(dataItem.Owner.Description)
				data1.Owner.Functionalities = []tfTypes.FunctionalityEntity{}
				for functionalitiesCount2, functionalitiesItem2 := range dataItem.Owner.Functionalities {
					var functionalities5 tfTypes.FunctionalityEntity
					functionalities5.ActiveIncidents = []types.String{}
					for _, v := range functionalitiesItem2.ActiveIncidents {
						functionalities5.ActiveIncidents = append(functionalities5.ActiveIncidents, types.StringValue(v))
					}
					functionalities5.AlertOnAdd = types.BoolPointerValue(functionalitiesItem2.AlertOnAdd)
					functionalities5.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem2.AutoAddRespondingTeam)
					if functionalitiesItem2.CreatedAt != nil {
						functionalities5.CreatedAt = types.StringValue(functionalitiesItem2.CreatedAt.Format(time.RFC3339Nano))
					} else {
						functionalities5.CreatedAt = types.StringNull()
					}
					functionalities5.Description = types.StringPointerValue(functionalitiesItem2.Description)
					functionalities5.ExternalResources = []tfTypes.ExternalResourceEntity{}
					for externalResourcesCount4, externalResourcesItem4 := range functionalitiesItem2.ExternalResources {
						var externalResources9 tfTypes.ExternalResourceEntity
						externalResources9.ConnectionID = types.StringPointerValue(externalResourcesItem4.ConnectionID)
						externalResources9.ConnectionName = types.StringPointerValue(externalResourcesItem4.ConnectionName)
						externalResources9.ConnectionType = types.StringPointerValue(externalResourcesItem4.ConnectionType)
						if externalResourcesItem4.CreatedAt != nil {
							externalResources9.CreatedAt = types.StringValue(externalResourcesItem4.CreatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources9.CreatedAt = types.StringNull()
						}
						externalResources9.Name = types.StringPointerValue(externalResourcesItem4.Name)
						externalResources9.RemoteID = types.StringPointerValue(externalResourcesItem4.RemoteID)
						externalResources9.RemoteURL = types.StringPointerValue(externalResourcesItem4.RemoteURL)
						if externalResourcesItem4.UpdatedAt != nil {
							externalResources9.UpdatedAt = types.StringValue(externalResourcesItem4.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources9.UpdatedAt = types.StringNull()
						}
						if externalResourcesCount4+1 > len(functionalities5.ExternalResources) {
							functionalities5.ExternalResources = append(functionalities5.ExternalResources, externalResources9)
						} else {
							functionalities5.ExternalResources[externalResourcesCount4].ConnectionID = externalResources9.ConnectionID
							functionalities5.ExternalResources[externalResourcesCount4].ConnectionName = externalResources9.ConnectionName
							functionalities5.ExternalResources[externalResourcesCount4].ConnectionType = externalResources9.ConnectionType
							functionalities5.ExternalResources[externalResourcesCount4].CreatedAt = externalResources9.CreatedAt
							functionalities5.ExternalResources[externalResourcesCount4].Name = externalResources9.Name
							functionalities5.ExternalResources[externalResourcesCount4].RemoteID = externalResources9.RemoteID
							functionalities5.ExternalResources[externalResourcesCount4].RemoteURL = externalResources9.RemoteURL
							functionalities5.ExternalResources[externalResourcesCount4].UpdatedAt = externalResources9.UpdatedAt
						}
					}
					functionalities5.ID = types.StringPointerValue(functionalitiesItem2.ID)
					if len(functionalitiesItem2.Labels) > 0 {
						functionalities5.Labels = make(map[string]types.String)
						for key4, value5 := range functionalitiesItem2.Labels {
							functionalities5.Labels[key4] = types.StringValue(value5)
						}
					}
					functionalities5.Links = []tfTypes.LinksEntity{}
					for linksCount4, linksItem4 := range functionalitiesItem2.Links {
						var links9 tfTypes.LinksEntity
						links9.HrefURL = types.StringPointerValue(linksItem4.HrefURL)
						links9.IconURL = types.StringPointerValue(linksItem4.IconURL)
						links9.ID = types.StringPointerValue(linksItem4.ID)
						links9.Name = types.StringPointerValue(linksItem4.Name)
						if linksCount4+1 > len(functionalities5.Links) {
							functionalities5.Links = append(functionalities5.Links, links9)
						} else {
							functionalities5.Links[linksCount4].HrefURL = links9.HrefURL
							functionalities5.Links[linksCount4].IconURL = links9.IconURL
							functionalities5.Links[linksCount4].ID = links9.ID
							functionalities5.Links[linksCount4].Name = links9.Name
						}
					}
					functionalities5.Name = types.StringPointerValue(functionalitiesItem2.Name)
					if functionalitiesItem2.Owner == nil {
						functionalities5.Owner = nil
					} else {
						functionalities5.Owner = &tfTypes.TeamEntity1{}
					}
					functionalities5.Slug = types.StringPointerValue(functionalitiesItem2.Slug)
					if functionalitiesItem2.UpdatedAt != nil {
						functionalities5.UpdatedAt = types.StringValue(functionalitiesItem2.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						functionalities5.UpdatedAt = types.StringNull()
					}
					if functionalitiesItem2.UpdatedBy == nil {
						functionalities5.UpdatedBy = nil
					} else {
						functionalities5.UpdatedBy = &tfTypes.AuthorEntity{}
						functionalities5.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem2.UpdatedBy.Email)
						functionalities5.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem2.UpdatedBy.ID)
						functionalities5.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem2.UpdatedBy.Name)
						functionalities5.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem2.UpdatedBy.Source)
					}
					if functionalitiesCount2+1 > len(data1.Owner.Functionalities) {
						data1.Owner.Functionalities = append(data1.Owner.Functionalities, functionalities5)
					} else {
						data1.Owner.Functionalities[functionalitiesCount2].ActiveIncidents = functionalities5.ActiveIncidents
						data1.Owner.Functionalities[functionalitiesCount2].AlertOnAdd = functionalities5.AlertOnAdd
						data1.Owner.Functionalities[functionalitiesCount2].AutoAddRespondingTeam = functionalities5.AutoAddRespondingTeam
						data1.Owner.Functionalities[functionalitiesCount2].CreatedAt = functionalities5.CreatedAt
						data1.Owner.Functionalities[functionalitiesCount2].Description = functionalities5.Description
						data1.Owner.Functionalities[functionalitiesCount2].ExternalResources = functionalities5.ExternalResources
						data1.Owner.Functionalities[functionalitiesCount2].ID = functionalities5.ID
						data1.Owner.Functionalities[functionalitiesCount2].Labels = functionalities5.Labels
						data1.Owner.Functionalities[functionalitiesCount2].Links = functionalities5.Links
						data1.Owner.Functionalities[functionalitiesCount2].Name = functionalities5.Name
						data1.Owner.Functionalities[functionalitiesCount2].Owner = functionalities5.Owner
						data1.Owner.Functionalities[functionalitiesCount2].Slug = functionalities5.Slug
						data1.Owner.Functionalities[functionalitiesCount2].UpdatedAt = functionalities5.UpdatedAt
						data1.Owner.Functionalities[functionalitiesCount2].UpdatedBy = functionalities5.UpdatedBy
					}
				}
				data1.Owner.ID = types.StringPointerValue(dataItem.Owner.ID)
				data1.Owner.Memberships = []tfTypes.MembershipEntity{}
				for membershipsCount1, membershipsItem1 := range dataItem.Owner.Memberships {
					var memberships3 tfTypes.MembershipEntity
					if membershipsItem1.DefaultIncidentRole == nil {
						memberships3.DefaultIncidentRole = nil
					} else {
						memberships3.DefaultIncidentRole = &tfTypes.IncidentRoleEntity{}
						if membershipsItem1.DefaultIncidentRole.CreatedAt != nil {
							memberships3.DefaultIncidentRole.CreatedAt = types.StringValue(membershipsItem1.DefaultIncidentRole.CreatedAt.Format(time.RFC3339Nano))
						} else {
							memberships3.DefaultIncidentRole.CreatedAt = types.StringNull()
						}
						memberships3.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem1.DefaultIncidentRole.Description)
						if membershipsItem1.DefaultIncidentRole.DiscardedAt != nil {
							memberships3.DefaultIncidentRole.DiscardedAt = types.StringValue(membershipsItem1.DefaultIncidentRole.DiscardedAt.Format(time.RFC3339Nano))
						} else {
							memberships3.DefaultIncidentRole.DiscardedAt = types.StringNull()
						}
						memberships3.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem1.DefaultIncidentRole.ID)
						memberships3.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem1.DefaultIncidentRole.Name)
						memberships3.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem1.DefaultIncidentRole.Summary)
						if membershipsItem1.DefaultIncidentRole.UpdatedAt != nil {
							memberships3.DefaultIncidentRole.UpdatedAt = types.StringValue(membershipsItem1.DefaultIncidentRole.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							memberships3.DefaultIncidentRole.UpdatedAt = types.StringNull()
						}
					}
					if membershipsItem1.Schedule == nil {
						memberships3.Schedule = nil
					} else {
						memberships3.Schedule = &tfTypes.ScheduleEntity{}
						memberships3.Schedule.Discarded = types.BoolPointerValue(membershipsItem1.Schedule.Discarded)
						memberships3.Schedule.ID = types.StringPointerValue(membershipsItem1.Schedule.ID)
						memberships3.Schedule.Integration = types.StringPointerValue(membershipsItem1.Schedule.Integration)
						memberships3.Schedule.Name = types.StringPointerValue(membershipsItem1.Schedule.Name)
					}
					if membershipsItem1.User == nil {
						memberships3.User = nil
					} else {
						memberships3.User = &tfTypes.UserEntity{}
						if membershipsItem1.User.CreatedAt != nil {
							memberships3.User.CreatedAt = types.StringValue(membershipsItem1.User.CreatedAt.Format(time.RFC3339Nano))
						} else {
							memberships3.User.CreatedAt = types.StringNull()
						}
						memberships3.User.Email = types.StringPointerValue(membershipsItem1.User.Email)
						memberships3.User.ID = types.StringPointerValue(membershipsItem1.User.ID)
						memberships3.User.Name = types.StringPointerValue(membershipsItem1.User.Name)
						memberships3.User.SignalsEnabledNotificationTypes = []types.String{}
						for _, v := range membershipsItem1.User.SignalsEnabledNotificationTypes {
							memberships3.User.SignalsEnabledNotificationTypes = append(memberships3.User.SignalsEnabledNotificationTypes, types.StringValue(v))
						}
						memberships3.User.SlackLinked = types.BoolPointerValue(membershipsItem1.User.SlackLinked)
						memberships3.User.SlackUserID = types.StringPointerValue(membershipsItem1.User.SlackUserID)
						if membershipsItem1.User.UpdatedAt != nil {
							memberships3.User.UpdatedAt = types.StringValue(membershipsItem1.User.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							memberships3.User.UpdatedAt = types.StringNull()
						}
					}
					if membershipsCount1+1 > len(data1.Owner.Memberships) {
						data1.Owner.Memberships = append(data1.Owner.Memberships, memberships3)
					} else {
						data1.Owner.Memberships[membershipsCount1].DefaultIncidentRole = memberships3.DefaultIncidentRole
						data1.Owner.Memberships[membershipsCount1].Schedule = memberships3.Schedule
						data1.Owner.Memberships[membershipsCount1].User = memberships3.User
					}
				}
				if dataItem.Owner.MsTeamsChannel == nil {
					data1.Owner.MsTeamsChannel = nil
				} else {
					data1.Owner.MsTeamsChannel = &tfTypes.IntegrationsMicrosoftTeamsV2ChannelEntity{}
					data1.Owner.MsTeamsChannel.ChannelID = types.StringPointerValue(dataItem.Owner.MsTeamsChannel.ChannelID)
					data1.Owner.MsTeamsChannel.ChannelName = types.StringPointerValue(dataItem.Owner.MsTeamsChannel.ChannelName)
					data1.Owner.MsTeamsChannel.ChannelURL = types.StringPointerValue(dataItem.Owner.MsTeamsChannel.ChannelURL)
					data1.Owner.MsTeamsChannel.ID = types.StringPointerValue(dataItem.Owner.MsTeamsChannel.ID)
					data1.Owner.MsTeamsChannel.MsTeamID = types.StringPointerValue(dataItem.Owner.MsTeamsChannel.MsTeamID)
					data1.Owner.MsTeamsChannel.Status = types.StringPointerValue(dataItem.Owner.MsTeamsChannel.Status)
					data1.Owner.MsTeamsChannel.TeamName = types.StringPointerValue(dataItem.Owner.MsTeamsChannel.TeamName)
				}
				data1.Owner.Name = types.StringPointerValue(dataItem.Owner.Name)
				data1.Owner.OwnedFunctionalities = []tfTypes.FunctionalityEntity{}
				for ownedFunctionalitiesCount1, ownedFunctionalitiesItem1 := range dataItem.Owner.OwnedFunctionalities {
					var ownedFunctionalities3 tfTypes.FunctionalityEntity
					ownedFunctionalities3.ActiveIncidents = []types.String{}
					for _, v := range ownedFunctionalitiesItem1.ActiveIncidents {
						ownedFunctionalities3.ActiveIncidents = append(ownedFunctionalities3.ActiveIncidents, types.StringValue(v))
					}
					ownedFunctionalities3.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem1.AlertOnAdd)
					ownedFunctionalities3.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem1.AutoAddRespondingTeam)
					if ownedFunctionalitiesItem1.CreatedAt != nil {
						ownedFunctionalities3.CreatedAt = types.StringValue(ownedFunctionalitiesItem1.CreatedAt.Format(time.RFC3339Nano))
					} else {
						ownedFunctionalities3.CreatedAt = types.StringNull()
					}
					ownedFunctionalities3.Description = types.StringPointerValue(ownedFunctionalitiesItem1.Description)
					ownedFunctionalities3.ExternalResources = []tfTypes.ExternalResourceEntity{}
					for externalResourcesCount5, externalResourcesItem5 := range ownedFunctionalitiesItem1.ExternalResources {
						var externalResources11 tfTypes.ExternalResourceEntity
						externalResources11.ConnectionID = types.StringPointerValue(externalResourcesItem5.ConnectionID)
						externalResources11.ConnectionName = types.StringPointerValue(externalResourcesItem5.ConnectionName)
						externalResources11.ConnectionType = types.StringPointerValue(externalResourcesItem5.ConnectionType)
						if externalResourcesItem5.CreatedAt != nil {
							externalResources11.CreatedAt = types.StringValue(externalResourcesItem5.CreatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources11.CreatedAt = types.StringNull()
						}
						externalResources11.Name = types.StringPointerValue(externalResourcesItem5.Name)
						externalResources11.RemoteID = types.StringPointerValue(externalResourcesItem5.RemoteID)
						externalResources11.RemoteURL = types.StringPointerValue(externalResourcesItem5.RemoteURL)
						if externalResourcesItem5.UpdatedAt != nil {
							externalResources11.UpdatedAt = types.StringValue(externalResourcesItem5.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources11.UpdatedAt = types.StringNull()
						}
						if externalResourcesCount5+1 > len(ownedFunctionalities3.ExternalResources) {
							ownedFunctionalities3.ExternalResources = append(ownedFunctionalities3.ExternalResources, externalResources11)
						} else {
							ownedFunctionalities3.ExternalResources[externalResourcesCount5].ConnectionID = externalResources11.ConnectionID
							ownedFunctionalities3.ExternalResources[externalResourcesCount5].ConnectionName = externalResources11.ConnectionName
							ownedFunctionalities3.ExternalResources[externalResourcesCount5].ConnectionType = externalResources11.ConnectionType
							ownedFunctionalities3.ExternalResources[externalResourcesCount5].CreatedAt = externalResources11.CreatedAt
							ownedFunctionalities3.ExternalResources[externalResourcesCount5].Name = externalResources11.Name
							ownedFunctionalities3.ExternalResources[externalResourcesCount5].RemoteID = externalResources11.RemoteID
							ownedFunctionalities3.ExternalResources[externalResourcesCount5].RemoteURL = externalResources11.RemoteURL
							ownedFunctionalities3.ExternalResources[externalResourcesCount5].UpdatedAt = externalResources11.UpdatedAt
						}
					}
					ownedFunctionalities3.ID = types.StringPointerValue(ownedFunctionalitiesItem1.ID)
					if len(ownedFunctionalitiesItem1.Labels) > 0 {
						ownedFunctionalities3.Labels = make(map[string]types.String)
						for key5, value6 := range ownedFunctionalitiesItem1.Labels {
							ownedFunctionalities3.Labels[key5] = types.StringValue(value6)
						}
					}
					ownedFunctionalities3.Links = []tfTypes.LinksEntity{}
					for linksCount5, linksItem5 := range ownedFunctionalitiesItem1.Links {
						var links11 tfTypes.LinksEntity
						links11.HrefURL = types.StringPointerValue(linksItem5.HrefURL)
						links11.IconURL = types.StringPointerValue(linksItem5.IconURL)
						links11.ID = types.StringPointerValue(linksItem5.ID)
						links11.Name = types.StringPointerValue(linksItem5.Name)
						if linksCount5+1 > len(ownedFunctionalities3.Links) {
							ownedFunctionalities3.Links = append(ownedFunctionalities3.Links, links11)
						} else {
							ownedFunctionalities3.Links[linksCount5].HrefURL = links11.HrefURL
							ownedFunctionalities3.Links[linksCount5].IconURL = links11.IconURL
							ownedFunctionalities3.Links[linksCount5].ID = links11.ID
							ownedFunctionalities3.Links[linksCount5].Name = links11.Name
						}
					}
					ownedFunctionalities3.Name = types.StringPointerValue(ownedFunctionalitiesItem1.Name)
					if ownedFunctionalitiesItem1.Owner == nil {
						ownedFunctionalities3.Owner = nil
					} else {
						ownedFunctionalities3.Owner = &tfTypes.TeamEntity1{}
					}
					ownedFunctionalities3.Slug = types.StringPointerValue(ownedFunctionalitiesItem1.Slug)
					if ownedFunctionalitiesItem1.UpdatedAt != nil {
						ownedFunctionalities3.UpdatedAt = types.StringValue(ownedFunctionalitiesItem1.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						ownedFunctionalities3.UpdatedAt = types.StringNull()
					}
					if ownedFunctionalitiesItem1.UpdatedBy == nil {
						ownedFunctionalities3.UpdatedBy = nil
					} else {
						ownedFunctionalities3.UpdatedBy = &tfTypes.AuthorEntity{}
						ownedFunctionalities3.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem1.UpdatedBy.Email)
						ownedFunctionalities3.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem1.UpdatedBy.ID)
						ownedFunctionalities3.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem1.UpdatedBy.Name)
						ownedFunctionalities3.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem1.UpdatedBy.Source)
					}
					if ownedFunctionalitiesCount1+1 > len(data1.Owner.OwnedFunctionalities) {
						data1.Owner.OwnedFunctionalities = append(data1.Owner.OwnedFunctionalities, ownedFunctionalities3)
					} else {
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].ActiveIncidents = ownedFunctionalities3.ActiveIncidents
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].AlertOnAdd = ownedFunctionalities3.AlertOnAdd
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].AutoAddRespondingTeam = ownedFunctionalities3.AutoAddRespondingTeam
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].CreatedAt = ownedFunctionalities3.CreatedAt
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].Description = ownedFunctionalities3.Description
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].ExternalResources = ownedFunctionalities3.ExternalResources
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].ID = ownedFunctionalities3.ID
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].Labels = ownedFunctionalities3.Labels
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].Links = ownedFunctionalities3.Links
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].Name = ownedFunctionalities3.Name
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].Owner = ownedFunctionalities3.Owner
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].Slug = ownedFunctionalities3.Slug
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].UpdatedAt = ownedFunctionalities3.UpdatedAt
						data1.Owner.OwnedFunctionalities[ownedFunctionalitiesCount1].UpdatedBy = ownedFunctionalities3.UpdatedBy
					}
				}
				data1.Owner.OwnedRunbooks = []tfTypes.SlimRunbookEntity{}
				for ownedRunbooksCount1, ownedRunbooksItem1 := range dataItem.Owner.OwnedRunbooks {
					var ownedRunbooks3 tfTypes.SlimRunbookEntity
					if ownedRunbooksItem1.AttachmentRule == nil {
						ownedRunbooks3.AttachmentRule = nil
					} else {
						ownedRunbooks3.AttachmentRule = &tfTypes.RulesRuleEntity{}
						if ownedRunbooksItem1.AttachmentRule.Logic == nil {
							ownedRunbooks3.AttachmentRule.Logic = nil
						} else {
							ownedRunbooks3.AttachmentRule.Logic = &tfTypes.TeamEntity1{}
						}
						if ownedRunbooksItem1.AttachmentRule.UserData == nil {
							ownedRunbooks3.AttachmentRule.UserData = nil
						} else {
							ownedRunbooks3.AttachmentRule.UserData = &tfTypes.FHTypesGenericEntity{}
							ownedRunbooks3.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem1.AttachmentRule.UserData.Label)
							ownedRunbooks3.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem1.AttachmentRule.UserData.Type)
							ownedRunbooks3.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem1.AttachmentRule.UserData.Value)
						}
					}
					ownedRunbooks3.Categories = types.StringPointerValue(ownedRunbooksItem1.Categories)
					if ownedRunbooksItem1.CreatedAt != nil {
						ownedRunbooks3.CreatedAt = types.StringValue(ownedRunbooksItem1.CreatedAt.Format(time.RFC3339Nano))
					} else {
						ownedRunbooks3.CreatedAt = types.StringNull()
					}
					ownedRunbooks3.Description = types.StringPointerValue(ownedRunbooksItem1.Description)
					ownedRunbooks3.ID = types.StringPointerValue(ownedRunbooksItem1.ID)
					ownedRunbooks3.Name = types.StringPointerValue(ownedRunbooksItem1.Name)
					if ownedRunbooksItem1.Owner == nil {
						ownedRunbooks3.Owner = nil
					} else {
						ownedRunbooks3.Owner = &tfTypes.TeamEntity1{}
					}
					ownedRunbooks3.Summary = types.StringPointerValue(ownedRunbooksItem1.Summary)
					ownedRunbooks3.Type = types.StringPointerValue(ownedRunbooksItem1.Type)
					if ownedRunbooksItem1.UpdatedAt != nil {
						ownedRunbooks3.UpdatedAt = types.StringValue(ownedRunbooksItem1.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						ownedRunbooks3.UpdatedAt = types.StringNull()
					}
					if ownedRunbooksCount1+1 > len(data1.Owner.OwnedRunbooks) {
						data1.Owner.OwnedRunbooks = append(data1.Owner.OwnedRunbooks, ownedRunbooks3)
					} else {
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].AttachmentRule = ownedRunbooks3.AttachmentRule
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].Categories = ownedRunbooks3.Categories
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].CreatedAt = ownedRunbooks3.CreatedAt
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].Description = ownedRunbooks3.Description
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].ID = ownedRunbooks3.ID
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].Name = ownedRunbooks3.Name
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].Owner = ownedRunbooks3.Owner
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].Summary = ownedRunbooks3.Summary
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].Type = ownedRunbooks3.Type
						data1.Owner.OwnedRunbooks[ownedRunbooksCount1].UpdatedAt = ownedRunbooks3.UpdatedAt
					}
				}
				data1.Owner.SignalsIcalURL = types.StringPointerValue(dataItem.Owner.SignalsIcalURL)
				if dataItem.Owner.SlackChannel == nil {
					data1.Owner.SlackChannel = nil
				} else {
					data1.Owner.SlackChannel = &tfTypes.IntegrationsSlackSlackChannelEntity{}
					data1.Owner.SlackChannel.ID = types.StringPointerValue(dataItem.Owner.SlackChannel.ID)
					data1.Owner.SlackChannel.Name = types.StringPointerValue(dataItem.Owner.SlackChannel.Name)
					data1.Owner.SlackChannel.SlackChannelID = types.StringPointerValue(dataItem.Owner.SlackChannel.SlackChannelID)
				}
				data1.Owner.Slug = types.StringPointerValue(dataItem.Owner.Slug)
				if dataItem.Owner.UpdatedAt != nil {
					data1.Owner.UpdatedAt = types.StringValue(dataItem.Owner.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					data1.Owner.UpdatedAt = types.StringNull()
				}
			}
			if dataItem.ServiceChecklistUpdatedAt != nil {
				data1.ServiceChecklistUpdatedAt = types.StringValue(dataItem.ServiceChecklistUpdatedAt.Format(time.RFC3339Nano))
			} else {
				data1.ServiceChecklistUpdatedAt = types.StringNull()
			}
			if dataItem.ServiceTier != nil {
				data1.ServiceTier = types.Int64Value(int64(*dataItem.ServiceTier))
			} else {
				data1.ServiceTier = types.Int64Null()
			}
			data1.Slug = types.StringPointerValue(dataItem.Slug)
			data1.Teams = []tfTypes.TeamEntity{}
			for teamsCount, teamsItem := range dataItem.Teams {
				var teams1 tfTypes.TeamEntity
				if teamsItem.CreatedAt != nil {
					teams1.CreatedAt = types.StringValue(teamsItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					teams1.CreatedAt = types.StringNull()
				}
				if teamsItem.CreatedBy == nil {
					teams1.CreatedBy = nil
				} else {
					teams1.CreatedBy = &tfTypes.AuthorEntity{}
					teams1.CreatedBy.Email = types.StringPointerValue(teamsItem.CreatedBy.Email)
					teams1.CreatedBy.ID = types.StringPointerValue(teamsItem.CreatedBy.ID)
					teams1.CreatedBy.Name = types.StringPointerValue(teamsItem.CreatedBy.Name)
					teams1.CreatedBy.Source = types.StringPointerValue(teamsItem.CreatedBy.Source)
				}
				teams1.Description = types.StringPointerValue(teamsItem.Description)
				teams1.Functionalities = []tfTypes.FunctionalityEntity{}
				for functionalitiesCount3, functionalitiesItem3 := range teamsItem.Functionalities {
					var functionalities7 tfTypes.FunctionalityEntity
					functionalities7.ActiveIncidents = []types.String{}
					for _, v := range functionalitiesItem3.ActiveIncidents {
						functionalities7.ActiveIncidents = append(functionalities7.ActiveIncidents, types.StringValue(v))
					}
					functionalities7.AlertOnAdd = types.BoolPointerValue(functionalitiesItem3.AlertOnAdd)
					functionalities7.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem3.AutoAddRespondingTeam)
					if functionalitiesItem3.CreatedAt != nil {
						functionalities7.CreatedAt = types.StringValue(functionalitiesItem3.CreatedAt.Format(time.RFC3339Nano))
					} else {
						functionalities7.CreatedAt = types.StringNull()
					}
					functionalities7.Description = types.StringPointerValue(functionalitiesItem3.Description)
					functionalities7.ExternalResources = []tfTypes.ExternalResourceEntity{}
					for externalResourcesCount6, externalResourcesItem6 := range functionalitiesItem3.ExternalResources {
						var externalResources13 tfTypes.ExternalResourceEntity
						externalResources13.ConnectionID = types.StringPointerValue(externalResourcesItem6.ConnectionID)
						externalResources13.ConnectionName = types.StringPointerValue(externalResourcesItem6.ConnectionName)
						externalResources13.ConnectionType = types.StringPointerValue(externalResourcesItem6.ConnectionType)
						if externalResourcesItem6.CreatedAt != nil {
							externalResources13.CreatedAt = types.StringValue(externalResourcesItem6.CreatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources13.CreatedAt = types.StringNull()
						}
						externalResources13.Name = types.StringPointerValue(externalResourcesItem6.Name)
						externalResources13.RemoteID = types.StringPointerValue(externalResourcesItem6.RemoteID)
						externalResources13.RemoteURL = types.StringPointerValue(externalResourcesItem6.RemoteURL)
						if externalResourcesItem6.UpdatedAt != nil {
							externalResources13.UpdatedAt = types.StringValue(externalResourcesItem6.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources13.UpdatedAt = types.StringNull()
						}
						if externalResourcesCount6+1 > len(functionalities7.ExternalResources) {
							functionalities7.ExternalResources = append(functionalities7.ExternalResources, externalResources13)
						} else {
							functionalities7.ExternalResources[externalResourcesCount6].ConnectionID = externalResources13.ConnectionID
							functionalities7.ExternalResources[externalResourcesCount6].ConnectionName = externalResources13.ConnectionName
							functionalities7.ExternalResources[externalResourcesCount6].ConnectionType = externalResources13.ConnectionType
							functionalities7.ExternalResources[externalResourcesCount6].CreatedAt = externalResources13.CreatedAt
							functionalities7.ExternalResources[externalResourcesCount6].Name = externalResources13.Name
							functionalities7.ExternalResources[externalResourcesCount6].RemoteID = externalResources13.RemoteID
							functionalities7.ExternalResources[externalResourcesCount6].RemoteURL = externalResources13.RemoteURL
							functionalities7.ExternalResources[externalResourcesCount6].UpdatedAt = externalResources13.UpdatedAt
						}
					}
					functionalities7.ID = types.StringPointerValue(functionalitiesItem3.ID)
					if len(functionalitiesItem3.Labels) > 0 {
						functionalities7.Labels = make(map[string]types.String)
						for key6, value8 := range functionalitiesItem3.Labels {
							functionalities7.Labels[key6] = types.StringValue(value8)
						}
					}
					functionalities7.Links = []tfTypes.LinksEntity{}
					for linksCount6, linksItem6 := range functionalitiesItem3.Links {
						var links13 tfTypes.LinksEntity
						links13.HrefURL = types.StringPointerValue(linksItem6.HrefURL)
						links13.IconURL = types.StringPointerValue(linksItem6.IconURL)
						links13.ID = types.StringPointerValue(linksItem6.ID)
						links13.Name = types.StringPointerValue(linksItem6.Name)
						if linksCount6+1 > len(functionalities7.Links) {
							functionalities7.Links = append(functionalities7.Links, links13)
						} else {
							functionalities7.Links[linksCount6].HrefURL = links13.HrefURL
							functionalities7.Links[linksCount6].IconURL = links13.IconURL
							functionalities7.Links[linksCount6].ID = links13.ID
							functionalities7.Links[linksCount6].Name = links13.Name
						}
					}
					functionalities7.Name = types.StringPointerValue(functionalitiesItem3.Name)
					if functionalitiesItem3.Owner == nil {
						functionalities7.Owner = nil
					} else {
						functionalities7.Owner = &tfTypes.TeamEntity1{}
					}
					functionalities7.Slug = types.StringPointerValue(functionalitiesItem3.Slug)
					if functionalitiesItem3.UpdatedAt != nil {
						functionalities7.UpdatedAt = types.StringValue(functionalitiesItem3.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						functionalities7.UpdatedAt = types.StringNull()
					}
					if functionalitiesItem3.UpdatedBy == nil {
						functionalities7.UpdatedBy = nil
					} else {
						functionalities7.UpdatedBy = &tfTypes.AuthorEntity{}
						functionalities7.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem3.UpdatedBy.Email)
						functionalities7.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem3.UpdatedBy.ID)
						functionalities7.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem3.UpdatedBy.Name)
						functionalities7.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem3.UpdatedBy.Source)
					}
					if functionalitiesCount3+1 > len(teams1.Functionalities) {
						teams1.Functionalities = append(teams1.Functionalities, functionalities7)
					} else {
						teams1.Functionalities[functionalitiesCount3].ActiveIncidents = functionalities7.ActiveIncidents
						teams1.Functionalities[functionalitiesCount3].AlertOnAdd = functionalities7.AlertOnAdd
						teams1.Functionalities[functionalitiesCount3].AutoAddRespondingTeam = functionalities7.AutoAddRespondingTeam
						teams1.Functionalities[functionalitiesCount3].CreatedAt = functionalities7.CreatedAt
						teams1.Functionalities[functionalitiesCount3].Description = functionalities7.Description
						teams1.Functionalities[functionalitiesCount3].ExternalResources = functionalities7.ExternalResources
						teams1.Functionalities[functionalitiesCount3].ID = functionalities7.ID
						teams1.Functionalities[functionalitiesCount3].Labels = functionalities7.Labels
						teams1.Functionalities[functionalitiesCount3].Links = functionalities7.Links
						teams1.Functionalities[functionalitiesCount3].Name = functionalities7.Name
						teams1.Functionalities[functionalitiesCount3].Owner = functionalities7.Owner
						teams1.Functionalities[functionalitiesCount3].Slug = functionalities7.Slug
						teams1.Functionalities[functionalitiesCount3].UpdatedAt = functionalities7.UpdatedAt
						teams1.Functionalities[functionalitiesCount3].UpdatedBy = functionalities7.UpdatedBy
					}
				}
				teams1.ID = types.StringPointerValue(teamsItem.ID)
				teams1.Memberships = []tfTypes.MembershipEntity{}
				for membershipsCount2, membershipsItem2 := range teamsItem.Memberships {
					var memberships5 tfTypes.MembershipEntity
					if membershipsItem2.DefaultIncidentRole == nil {
						memberships5.DefaultIncidentRole = nil
					} else {
						memberships5.DefaultIncidentRole = &tfTypes.IncidentRoleEntity{}
						if membershipsItem2.DefaultIncidentRole.CreatedAt != nil {
							memberships5.DefaultIncidentRole.CreatedAt = types.StringValue(membershipsItem2.DefaultIncidentRole.CreatedAt.Format(time.RFC3339Nano))
						} else {
							memberships5.DefaultIncidentRole.CreatedAt = types.StringNull()
						}
						memberships5.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem2.DefaultIncidentRole.Description)
						if membershipsItem2.DefaultIncidentRole.DiscardedAt != nil {
							memberships5.DefaultIncidentRole.DiscardedAt = types.StringValue(membershipsItem2.DefaultIncidentRole.DiscardedAt.Format(time.RFC3339Nano))
						} else {
							memberships5.DefaultIncidentRole.DiscardedAt = types.StringNull()
						}
						memberships5.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem2.DefaultIncidentRole.ID)
						memberships5.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem2.DefaultIncidentRole.Name)
						memberships5.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem2.DefaultIncidentRole.Summary)
						if membershipsItem2.DefaultIncidentRole.UpdatedAt != nil {
							memberships5.DefaultIncidentRole.UpdatedAt = types.StringValue(membershipsItem2.DefaultIncidentRole.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							memberships5.DefaultIncidentRole.UpdatedAt = types.StringNull()
						}
					}
					if membershipsItem2.Schedule == nil {
						memberships5.Schedule = nil
					} else {
						memberships5.Schedule = &tfTypes.ScheduleEntity{}
						memberships5.Schedule.Discarded = types.BoolPointerValue(membershipsItem2.Schedule.Discarded)
						memberships5.Schedule.ID = types.StringPointerValue(membershipsItem2.Schedule.ID)
						memberships5.Schedule.Integration = types.StringPointerValue(membershipsItem2.Schedule.Integration)
						memberships5.Schedule.Name = types.StringPointerValue(membershipsItem2.Schedule.Name)
					}
					if membershipsItem2.User == nil {
						memberships5.User = nil
					} else {
						memberships5.User = &tfTypes.UserEntity{}
						if membershipsItem2.User.CreatedAt != nil {
							memberships5.User.CreatedAt = types.StringValue(membershipsItem2.User.CreatedAt.Format(time.RFC3339Nano))
						} else {
							memberships5.User.CreatedAt = types.StringNull()
						}
						memberships5.User.Email = types.StringPointerValue(membershipsItem2.User.Email)
						memberships5.User.ID = types.StringPointerValue(membershipsItem2.User.ID)
						memberships5.User.Name = types.StringPointerValue(membershipsItem2.User.Name)
						memberships5.User.SignalsEnabledNotificationTypes = []types.String{}
						for _, v := range membershipsItem2.User.SignalsEnabledNotificationTypes {
							memberships5.User.SignalsEnabledNotificationTypes = append(memberships5.User.SignalsEnabledNotificationTypes, types.StringValue(v))
						}
						memberships5.User.SlackLinked = types.BoolPointerValue(membershipsItem2.User.SlackLinked)
						memberships5.User.SlackUserID = types.StringPointerValue(membershipsItem2.User.SlackUserID)
						if membershipsItem2.User.UpdatedAt != nil {
							memberships5.User.UpdatedAt = types.StringValue(membershipsItem2.User.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							memberships5.User.UpdatedAt = types.StringNull()
						}
					}
					if membershipsCount2+1 > len(teams1.Memberships) {
						teams1.Memberships = append(teams1.Memberships, memberships5)
					} else {
						teams1.Memberships[membershipsCount2].DefaultIncidentRole = memberships5.DefaultIncidentRole
						teams1.Memberships[membershipsCount2].Schedule = memberships5.Schedule
						teams1.Memberships[membershipsCount2].User = memberships5.User
					}
				}
				if teamsItem.MsTeamsChannel == nil {
					teams1.MsTeamsChannel = nil
				} else {
					teams1.MsTeamsChannel = &tfTypes.IntegrationsMicrosoftTeamsV2ChannelEntity{}
					teams1.MsTeamsChannel.ChannelID = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelID)
					teams1.MsTeamsChannel.ChannelName = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelName)
					teams1.MsTeamsChannel.ChannelURL = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelURL)
					teams1.MsTeamsChannel.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.ID)
					teams1.MsTeamsChannel.MsTeamID = types.StringPointerValue(teamsItem.MsTeamsChannel.MsTeamID)
					teams1.MsTeamsChannel.Status = types.StringPointerValue(teamsItem.MsTeamsChannel.Status)
					teams1.MsTeamsChannel.TeamName = types.StringPointerValue(teamsItem.MsTeamsChannel.TeamName)
				}
				teams1.Name = types.StringPointerValue(teamsItem.Name)
				teams1.OwnedFunctionalities = []tfTypes.FunctionalityEntity{}
				for ownedFunctionalitiesCount2, ownedFunctionalitiesItem2 := range teamsItem.OwnedFunctionalities {
					var ownedFunctionalities5 tfTypes.FunctionalityEntity
					ownedFunctionalities5.ActiveIncidents = []types.String{}
					for _, v := range ownedFunctionalitiesItem2.ActiveIncidents {
						ownedFunctionalities5.ActiveIncidents = append(ownedFunctionalities5.ActiveIncidents, types.StringValue(v))
					}
					ownedFunctionalities5.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem2.AlertOnAdd)
					ownedFunctionalities5.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem2.AutoAddRespondingTeam)
					if ownedFunctionalitiesItem2.CreatedAt != nil {
						ownedFunctionalities5.CreatedAt = types.StringValue(ownedFunctionalitiesItem2.CreatedAt.Format(time.RFC3339Nano))
					} else {
						ownedFunctionalities5.CreatedAt = types.StringNull()
					}
					ownedFunctionalities5.Description = types.StringPointerValue(ownedFunctionalitiesItem2.Description)
					ownedFunctionalities5.ExternalResources = []tfTypes.ExternalResourceEntity{}
					for externalResourcesCount7, externalResourcesItem7 := range ownedFunctionalitiesItem2.ExternalResources {
						var externalResources15 tfTypes.ExternalResourceEntity
						externalResources15.ConnectionID = types.StringPointerValue(externalResourcesItem7.ConnectionID)
						externalResources15.ConnectionName = types.StringPointerValue(externalResourcesItem7.ConnectionName)
						externalResources15.ConnectionType = types.StringPointerValue(externalResourcesItem7.ConnectionType)
						if externalResourcesItem7.CreatedAt != nil {
							externalResources15.CreatedAt = types.StringValue(externalResourcesItem7.CreatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources15.CreatedAt = types.StringNull()
						}
						externalResources15.Name = types.StringPointerValue(externalResourcesItem7.Name)
						externalResources15.RemoteID = types.StringPointerValue(externalResourcesItem7.RemoteID)
						externalResources15.RemoteURL = types.StringPointerValue(externalResourcesItem7.RemoteURL)
						if externalResourcesItem7.UpdatedAt != nil {
							externalResources15.UpdatedAt = types.StringValue(externalResourcesItem7.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources15.UpdatedAt = types.StringNull()
						}
						if externalResourcesCount7+1 > len(ownedFunctionalities5.ExternalResources) {
							ownedFunctionalities5.ExternalResources = append(ownedFunctionalities5.ExternalResources, externalResources15)
						} else {
							ownedFunctionalities5.ExternalResources[externalResourcesCount7].ConnectionID = externalResources15.ConnectionID
							ownedFunctionalities5.ExternalResources[externalResourcesCount7].ConnectionName = externalResources15.ConnectionName
							ownedFunctionalities5.ExternalResources[externalResourcesCount7].ConnectionType = externalResources15.ConnectionType
							ownedFunctionalities5.ExternalResources[externalResourcesCount7].CreatedAt = externalResources15.CreatedAt
							ownedFunctionalities5.ExternalResources[externalResourcesCount7].Name = externalResources15.Name
							ownedFunctionalities5.ExternalResources[externalResourcesCount7].RemoteID = externalResources15.RemoteID
							ownedFunctionalities5.ExternalResources[externalResourcesCount7].RemoteURL = externalResources15.RemoteURL
							ownedFunctionalities5.ExternalResources[externalResourcesCount7].UpdatedAt = externalResources15.UpdatedAt
						}
					}
					ownedFunctionalities5.ID = types.StringPointerValue(ownedFunctionalitiesItem2.ID)
					if len(ownedFunctionalitiesItem2.Labels) > 0 {
						ownedFunctionalities5.Labels = make(map[string]types.String)
						for key7, value9 := range ownedFunctionalitiesItem2.Labels {
							ownedFunctionalities5.Labels[key7] = types.StringValue(value9)
						}
					}
					ownedFunctionalities5.Links = []tfTypes.LinksEntity{}
					for linksCount7, linksItem7 := range ownedFunctionalitiesItem2.Links {
						var links15 tfTypes.LinksEntity
						links15.HrefURL = types.StringPointerValue(linksItem7.HrefURL)
						links15.IconURL = types.StringPointerValue(linksItem7.IconURL)
						links15.ID = types.StringPointerValue(linksItem7.ID)
						links15.Name = types.StringPointerValue(linksItem7.Name)
						if linksCount7+1 > len(ownedFunctionalities5.Links) {
							ownedFunctionalities5.Links = append(ownedFunctionalities5.Links, links15)
						} else {
							ownedFunctionalities5.Links[linksCount7].HrefURL = links15.HrefURL
							ownedFunctionalities5.Links[linksCount7].IconURL = links15.IconURL
							ownedFunctionalities5.Links[linksCount7].ID = links15.ID
							ownedFunctionalities5.Links[linksCount7].Name = links15.Name
						}
					}
					ownedFunctionalities5.Name = types.StringPointerValue(ownedFunctionalitiesItem2.Name)
					if ownedFunctionalitiesItem2.Owner == nil {
						ownedFunctionalities5.Owner = nil
					} else {
						ownedFunctionalities5.Owner = &tfTypes.TeamEntity1{}
					}
					ownedFunctionalities5.Slug = types.StringPointerValue(ownedFunctionalitiesItem2.Slug)
					if ownedFunctionalitiesItem2.UpdatedAt != nil {
						ownedFunctionalities5.UpdatedAt = types.StringValue(ownedFunctionalitiesItem2.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						ownedFunctionalities5.UpdatedAt = types.StringNull()
					}
					if ownedFunctionalitiesItem2.UpdatedBy == nil {
						ownedFunctionalities5.UpdatedBy = nil
					} else {
						ownedFunctionalities5.UpdatedBy = &tfTypes.AuthorEntity{}
						ownedFunctionalities5.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem2.UpdatedBy.Email)
						ownedFunctionalities5.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem2.UpdatedBy.ID)
						ownedFunctionalities5.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem2.UpdatedBy.Name)
						ownedFunctionalities5.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem2.UpdatedBy.Source)
					}
					if ownedFunctionalitiesCount2+1 > len(teams1.OwnedFunctionalities) {
						teams1.OwnedFunctionalities = append(teams1.OwnedFunctionalities, ownedFunctionalities5)
					} else {
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].ActiveIncidents = ownedFunctionalities5.ActiveIncidents
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].AlertOnAdd = ownedFunctionalities5.AlertOnAdd
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].AutoAddRespondingTeam = ownedFunctionalities5.AutoAddRespondingTeam
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].CreatedAt = ownedFunctionalities5.CreatedAt
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].Description = ownedFunctionalities5.Description
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].ExternalResources = ownedFunctionalities5.ExternalResources
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].ID = ownedFunctionalities5.ID
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].Labels = ownedFunctionalities5.Labels
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].Links = ownedFunctionalities5.Links
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].Name = ownedFunctionalities5.Name
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].Owner = ownedFunctionalities5.Owner
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].Slug = ownedFunctionalities5.Slug
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].UpdatedAt = ownedFunctionalities5.UpdatedAt
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount2].UpdatedBy = ownedFunctionalities5.UpdatedBy
					}
				}
				teams1.OwnedRunbooks = []tfTypes.SlimRunbookEntity{}
				for ownedRunbooksCount2, ownedRunbooksItem2 := range teamsItem.OwnedRunbooks {
					var ownedRunbooks5 tfTypes.SlimRunbookEntity
					if ownedRunbooksItem2.AttachmentRule == nil {
						ownedRunbooks5.AttachmentRule = nil
					} else {
						ownedRunbooks5.AttachmentRule = &tfTypes.RulesRuleEntity{}
						if ownedRunbooksItem2.AttachmentRule.Logic == nil {
							ownedRunbooks5.AttachmentRule.Logic = nil
						} else {
							ownedRunbooks5.AttachmentRule.Logic = &tfTypes.TeamEntity1{}
						}
						if ownedRunbooksItem2.AttachmentRule.UserData == nil {
							ownedRunbooks5.AttachmentRule.UserData = nil
						} else {
							ownedRunbooks5.AttachmentRule.UserData = &tfTypes.FHTypesGenericEntity{}
							ownedRunbooks5.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem2.AttachmentRule.UserData.Label)
							ownedRunbooks5.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem2.AttachmentRule.UserData.Type)
							ownedRunbooks5.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem2.AttachmentRule.UserData.Value)
						}
					}
					ownedRunbooks5.Categories = types.StringPointerValue(ownedRunbooksItem2.Categories)
					if ownedRunbooksItem2.CreatedAt != nil {
						ownedRunbooks5.CreatedAt = types.StringValue(ownedRunbooksItem2.CreatedAt.Format(time.RFC3339Nano))
					} else {
						ownedRunbooks5.CreatedAt = types.StringNull()
					}
					ownedRunbooks5.Description = types.StringPointerValue(ownedRunbooksItem2.Description)
					ownedRunbooks5.ID = types.StringPointerValue(ownedRunbooksItem2.ID)
					ownedRunbooks5.Name = types.StringPointerValue(ownedRunbooksItem2.Name)
					if ownedRunbooksItem2.Owner == nil {
						ownedRunbooks5.Owner = nil
					} else {
						ownedRunbooks5.Owner = &tfTypes.TeamEntity1{}
					}
					ownedRunbooks5.Summary = types.StringPointerValue(ownedRunbooksItem2.Summary)
					ownedRunbooks5.Type = types.StringPointerValue(ownedRunbooksItem2.Type)
					if ownedRunbooksItem2.UpdatedAt != nil {
						ownedRunbooks5.UpdatedAt = types.StringValue(ownedRunbooksItem2.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						ownedRunbooks5.UpdatedAt = types.StringNull()
					}
					if ownedRunbooksCount2+1 > len(teams1.OwnedRunbooks) {
						teams1.OwnedRunbooks = append(teams1.OwnedRunbooks, ownedRunbooks5)
					} else {
						teams1.OwnedRunbooks[ownedRunbooksCount2].AttachmentRule = ownedRunbooks5.AttachmentRule
						teams1.OwnedRunbooks[ownedRunbooksCount2].Categories = ownedRunbooks5.Categories
						teams1.OwnedRunbooks[ownedRunbooksCount2].CreatedAt = ownedRunbooks5.CreatedAt
						teams1.OwnedRunbooks[ownedRunbooksCount2].Description = ownedRunbooks5.Description
						teams1.OwnedRunbooks[ownedRunbooksCount2].ID = ownedRunbooks5.ID
						teams1.OwnedRunbooks[ownedRunbooksCount2].Name = ownedRunbooks5.Name
						teams1.OwnedRunbooks[ownedRunbooksCount2].Owner = ownedRunbooks5.Owner
						teams1.OwnedRunbooks[ownedRunbooksCount2].Summary = ownedRunbooks5.Summary
						teams1.OwnedRunbooks[ownedRunbooksCount2].Type = ownedRunbooks5.Type
						teams1.OwnedRunbooks[ownedRunbooksCount2].UpdatedAt = ownedRunbooks5.UpdatedAt
					}
				}
				teams1.SignalsIcalURL = types.StringPointerValue(teamsItem.SignalsIcalURL)
				if teamsItem.SlackChannel == nil {
					teams1.SlackChannel = nil
				} else {
					teams1.SlackChannel = &tfTypes.IntegrationsSlackSlackChannelEntity{}
					teams1.SlackChannel.ID = types.StringPointerValue(teamsItem.SlackChannel.ID)
					teams1.SlackChannel.Name = types.StringPointerValue(teamsItem.SlackChannel.Name)
					teams1.SlackChannel.SlackChannelID = types.StringPointerValue(teamsItem.SlackChannel.SlackChannelID)
				}
				teams1.Slug = types.StringPointerValue(teamsItem.Slug)
				if teamsItem.UpdatedAt != nil {
					teams1.UpdatedAt = types.StringValue(teamsItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					teams1.UpdatedAt = types.StringNull()
				}
				if teamsCount+1 > len(data1.Teams) {
					data1.Teams = append(data1.Teams, teams1)
				} else {
					data1.Teams[teamsCount].CreatedAt = teams1.CreatedAt
					data1.Teams[teamsCount].CreatedBy = teams1.CreatedBy
					data1.Teams[teamsCount].Description = teams1.Description
					data1.Teams[teamsCount].Functionalities = teams1.Functionalities
					data1.Teams[teamsCount].ID = teams1.ID
					data1.Teams[teamsCount].Memberships = teams1.Memberships
					data1.Teams[teamsCount].MsTeamsChannel = teams1.MsTeamsChannel
					data1.Teams[teamsCount].Name = teams1.Name
					data1.Teams[teamsCount].OwnedFunctionalities = teams1.OwnedFunctionalities
					data1.Teams[teamsCount].OwnedRunbooks = teams1.OwnedRunbooks
					data1.Teams[teamsCount].SignalsIcalURL = teams1.SignalsIcalURL
					data1.Teams[teamsCount].SlackChannel = teams1.SlackChannel
					data1.Teams[teamsCount].Slug = teams1.Slug
					data1.Teams[teamsCount].UpdatedAt = teams1.UpdatedAt
				}
			}
			if dataItem.UpdatedAt != nil {
				data1.UpdatedAt = types.StringValue(dataItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				data1.UpdatedAt = types.StringNull()
			}
			if dataItem.UpdatedBy == nil {
				data1.UpdatedBy = nil
			} else {
				data1.UpdatedBy = &tfTypes.AuthorEntity{}
				data1.UpdatedBy.Email = types.StringPointerValue(dataItem.UpdatedBy.Email)
				data1.UpdatedBy.ID = types.StringPointerValue(dataItem.UpdatedBy.ID)
				data1.UpdatedBy.Name = types.StringPointerValue(dataItem.UpdatedBy.Name)
				data1.UpdatedBy.Source = types.StringPointerValue(dataItem.UpdatedBy.Source)
			}
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data1)
			} else {
				r.Data[dataCount].ActiveIncidents = data1.ActiveIncidents
				r.Data[dataCount].AlertOnAdd = data1.AlertOnAdd
				r.Data[dataCount].AllowedParams = data1.AllowedParams
				r.Data[dataCount].AutoAddRespondingTeam = data1.AutoAddRespondingTeam
				r.Data[dataCount].Checklists = data1.Checklists
				r.Data[dataCount].CompletedChecks = data1.CompletedChecks
				r.Data[dataCount].CreatedAt = data1.CreatedAt
				r.Data[dataCount].Description = data1.Description
				r.Data[dataCount].ExternalResources = data1.ExternalResources
				r.Data[dataCount].Functionalities = data1.Functionalities
				r.Data[dataCount].ID = data1.ID
				r.Data[dataCount].Labels = data1.Labels
				r.Data[dataCount].LastImport = data1.LastImport
				r.Data[dataCount].Links = data1.Links
				r.Data[dataCount].ManagedBy = data1.ManagedBy
				r.Data[dataCount].ManagedBySettings = data1.ManagedBySettings
				r.Data[dataCount].Name = data1.Name
				r.Data[dataCount].Owner = data1.Owner
				r.Data[dataCount].ServiceChecklistUpdatedAt = data1.ServiceChecklistUpdatedAt
				r.Data[dataCount].ServiceTier = data1.ServiceTier
				r.Data[dataCount].Slug = data1.Slug
				r.Data[dataCount].Teams = data1.Teams
				r.Data[dataCount].UpdatedAt = data1.UpdatedAt
				r.Data[dataCount].UpdatedBy = data1.UpdatedBy
			}
		}
		if resp.Pagination == nil {
			r.Pagination = nil
		} else {
			r.Pagination = &tfTypes.PaginationEntity{}
			if resp.Pagination.Count != nil {
				r.Pagination.Count = types.Int64Value(int64(*resp.Pagination.Count))
			} else {
				r.Pagination.Count = types.Int64Null()
			}
			if resp.Pagination.Items != nil {
				r.Pagination.Items = types.Int64Value(int64(*resp.Pagination.Items))
			} else {
				r.Pagination.Items = types.Int64Null()
			}
			if resp.Pagination.Last != nil {
				r.Pagination.Last = types.Int64Value(int64(*resp.Pagination.Last))
			} else {
				r.Pagination.Last = types.Int64Null()
			}
			if resp.Pagination.Next != nil {
				r.Pagination.Next = types.Int64Value(int64(*resp.Pagination.Next))
			} else {
				r.Pagination.Next = types.Int64Null()
			}
			if resp.Pagination.Page != nil {
				r.Pagination.Page = types.Int64Value(int64(*resp.Pagination.Page))
			} else {
				r.Pagination.Page = types.Int64Null()
			}
			if resp.Pagination.Pages != nil {
				r.Pagination.Pages = types.Int64Value(int64(*resp.Pagination.Pages))
			} else {
				r.Pagination.Pages = types.Int64Null()
			}
			if resp.Pagination.Prev != nil {
				r.Pagination.Prev = types.Int64Value(int64(*resp.Pagination.Prev))
			} else {
				r.Pagination.Prev = types.Int64Null()
			}
		}
	}
}
