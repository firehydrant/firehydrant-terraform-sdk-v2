// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/operations"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/validators"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &ServiceDependencyResource{}
var _ resource.ResourceWithImportState = &ServiceDependencyResource{}

func NewServiceDependencyResource() resource.Resource {
	return &ServiceDependencyResource{}
}

// ServiceDependencyResource defines the resource implementation.
type ServiceDependencyResource struct {
	client *sdk.FirehydrantTerraformSDK
}

// ServiceDependencyResourceModel describes the resource data model.
type ServiceDependencyResourceModel struct {
	ConnectedService   *tfTypes.ServiceEntity `tfsdk:"connected_service"`
	ConnectedServiceID types.String           `tfsdk:"connected_service_id"`
	CreatedAt          types.String           `tfsdk:"created_at"`
	ID                 types.String           `tfsdk:"id"`
	Notes              types.String           `tfsdk:"notes"`
	Service            *tfTypes.ServiceEntity `tfsdk:"service"`
	ServiceID          types.String           `tfsdk:"service_id"`
	UpdatedAt          types.String           `tfsdk:"updated_at"`
}

func (r *ServiceDependencyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service_dependency"
}

func (r *ServiceDependencyResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "ServiceDependency Resource",
		Attributes: map[string]schema.Attribute{
			"connected_service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active_incidents": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `List of active incident guids`,
					},
					"alert_on_add": schema.BoolAttribute{
						Computed: true,
					},
					"allowed_params": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"auto_add_responding_team": schema.BoolAttribute{
						Computed: true,
					},
					"checklists": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"checks": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"status": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"created_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"functionalities": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"active_incidents": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
														Description: `List of active incident guids`,
													},
													"alert_on_add": schema.BoolAttribute{
														Computed: true,
													},
													"auto_add_responding_team": schema.BoolAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"external_resources": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"connection_id": schema.StringAttribute{
																	Computed: true,
																},
																"connection_name": schema.StringAttribute{
																	Computed: true,
																},
																"connection_type": schema.StringAttribute{
																	Computed: true,
																},
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"remote_id": schema.StringAttribute{
																	Computed: true,
																},
																"remote_url": schema.StringAttribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
														},
														Description: `Information about known linkages to representations of services outside of FireHydrant.`,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"labels": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														Description: `An object of label key and values`,
													},
													"links": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"href_url": schema.StringAttribute{
																	Computed: true,
																},
																"icon_url": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														Description: `List of links attached to this functionality.`,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"owner": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `TeamEntity model`,
													},
													"slug": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"updated_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"memberships": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"default_incident_role": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"description": schema.StringAttribute{
																Computed: true,
															},
															"discarded_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"summary": schema.StringAttribute{
																Computed: true,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
														Description: `IncidentRoleEntity model`,
													},
													"schedule": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"discarded": schema.BoolAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"integration": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"user": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"signals_enabled_notification_types": schema.ListAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
															"slack_linked": schema.BoolAttribute{
																Computed: true,
															},
															"slack_user_id": schema.StringAttribute{
																Computed: true,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
													},
												},
											},
										},
										"ms_teams_channel": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"channel_id": schema.StringAttribute{
													Computed: true,
												},
												"channel_name": schema.StringAttribute{
													Computed: true,
												},
												"channel_url": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"incident": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"active": schema.BoolAttribute{
															Computed: true,
														},
														"ai_incident_summary": schema.StringAttribute{
															Computed: true,
														},
														"channel_id": schema.StringAttribute{
															Computed: true,
														},
														"channel_name": schema.StringAttribute{
															Computed: true,
														},
														"channel_reference": schema.StringAttribute{
															Computed: true,
														},
														"channel_status": schema.StringAttribute{
															Computed:    true,
															Description: `inoperative: 0, operational: 1, archived: 2`,
														},
														"conference_bridges": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"context_object": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"context_description": schema.StringAttribute{
																	Computed: true,
																},
																"context_tag": schema.StringAttribute{
																	Computed: true,
																},
																"object_id": schema.StringAttribute{
																	Computed: true,
																},
																"object_type": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"conversations": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"channel": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"comments_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"field": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_class": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_id": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"created_at": schema.StringAttribute{
															Computed:    true,
															Description: `The time the incident was opened`,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"created_by": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"source": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"current_milestone": schema.StringAttribute{
															Computed:    true,
															Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
														},
														"custom_fields": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"display_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"field_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"slug": schema.StringAttribute{
																		Computed: true,
																	},
																	"value": schema.StringAttribute{
																		Computed: true,
																	},
																	"value_array": schema.StringAttribute{
																		Computed: true,
																	},
																	"value_string": schema.StringAttribute{
																		Computed: true,
																	},
																	"value_type": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"customer_impact_summary": schema.StringAttribute{
															Computed: true,
														},
														"customers_impacted": schema.Int64Attribute{
															Computed: true,
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"discarded_at": schema.StringAttribute{
															Computed:    true,
															Description: `The time the incident was archived`,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"environments": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"field_requirements": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"field_id": schema.StringAttribute{
																		Computed:    true,
																		Description: `A unique identifier for the field.`,
																	},
																	"required_at_milestone_id": schema.StringAttribute{
																		Computed:    true,
																		Description: `The milestone at which this field is required. If null, this field is always required.`,
																	},
																},
															},
														},
														"functionalities": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"id": schema.StringAttribute{
															Computed:    true,
															Description: `UUID of the Incident`,
														},
														"impacts": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"condition": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"position": schema.Int64Attribute{
																				Computed:    true,
																				Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
																			},
																		},
																		Description: `SeverityMatrix_ConditionEntity model`,
																	},
																	"conversations": schema.ListNestedAttribute{
																		Computed: true,
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{
																				"channel": schema.SingleNestedAttribute{
																					Computed: true,
																					Attributes: map[string]schema.Attribute{
																						"name": schema.StringAttribute{
																							Computed: true,
																						},
																					},
																				},
																				"comments_url": schema.StringAttribute{
																					Computed: true,
																				},
																				"field": schema.StringAttribute{
																					Computed: true,
																				},
																				"id": schema.StringAttribute{
																					Computed: true,
																				},
																				"resource_class": schema.StringAttribute{
																					Computed: true,
																				},
																				"resource_id": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"impact": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"type": schema.StringAttribute{
																		Computed:    true,
																		Description: `must be one of ["environment", "functionality", "service"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"environment",
																				"functionality",
																				"service",
																			),
																		},
																	},
																},
															},
														},
														"incident_channels": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"icon_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																	"source_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"source_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"status": schema.StringAttribute{
																		Computed: true,
																	},
																	"url": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"incident_tickets": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"assignees": schema.ListNestedAttribute{
																		Computed: true,
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{
																				"email": schema.StringAttribute{
																					Computed: true,
																				},
																				"id": schema.StringAttribute{
																					Computed: true,
																				},
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																				"source": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																	},
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"created_by": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"email": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"source": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"due_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"incident_current_milestone": schema.StringAttribute{
																		Computed:    true,
																		Description: `Milestone of incident that this ticket is related to`,
																	},
																	"incident_id": schema.StringAttribute{
																		Computed:    true,
																		Description: `ID of incident that this ticket is related to`,
																	},
																	"incident_name": schema.StringAttribute{
																		Computed:    true,
																		Description: `Name of incident that this ticket is related to`,
																	},
																	"link": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"deletable": schema.BoolAttribute{
																				Computed:    true,
																				Description: `Link can be deleted`,
																			},
																			"display_text": schema.StringAttribute{
																				Computed: true,
																			},
																			"editable": schema.BoolAttribute{
																				Computed:    true,
																				Description: `Link can be edited`,
																			},
																			"href_url": schema.StringAttribute{
																				Computed: true,
																			},
																			"icon_url": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"type": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																		Description: `Attachments_LinkEntity model`,
																	},
																	"priority": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"position": schema.Int64Attribute{
																				Computed: true,
																			},
																			"updated_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																		},
																		Description: `Ticketing_PriorityEntity model`,
																	},
																	"state": schema.StringAttribute{
																		Computed:    true,
																		Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"open",
																				"in_progress",
																				"cancelled",
																				"done",
																			),
																		},
																	},
																	"summary": schema.StringAttribute{
																		Computed: true,
																	},
																	"tag_list": schema.ListAttribute{
																		Computed:    true,
																		ElementType: types.StringType,
																	},
																	"task_id": schema.StringAttribute{
																		Computed:    true,
																		Description: `ID of task that this ticket is related to`,
																	},
																	"type": schema.StringAttribute{
																		Computed:    true,
																		Description: `must be one of ["incident", "task", "follow_up"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"incident",
																				"task",
																				"follow_up",
																			),
																		},
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
															},
														},
														"incident_url": schema.StringAttribute{
															Computed: true,
														},
														"labels": schema.MapAttribute{
															Computed:    true,
															ElementType: types.StringType,
															Description: `A key/value of labels`,
														},
														"last_note": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"body": schema.StringAttribute{
																	Computed: true,
																},
																"conversations": schema.ListNestedAttribute{
																	Computed: true,
																	NestedObject: schema.NestedAttributeObject{
																		Attributes: map[string]schema.Attribute{
																			"channel": schema.SingleNestedAttribute{
																				Computed: true,
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Computed: true,
																					},
																				},
																			},
																			"comments_url": schema.StringAttribute{
																				Computed: true,
																			},
																			"field": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"resource_class": schema.StringAttribute{
																				Computed: true,
																			},
																			"resource_id": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"status_pages": schema.ListNestedAttribute{
																	Computed: true,
																	NestedObject: schema.NestedAttributeObject{
																		Attributes: map[string]schema.Attribute{
																			"display_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"external_id": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration": schema.SingleNestedAttribute{
																				Computed: true,
																				Attributes: map[string]schema.Attribute{
																					"created_at": schema.StringAttribute{
																						Computed: true,
																						Validators: []validator.String{
																							validators.IsRFC3339(),
																						},
																					},
																					"display_name": schema.StringAttribute{
																						Computed: true,
																					},
																					"id": schema.StringAttribute{
																						Computed: true,
																					},
																					"integration_name": schema.StringAttribute{
																						Computed: true,
																					},
																					"integration_slug": schema.StringAttribute{
																						Computed: true,
																					},
																				},
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"url": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
															},
															Description: `Event_NoteEntity model`,
														},
														"last_update": schema.StringAttribute{
															Computed: true,
														},
														"lifecycle_measurements": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"calculated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"ends_at_milestone": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"slug": schema.StringAttribute{
																		Computed: true,
																	},
																	"starts_at_milestone": schema.StringAttribute{
																		Computed: true,
																	},
																	"value": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"lifecycle_phases": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"milestones": schema.ListNestedAttribute{
																		Computed: true,
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{
																				"description": schema.StringAttribute{
																					Computed: true,
																				},
																				"duration": schema.StringAttribute{
																					Computed: true,
																				},
																				"id": schema.StringAttribute{
																					Computed: true,
																				},
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																				"occurred_at": schema.StringAttribute{
																					Computed: true,
																					Validators: []validator.String{
																						validators.IsRFC3339(),
																					},
																				},
																				"position": schema.Int64Attribute{
																					Computed: true,
																				},
																				"slug": schema.StringAttribute{
																					Computed: true,
																				},
																				"updated_at": schema.StringAttribute{
																					Computed: true,
																					Validators: []validator.String{
																						validators.IsRFC3339(),
																					},
																				},
																				"updated_by": schema.SingleNestedAttribute{
																					Computed: true,
																					Attributes: map[string]schema.Attribute{
																						"email": schema.StringAttribute{
																							Computed: true,
																						},
																						"id": schema.StringAttribute{
																							Computed: true,
																						},
																						"name": schema.StringAttribute{
																							Computed: true,
																						},
																						"source": schema.StringAttribute{
																							Computed: true,
																						},
																					},
																				},
																			},
																		},
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"position": schema.Int64Attribute{
																		Computed: true,
																	},
																	"type": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"milestones": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"duration": schema.StringAttribute{
																		Computed:    true,
																		Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"occurred_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"type": schema.StringAttribute{
																		Computed:    true,
																		Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
															},
															Description: `DEPRECATED: Please use lifecycle phases instead`,
														},
														"monetary_impact": schema.Int64Attribute{
															Computed: true,
														},
														"monetary_impact_cents": schema.Int64Attribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed:    true,
															Description: `Name of the incident`,
														},
														"number": schema.Int64Attribute{
															Computed:    true,
															Description: `Incident number`,
														},
														"organization": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"organization_id": schema.StringAttribute{
															Computed: true,
														},
														"priority": schema.StringAttribute{
															Computed: true,
														},
														"private_id": schema.StringAttribute{
															Computed: true,
														},
														"private_status_page_url": schema.StringAttribute{
															Computed: true,
														},
														"report_id": schema.StringAttribute{
															Computed: true,
														},
														"role_assignments": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"incident_role": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"description": schema.StringAttribute{
																				Computed: true,
																			},
																			"discarded_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"summary": schema.StringAttribute{
																				Computed: true,
																			},
																			"updated_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																		},
																		Description: `IncidentRoleEntity model`,
																	},
																	"status": schema.StringAttribute{
																		Computed:    true,
																		Description: `must be one of ["active", "inactive"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"active",
																				"inactive",
																			),
																		},
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"user": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"email": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"signals_enabled_notification_types": schema.ListAttribute{
																				Computed:    true,
																				ElementType: types.StringType,
																			},
																			"slack_linked": schema.BoolAttribute{
																				Computed: true,
																			},
																			"slack_user_id": schema.StringAttribute{
																				Computed: true,
																			},
																			"updated_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																		},
																	},
																},
															},
														},
														"services": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"severity": schema.StringAttribute{
															Computed: true,
														},
														"severity_color": schema.StringAttribute{
															Computed: true,
														},
														"severity_condition": schema.StringAttribute{
															Computed: true,
														},
														"severity_condition_object": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed:    true,
																	Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
																},
															},
															Description: `SeverityMatrix_ConditionEntity model`,
														},
														"severity_impact": schema.StringAttribute{
															Computed: true,
														},
														"severity_impact_object": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"affects_id": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed: true,
																},
																"type": schema.StringAttribute{
																	Computed: true,
																},
															},
															Description: `SeverityMatrix_ImpactEntity model`,
														},
														"started_at": schema.StringAttribute{
															Computed:    true,
															Description: `The time the incident started`,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"status_pages": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"display_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"external_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"integration": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"display_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration_slug": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"url": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"summary": schema.StringAttribute{
															Computed: true,
														},
														"tag_list": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
														},
														"team_assignments": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"status": schema.StringAttribute{
																		Computed: true,
																	},
																	"team": schema.SingleNestedAttribute{
																		Computed:    true,
																		Description: `TeamEntity model`,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
															},
														},
														"ticket": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"assignees": schema.ListNestedAttribute{
																	Computed: true,
																	NestedObject: schema.NestedAttributeObject{
																		Attributes: map[string]schema.Attribute{
																			"email": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"source": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"created_by": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"email": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																		"source": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
																"description": schema.StringAttribute{
																	Computed: true,
																},
																"due_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"incident_current_milestone": schema.StringAttribute{
																	Computed:    true,
																	Description: `Milestone of incident that this ticket is related to`,
																},
																"incident_id": schema.StringAttribute{
																	Computed:    true,
																	Description: `ID of incident that this ticket is related to`,
																},
																"incident_name": schema.StringAttribute{
																	Computed:    true,
																	Description: `Name of incident that this ticket is related to`,
																},
																"link": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"deletable": schema.BoolAttribute{
																			Computed:    true,
																			Description: `Link can be deleted`,
																		},
																		"display_text": schema.StringAttribute{
																			Computed: true,
																		},
																		"editable": schema.BoolAttribute{
																			Computed:    true,
																			Description: `Link can be edited`,
																		},
																		"href_url": schema.StringAttribute{
																			Computed: true,
																		},
																		"icon_url": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"type": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																	Description: `Attachments_LinkEntity model`,
																},
																"priority": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"created_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																		"position": schema.Int64Attribute{
																			Computed: true,
																		},
																		"updated_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																	},
																	Description: `Ticketing_PriorityEntity model`,
																},
																"state": schema.StringAttribute{
																	Computed:    true,
																	Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"open",
																			"in_progress",
																			"cancelled",
																			"done",
																		),
																	},
																},
																"summary": schema.StringAttribute{
																	Computed: true,
																},
																"tag_list": schema.ListAttribute{
																	Computed:    true,
																	ElementType: types.StringType,
																},
																"task_id": schema.StringAttribute{
																	Computed:    true,
																	Description: `ID of task that this ticket is related to`,
																},
																"type": schema.StringAttribute{
																	Computed:    true,
																	Description: `must be one of ["incident", "task", "follow_up"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"incident",
																			"task",
																			"follow_up",
																		),
																	},
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
															Description: `Ticketing_TicketEntity model`,
														},
													},
													Description: `IncidentEntity model`,
												},
												"ms_team_id": schema.StringAttribute{
													Computed: true,
												},
												"status": schema.StringAttribute{
													Computed: true,
												},
												"team_name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"owned_functionalities": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"active_incidents": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
														Description: `List of active incident guids`,
													},
													"alert_on_add": schema.BoolAttribute{
														Computed: true,
													},
													"auto_add_responding_team": schema.BoolAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"external_resources": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"connection_id": schema.StringAttribute{
																	Computed: true,
																},
																"connection_name": schema.StringAttribute{
																	Computed: true,
																},
																"connection_type": schema.StringAttribute{
																	Computed: true,
																},
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"remote_id": schema.StringAttribute{
																	Computed: true,
																},
																"remote_url": schema.StringAttribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
														},
														Description: `Information about known linkages to representations of services outside of FireHydrant.`,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"labels": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														Description: `An object of label key and values`,
													},
													"links": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"href_url": schema.StringAttribute{
																	Computed: true,
																},
																"icon_url": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														Description: `List of links attached to this functionality.`,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"owner": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `TeamEntity model`,
													},
													"slug": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"updated_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
										},
										"owned_runbooks": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"attachment_rule": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"logic": schema.SingleNestedAttribute{
																Computed:    true,
																Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
															},
															"user_data": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"label": schema.StringAttribute{
																		Computed: true,
																	},
																	"type": schema.StringAttribute{
																		Computed: true,
																	},
																	"value": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
													},
													"categories": schema.StringAttribute{
														Computed:    true,
														Description: `categories the runbook applies to`,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"owner": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `TeamEntity model`,
													},
													"summary": schema.StringAttribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
										},
										"signals_ical_url": schema.StringAttribute{
											Computed: true,
										},
										"slack_channel": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"slack_channel_id": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
									},
									Description: `TeamEntity model`,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						Description: `List of checklists associated with a service`,
					},
					"completed_checks": schema.Int64Attribute{
						Computed: true,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"external_resources": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"connection_id": schema.StringAttribute{
									Computed: true,
								},
								"connection_name": schema.StringAttribute{
									Computed: true,
								},
								"connection_type": schema.StringAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"remote_id": schema.StringAttribute{
									Computed: true,
								},
								"remote_url": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						Description: `Information about known linkages to representations of services outside of FireHydrant.`,
					},
					"functionalities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"active_incidents": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `List of active incident guids`,
								},
								"alert_on_add": schema.BoolAttribute{
									Computed: true,
								},
								"auto_add_responding_team": schema.BoolAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"external_resources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"connection_id": schema.StringAttribute{
												Computed: true,
											},
											"connection_name": schema.StringAttribute{
												Computed: true,
											},
											"connection_type": schema.StringAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"remote_id": schema.StringAttribute{
												Computed: true,
											},
											"remote_url": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
										},
									},
									Description: `Information about known linkages to representations of services outside of FireHydrant.`,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"labels": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `An object of label key and values`,
								},
								"links": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"href_url": schema.StringAttribute{
												Computed: true,
											},
											"icon_url": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of links attached to this functionality.`,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `TeamEntity model`,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"updated_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						Description: `List of functionalities attached to the service`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"labels": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `An object of label key and values`,
					},
					"last_import": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"import_errors": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"data": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `Additional error data`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"message": schema.StringAttribute{
											Computed: true,
										},
										"resource": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"name": schema.StringAttribute{
													Computed: true,
												},
												"resource_id": schema.StringAttribute{
													Computed: true,
												},
												"resource_type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"imported_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"remote_id": schema.StringAttribute{
								Computed: true,
							},
							"state": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["selected", "skipped", "imported", "errored"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"selected",
										"skipped",
										"imported",
										"errored",
									),
								},
							},
						},
					},
					"links": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"href_url": schema.StringAttribute{
									Computed: true,
								},
								"icon_url": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of links attached to this service.`,
					},
					"managed_by": schema.StringAttribute{
						Computed:    true,
						Description: `If set, this field indicates that the service is managed by an integration and thus cannot be set manually`,
					},
					"managed_by_settings": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `Indicates the settings of the catalog that manages this service`,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"owner": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"created_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"created_by": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"source": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"functionalities": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"active_incidents": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `List of active incident guids`,
										},
										"alert_on_add": schema.BoolAttribute{
											Computed: true,
										},
										"auto_add_responding_team": schema.BoolAttribute{
											Computed: true,
										},
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"external_resources": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"connection_id": schema.StringAttribute{
														Computed: true,
													},
													"connection_name": schema.StringAttribute{
														Computed: true,
													},
													"connection_type": schema.StringAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"remote_id": schema.StringAttribute{
														Computed: true,
													},
													"remote_url": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
											Description: `Information about known linkages to representations of services outside of FireHydrant.`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"labels": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `An object of label key and values`,
										},
										"links": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"href_url": schema.StringAttribute{
														Computed: true,
													},
													"icon_url": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											Description: `List of links attached to this functionality.`,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"owner": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `TeamEntity model`,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"updated_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"memberships": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"default_incident_role": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"description": schema.StringAttribute{
													Computed: true,
												},
												"discarded_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"summary": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
											},
											Description: `IncidentRoleEntity model`,
										},
										"schedule": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"discarded": schema.BoolAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"integration": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"user": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"signals_enabled_notification_types": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"slack_linked": schema.BoolAttribute{
													Computed: true,
												},
												"slack_user_id": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
											},
										},
									},
								},
							},
							"ms_teams_channel": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"channel_id": schema.StringAttribute{
										Computed: true,
									},
									"channel_name": schema.StringAttribute{
										Computed: true,
									},
									"channel_url": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"incident": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"active": schema.BoolAttribute{
												Computed: true,
											},
											"ai_incident_summary": schema.StringAttribute{
												Computed: true,
											},
											"channel_id": schema.StringAttribute{
												Computed: true,
											},
											"channel_name": schema.StringAttribute{
												Computed: true,
											},
											"channel_reference": schema.StringAttribute{
												Computed: true,
											},
											"channel_status": schema.StringAttribute{
												Computed:    true,
												Description: `inoperative: 0, operational: 1, archived: 2`,
											},
											"conference_bridges": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"context_object": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"context_description": schema.StringAttribute{
														Computed: true,
													},
													"context_tag": schema.StringAttribute{
														Computed: true,
													},
													"object_id": schema.StringAttribute{
														Computed: true,
													},
													"object_type": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"conversations": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"channel": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"comments_url": schema.StringAttribute{
															Computed: true,
														},
														"field": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"resource_class": schema.StringAttribute{
															Computed: true,
														},
														"resource_id": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"created_at": schema.StringAttribute{
												Computed:    true,
												Description: `The time the incident was opened`,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"created_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"current_milestone": schema.StringAttribute{
												Computed:    true,
												Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
											},
											"custom_fields": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"description": schema.StringAttribute{
															Computed: true,
														},
														"display_name": schema.StringAttribute{
															Computed: true,
														},
														"field_id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"slug": schema.StringAttribute{
															Computed: true,
														},
														"value": schema.StringAttribute{
															Computed: true,
														},
														"value_array": schema.StringAttribute{
															Computed: true,
														},
														"value_string": schema.StringAttribute{
															Computed: true,
														},
														"value_type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"customer_impact_summary": schema.StringAttribute{
												Computed: true,
											},
											"customers_impacted": schema.Int64Attribute{
												Computed: true,
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"discarded_at": schema.StringAttribute{
												Computed:    true,
												Description: `The time the incident was archived`,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"environments": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"field_requirements": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"field_id": schema.StringAttribute{
															Computed:    true,
															Description: `A unique identifier for the field.`,
														},
														"required_at_milestone_id": schema.StringAttribute{
															Computed:    true,
															Description: `The milestone at which this field is required. If null, this field is always required.`,
														},
													},
												},
											},
											"functionalities": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Description: `UUID of the Incident`,
											},
											"impacts": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"condition": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed:    true,
																	Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
																},
															},
															Description: `SeverityMatrix_ConditionEntity model`,
														},
														"conversations": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"channel": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"comments_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"field": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_class": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_id": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"impact": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["environment", "functionality", "service"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"environment",
																	"functionality",
																	"service",
																),
															},
														},
													},
												},
											},
											"incident_channels": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"icon_url": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"source": schema.StringAttribute{
															Computed: true,
														},
														"source_id": schema.StringAttribute{
															Computed: true,
														},
														"source_name": schema.StringAttribute{
															Computed: true,
														},
														"status": schema.StringAttribute{
															Computed: true,
														},
														"url": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"incident_tickets": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"assignees": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"created_by": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"source": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"due_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"incident_current_milestone": schema.StringAttribute{
															Computed:    true,
															Description: `Milestone of incident that this ticket is related to`,
														},
														"incident_id": schema.StringAttribute{
															Computed:    true,
															Description: `ID of incident that this ticket is related to`,
														},
														"incident_name": schema.StringAttribute{
															Computed:    true,
															Description: `Name of incident that this ticket is related to`,
														},
														"link": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"deletable": schema.BoolAttribute{
																	Computed:    true,
																	Description: `Link can be deleted`,
																},
																"display_text": schema.StringAttribute{
																	Computed: true,
																},
																"editable": schema.BoolAttribute{
																	Computed:    true,
																	Description: `Link can be edited`,
																},
																"href_url": schema.StringAttribute{
																	Computed: true,
																},
																"icon_url": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"type": schema.StringAttribute{
																	Computed: true,
																},
															},
															Description: `Attachments_LinkEntity model`,
														},
														"priority": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
															Description: `Ticketing_PriorityEntity model`,
														},
														"state": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"open",
																	"in_progress",
																	"cancelled",
																	"done",
																),
															},
														},
														"summary": schema.StringAttribute{
															Computed: true,
														},
														"tag_list": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
														},
														"task_id": schema.StringAttribute{
															Computed:    true,
															Description: `ID of task that this ticket is related to`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["incident", "task", "follow_up"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"incident",
																	"task",
																	"follow_up",
																),
															},
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
											},
											"incident_url": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `A key/value of labels`,
											},
											"last_note": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"body": schema.StringAttribute{
														Computed: true,
													},
													"conversations": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"channel": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
																"comments_url": schema.StringAttribute{
																	Computed: true,
																},
																"field": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"resource_class": schema.StringAttribute{
																	Computed: true,
																},
																"resource_id": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"status_pages": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"display_name": schema.StringAttribute{
																	Computed: true,
																},
																"external_id": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"integration": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"created_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																		"display_name": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"integration_name": schema.StringAttribute{
																			Computed: true,
																		},
																		"integration_slug": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"url": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
												},
												Description: `Event_NoteEntity model`,
											},
											"last_update": schema.StringAttribute{
												Computed: true,
											},
											"lifecycle_measurements": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"calculated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"ends_at_milestone": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"slug": schema.StringAttribute{
															Computed: true,
														},
														"starts_at_milestone": schema.StringAttribute{
															Computed: true,
														},
														"value": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"lifecycle_phases": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"description": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"milestones": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"duration": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"occurred_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"position": schema.Int64Attribute{
																		Computed: true,
																	},
																	"slug": schema.StringAttribute{
																		Computed: true,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"updated_by": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"email": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"source": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"position": schema.Int64Attribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"milestones": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"duration": schema.StringAttribute{
															Computed:    true,
															Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"occurred_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
												Description: `DEPRECATED: Please use lifecycle phases instead`,
											},
											"monetary_impact": schema.Int64Attribute{
												Computed: true,
											},
											"monetary_impact_cents": schema.Int64Attribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed:    true,
												Description: `Name of the incident`,
											},
											"number": schema.Int64Attribute{
												Computed:    true,
												Description: `Incident number`,
											},
											"organization": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"organization_id": schema.StringAttribute{
												Computed: true,
											},
											"priority": schema.StringAttribute{
												Computed: true,
											},
											"private_id": schema.StringAttribute{
												Computed: true,
											},
											"private_status_page_url": schema.StringAttribute{
												Computed: true,
											},
											"report_id": schema.StringAttribute{
												Computed: true,
											},
											"role_assignments": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"incident_role": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"description": schema.StringAttribute{
																	Computed: true,
																},
																"discarded_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"summary": schema.StringAttribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
															Description: `IncidentRoleEntity model`,
														},
														"status": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["active", "inactive"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"active",
																	"inactive",
																),
															},
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"user": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"signals_enabled_notification_types": schema.ListAttribute{
																	Computed:    true,
																	ElementType: types.StringType,
																},
																"slack_linked": schema.BoolAttribute{
																	Computed: true,
																},
																"slack_user_id": schema.StringAttribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
														},
													},
												},
											},
											"services": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"severity": schema.StringAttribute{
												Computed: true,
											},
											"severity_color": schema.StringAttribute{
												Computed: true,
											},
											"severity_condition": schema.StringAttribute{
												Computed: true,
											},
											"severity_condition_object": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"position": schema.Int64Attribute{
														Computed:    true,
														Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
													},
												},
												Description: `SeverityMatrix_ConditionEntity model`,
											},
											"severity_impact": schema.StringAttribute{
												Computed: true,
											},
											"severity_impact_object": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"affects_id": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"position": schema.Int64Attribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
												},
												Description: `SeverityMatrix_ImpactEntity model`,
											},
											"started_at": schema.StringAttribute{
												Computed:    true,
												Description: `The time the incident started`,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"status_pages": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"display_name": schema.StringAttribute{
															Computed: true,
														},
														"external_id": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"integration": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"display_name": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"integration_name": schema.StringAttribute{
																	Computed: true,
																},
																"integration_slug": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"url": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"summary": schema.StringAttribute{
												Computed: true,
											},
											"tag_list": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"team_assignments": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"status": schema.StringAttribute{
															Computed: true,
														},
														"team": schema.SingleNestedAttribute{
															Computed:    true,
															Description: `TeamEntity model`,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
											},
											"ticket": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"assignees": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"source": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"created_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"due_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"incident_current_milestone": schema.StringAttribute{
														Computed:    true,
														Description: `Milestone of incident that this ticket is related to`,
													},
													"incident_id": schema.StringAttribute{
														Computed:    true,
														Description: `ID of incident that this ticket is related to`,
													},
													"incident_name": schema.StringAttribute{
														Computed:    true,
														Description: `Name of incident that this ticket is related to`,
													},
													"link": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"deletable": schema.BoolAttribute{
																Computed:    true,
																Description: `Link can be deleted`,
															},
															"display_text": schema.StringAttribute{
																Computed: true,
															},
															"editable": schema.BoolAttribute{
																Computed:    true,
																Description: `Link can be edited`,
															},
															"href_url": schema.StringAttribute{
																Computed: true,
															},
															"icon_url": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
														},
														Description: `Attachments_LinkEntity model`,
													},
													"priority": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"position": schema.Int64Attribute{
																Computed: true,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
														Description: `Ticketing_PriorityEntity model`,
													},
													"state": schema.StringAttribute{
														Computed:    true,
														Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"open",
																"in_progress",
																"cancelled",
																"done",
															),
														},
													},
													"summary": schema.StringAttribute{
														Computed: true,
													},
													"tag_list": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
													"task_id": schema.StringAttribute{
														Computed:    true,
														Description: `ID of task that this ticket is related to`,
													},
													"type": schema.StringAttribute{
														Computed:    true,
														Description: `must be one of ["incident", "task", "follow_up"]`,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"incident",
																"task",
																"follow_up",
															),
														},
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
												Description: `Ticketing_TicketEntity model`,
											},
										},
										Description: `IncidentEntity model`,
									},
									"ms_team_id": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed: true,
									},
									"team_name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"owned_functionalities": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"active_incidents": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `List of active incident guids`,
										},
										"alert_on_add": schema.BoolAttribute{
											Computed: true,
										},
										"auto_add_responding_team": schema.BoolAttribute{
											Computed: true,
										},
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"external_resources": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"connection_id": schema.StringAttribute{
														Computed: true,
													},
													"connection_name": schema.StringAttribute{
														Computed: true,
													},
													"connection_type": schema.StringAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"remote_id": schema.StringAttribute{
														Computed: true,
													},
													"remote_url": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
											Description: `Information about known linkages to representations of services outside of FireHydrant.`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"labels": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `An object of label key and values`,
										},
										"links": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"href_url": schema.StringAttribute{
														Computed: true,
													},
													"icon_url": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											Description: `List of links attached to this functionality.`,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"owner": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `TeamEntity model`,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"updated_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"owned_runbooks": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"attachment_rule": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"logic": schema.SingleNestedAttribute{
													Computed:    true,
													Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
												},
												"user_data": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"label": schema.StringAttribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
														"value": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
										},
										"categories": schema.StringAttribute{
											Computed:    true,
											Description: `categories the runbook applies to`,
										},
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"owner": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `TeamEntity model`,
										},
										"summary": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
									},
								},
							},
							"signals_ical_url": schema.StringAttribute{
								Computed: true,
							},
							"slack_channel": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"slack_channel_id": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"slug": schema.StringAttribute{
								Computed: true,
							},
							"updated_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
						},
						Description: `TeamEntity model`,
					},
					"service_checklist_updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"service_tier": schema.Int64Attribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"teams": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"functionalities": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"active_incidents": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `List of active incident guids`,
											},
											"alert_on_add": schema.BoolAttribute{
												Computed: true,
											},
											"auto_add_responding_team": schema.BoolAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"external_resources": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"connection_id": schema.StringAttribute{
															Computed: true,
														},
														"connection_name": schema.StringAttribute{
															Computed: true,
														},
														"connection_type": schema.StringAttribute{
															Computed: true,
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"remote_id": schema.StringAttribute{
															Computed: true,
														},
														"remote_url": schema.StringAttribute{
															Computed: true,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
												Description: `Information about known linkages to representations of services outside of FireHydrant.`,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `An object of label key and values`,
											},
											"links": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"href_url": schema.StringAttribute{
															Computed: true,
														},
														"icon_url": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												Description: `List of links attached to this functionality.`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"owner": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `TeamEntity model`,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"updated_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"memberships": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"default_incident_role": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"discarded_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"summary": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
												Description: `IncidentRoleEntity model`,
											},
											"schedule": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"discarded": schema.BoolAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"integration": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"user": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"signals_enabled_notification_types": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
													"slack_linked": schema.BoolAttribute{
														Computed: true,
													},
													"slack_user_id": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
										},
									},
								},
								"ms_teams_channel": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"channel_id": schema.StringAttribute{
											Computed: true,
										},
										"channel_name": schema.StringAttribute{
											Computed: true,
										},
										"channel_url": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"incident": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"active": schema.BoolAttribute{
													Computed: true,
												},
												"ai_incident_summary": schema.StringAttribute{
													Computed: true,
												},
												"channel_id": schema.StringAttribute{
													Computed: true,
												},
												"channel_name": schema.StringAttribute{
													Computed: true,
												},
												"channel_reference": schema.StringAttribute{
													Computed: true,
												},
												"channel_status": schema.StringAttribute{
													Computed:    true,
													Description: `inoperative: 0, operational: 1, archived: 2`,
												},
												"conference_bridges": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"context_object": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"context_description": schema.StringAttribute{
															Computed: true,
														},
														"context_tag": schema.StringAttribute{
															Computed: true,
														},
														"object_id": schema.StringAttribute{
															Computed: true,
														},
														"object_type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"conversations": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"channel": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"comments_url": schema.StringAttribute{
																Computed: true,
															},
															"field": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"resource_class": schema.StringAttribute{
																Computed: true,
															},
															"resource_id": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"created_at": schema.StringAttribute{
													Computed:    true,
													Description: `The time the incident was opened`,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"created_by": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"email": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"source": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"current_milestone": schema.StringAttribute{
													Computed:    true,
													Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
												},
												"custom_fields": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"description": schema.StringAttribute{
																Computed: true,
															},
															"display_name": schema.StringAttribute{
																Computed: true,
															},
															"field_id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"slug": schema.StringAttribute{
																Computed: true,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
															"value_array": schema.StringAttribute{
																Computed: true,
															},
															"value_string": schema.StringAttribute{
																Computed: true,
															},
															"value_type": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"customer_impact_summary": schema.StringAttribute{
													Computed: true,
												},
												"customers_impacted": schema.Int64Attribute{
													Computed: true,
												},
												"description": schema.StringAttribute{
													Computed: true,
												},
												"discarded_at": schema.StringAttribute{
													Computed:    true,
													Description: `The time the incident was archived`,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"environments": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"field_requirements": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"field_id": schema.StringAttribute{
																Computed:    true,
																Description: `A unique identifier for the field.`,
															},
															"required_at_milestone_id": schema.StringAttribute{
																Computed:    true,
																Description: `The milestone at which this field is required. If null, this field is always required.`,
															},
														},
													},
												},
												"functionalities": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"id": schema.StringAttribute{
													Computed:    true,
													Description: `UUID of the Incident`,
												},
												"impacts": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"condition": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"position": schema.Int64Attribute{
																		Computed:    true,
																		Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
																	},
																},
																Description: `SeverityMatrix_ConditionEntity model`,
															},
															"conversations": schema.ListNestedAttribute{
																Computed: true,
																NestedObject: schema.NestedAttributeObject{
																	Attributes: map[string]schema.Attribute{
																		"channel": schema.SingleNestedAttribute{
																			Computed: true,
																			Attributes: map[string]schema.Attribute{
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																		"comments_url": schema.StringAttribute{
																			Computed: true,
																		},
																		"field": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"resource_class": schema.StringAttribute{
																			Computed: true,
																		},
																		"resource_id": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"impact": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["environment", "functionality", "service"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"environment",
																		"functionality",
																		"service",
																	),
																},
															},
														},
													},
												},
												"incident_channels": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"icon_url": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
															"source_id": schema.StringAttribute{
																Computed: true,
															},
															"source_name": schema.StringAttribute{
																Computed: true,
															},
															"status": schema.StringAttribute{
																Computed: true,
															},
															"url": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"incident_tickets": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"assignees": schema.ListNestedAttribute{
																Computed: true,
																NestedObject: schema.NestedAttributeObject{
																	Attributes: map[string]schema.Attribute{
																		"email": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																		"source": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
															},
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"created_by": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"description": schema.StringAttribute{
																Computed: true,
															},
															"due_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"incident_current_milestone": schema.StringAttribute{
																Computed:    true,
																Description: `Milestone of incident that this ticket is related to`,
															},
															"incident_id": schema.StringAttribute{
																Computed:    true,
																Description: `ID of incident that this ticket is related to`,
															},
															"incident_name": schema.StringAttribute{
																Computed:    true,
																Description: `Name of incident that this ticket is related to`,
															},
															"link": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"deletable": schema.BoolAttribute{
																		Computed:    true,
																		Description: `Link can be deleted`,
																	},
																	"display_text": schema.StringAttribute{
																		Computed: true,
																	},
																	"editable": schema.BoolAttribute{
																		Computed:    true,
																		Description: `Link can be edited`,
																	},
																	"href_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"icon_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"type": schema.StringAttribute{
																		Computed: true,
																	},
																},
																Description: `Attachments_LinkEntity model`,
															},
															"priority": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"position": schema.Int64Attribute{
																		Computed: true,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
																Description: `Ticketing_PriorityEntity model`,
															},
															"state": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"open",
																		"in_progress",
																		"cancelled",
																		"done",
																	),
																},
															},
															"summary": schema.StringAttribute{
																Computed: true,
															},
															"tag_list": schema.ListAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
															"task_id": schema.StringAttribute{
																Computed:    true,
																Description: `ID of task that this ticket is related to`,
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["incident", "task", "follow_up"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"incident",
																		"task",
																		"follow_up",
																	),
																},
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
													},
												},
												"incident_url": schema.StringAttribute{
													Computed: true,
												},
												"labels": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `A key/value of labels`,
												},
												"last_note": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"body": schema.StringAttribute{
															Computed: true,
														},
														"conversations": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"channel": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"comments_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"field": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_class": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_id": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"status_pages": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"display_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"external_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"integration": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"display_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration_slug": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"url": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
													},
													Description: `Event_NoteEntity model`,
												},
												"last_update": schema.StringAttribute{
													Computed: true,
												},
												"lifecycle_measurements": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"calculated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"description": schema.StringAttribute{
																Computed: true,
															},
															"ends_at_milestone": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"slug": schema.StringAttribute{
																Computed: true,
															},
															"starts_at_milestone": schema.StringAttribute{
																Computed: true,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"lifecycle_phases": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"description": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"milestones": schema.ListNestedAttribute{
																Computed: true,
																NestedObject: schema.NestedAttributeObject{
																	Attributes: map[string]schema.Attribute{
																		"description": schema.StringAttribute{
																			Computed: true,
																		},
																		"duration": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																		"occurred_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																		"position": schema.Int64Attribute{
																			Computed: true,
																		},
																		"slug": schema.StringAttribute{
																			Computed: true,
																		},
																		"updated_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																		"updated_by": schema.SingleNestedAttribute{
																			Computed: true,
																			Attributes: map[string]schema.Attribute{
																				"email": schema.StringAttribute{
																					Computed: true,
																				},
																				"id": schema.StringAttribute{
																					Computed: true,
																				},
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																				"source": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																	},
																},
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"position": schema.Int64Attribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"milestones": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"duration": schema.StringAttribute{
																Computed:    true,
																Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"occurred_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
													},
													Description: `DEPRECATED: Please use lifecycle phases instead`,
												},
												"monetary_impact": schema.Int64Attribute{
													Computed: true,
												},
												"monetary_impact_cents": schema.Int64Attribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `Name of the incident`,
												},
												"number": schema.Int64Attribute{
													Computed:    true,
													Description: `Incident number`,
												},
												"organization": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"organization_id": schema.StringAttribute{
													Computed: true,
												},
												"priority": schema.StringAttribute{
													Computed: true,
												},
												"private_id": schema.StringAttribute{
													Computed: true,
												},
												"private_status_page_url": schema.StringAttribute{
													Computed: true,
												},
												"report_id": schema.StringAttribute{
													Computed: true,
												},
												"role_assignments": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"incident_role": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"discarded_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"summary": schema.StringAttribute{
																		Computed: true,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
																Description: `IncidentRoleEntity model`,
															},
															"status": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["active", "inactive"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"active",
																		"inactive",
																	),
																},
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"user": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"signals_enabled_notification_types": schema.ListAttribute{
																		Computed:    true,
																		ElementType: types.StringType,
																	},
																	"slack_linked": schema.BoolAttribute{
																		Computed: true,
																	},
																	"slack_user_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
															},
														},
													},
												},
												"services": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"severity": schema.StringAttribute{
													Computed: true,
												},
												"severity_color": schema.StringAttribute{
													Computed: true,
												},
												"severity_condition": schema.StringAttribute{
													Computed: true,
												},
												"severity_condition_object": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"position": schema.Int64Attribute{
															Computed:    true,
															Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
														},
													},
													Description: `SeverityMatrix_ConditionEntity model`,
												},
												"severity_impact": schema.StringAttribute{
													Computed: true,
												},
												"severity_impact_object": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"affects_id": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"position": schema.Int64Attribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
													},
													Description: `SeverityMatrix_ImpactEntity model`,
												},
												"started_at": schema.StringAttribute{
													Computed:    true,
													Description: `The time the incident started`,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"status_pages": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"display_name": schema.StringAttribute{
																Computed: true,
															},
															"external_id": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"integration": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"display_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"integration_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"integration_slug": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"url": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"summary": schema.StringAttribute{
													Computed: true,
												},
												"tag_list": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"team_assignments": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"status": schema.StringAttribute{
																Computed: true,
															},
															"team": schema.SingleNestedAttribute{
																Computed:    true,
																Description: `TeamEntity model`,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
													},
												},
												"ticket": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"assignees": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"created_by": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"source": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"due_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"incident_current_milestone": schema.StringAttribute{
															Computed:    true,
															Description: `Milestone of incident that this ticket is related to`,
														},
														"incident_id": schema.StringAttribute{
															Computed:    true,
															Description: `ID of incident that this ticket is related to`,
														},
														"incident_name": schema.StringAttribute{
															Computed:    true,
															Description: `Name of incident that this ticket is related to`,
														},
														"link": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"deletable": schema.BoolAttribute{
																	Computed:    true,
																	Description: `Link can be deleted`,
																},
																"display_text": schema.StringAttribute{
																	Computed: true,
																},
																"editable": schema.BoolAttribute{
																	Computed:    true,
																	Description: `Link can be edited`,
																},
																"href_url": schema.StringAttribute{
																	Computed: true,
																},
																"icon_url": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"type": schema.StringAttribute{
																	Computed: true,
																},
															},
															Description: `Attachments_LinkEntity model`,
														},
														"priority": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
															Description: `Ticketing_PriorityEntity model`,
														},
														"state": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"open",
																	"in_progress",
																	"cancelled",
																	"done",
																),
															},
														},
														"summary": schema.StringAttribute{
															Computed: true,
														},
														"tag_list": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
														},
														"task_id": schema.StringAttribute{
															Computed:    true,
															Description: `ID of task that this ticket is related to`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["incident", "task", "follow_up"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"incident",
																	"task",
																	"follow_up",
																),
															},
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
													Description: `Ticketing_TicketEntity model`,
												},
											},
											Description: `IncidentEntity model`,
										},
										"ms_team_id": schema.StringAttribute{
											Computed: true,
										},
										"status": schema.StringAttribute{
											Computed: true,
										},
										"team_name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owned_functionalities": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"active_incidents": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `List of active incident guids`,
											},
											"alert_on_add": schema.BoolAttribute{
												Computed: true,
											},
											"auto_add_responding_team": schema.BoolAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"external_resources": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"connection_id": schema.StringAttribute{
															Computed: true,
														},
														"connection_name": schema.StringAttribute{
															Computed: true,
														},
														"connection_type": schema.StringAttribute{
															Computed: true,
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"remote_id": schema.StringAttribute{
															Computed: true,
														},
														"remote_url": schema.StringAttribute{
															Computed: true,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
												Description: `Information about known linkages to representations of services outside of FireHydrant.`,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `An object of label key and values`,
											},
											"links": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"href_url": schema.StringAttribute{
															Computed: true,
														},
														"icon_url": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												Description: `List of links attached to this functionality.`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"owner": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `TeamEntity model`,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"updated_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"owned_runbooks": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"attachment_rule": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"logic": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
													},
													"user_data": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"label": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
											"categories": schema.StringAttribute{
												Computed:    true,
												Description: `categories the runbook applies to`,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"owner": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `TeamEntity model`,
											},
											"summary": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
										},
									},
								},
								"signals_ical_url": schema.StringAttribute{
									Computed: true,
								},
								"slack_channel": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"slack_channel_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						Description: `List of teams attached to the service`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"updated_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
				Description: `ServiceEntity model`,
			},
			"connected_service_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"created_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
			"id": schema.StringAttribute{
				Computed: true,
			},
			"notes": schema.StringAttribute{
				Computed:    true,
				Optional:    true,
				Description: `A note to describe the service dependency relationship`,
			},
			"service": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"active_incidents": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `List of active incident guids`,
					},
					"alert_on_add": schema.BoolAttribute{
						Computed: true,
					},
					"allowed_params": schema.ListAttribute{
						Computed:    true,
						ElementType: types.StringType,
					},
					"auto_add_responding_team": schema.BoolAttribute{
						Computed: true,
					},
					"checklists": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"checks": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"status": schema.BoolAttribute{
												Computed: true,
											},
										},
									},
								},
								"created_at": schema.StringAttribute{
									Computed: true,
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"created_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"functionalities": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"active_incidents": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
														Description: `List of active incident guids`,
													},
													"alert_on_add": schema.BoolAttribute{
														Computed: true,
													},
													"auto_add_responding_team": schema.BoolAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"external_resources": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"connection_id": schema.StringAttribute{
																	Computed: true,
																},
																"connection_name": schema.StringAttribute{
																	Computed: true,
																},
																"connection_type": schema.StringAttribute{
																	Computed: true,
																},
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"remote_id": schema.StringAttribute{
																	Computed: true,
																},
																"remote_url": schema.StringAttribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
														},
														Description: `Information about known linkages to representations of services outside of FireHydrant.`,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"labels": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														Description: `An object of label key and values`,
													},
													"links": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"href_url": schema.StringAttribute{
																	Computed: true,
																},
																"icon_url": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														Description: `List of links attached to this functionality.`,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"owner": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `TeamEntity model`,
													},
													"slug": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"updated_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"memberships": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"default_incident_role": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"description": schema.StringAttribute{
																Computed: true,
															},
															"discarded_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"summary": schema.StringAttribute{
																Computed: true,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
														Description: `IncidentRoleEntity model`,
													},
													"schedule": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"discarded": schema.BoolAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"integration": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"user": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"signals_enabled_notification_types": schema.ListAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
															"slack_linked": schema.BoolAttribute{
																Computed: true,
															},
															"slack_user_id": schema.StringAttribute{
																Computed: true,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
													},
												},
											},
										},
										"ms_teams_channel": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"channel_id": schema.StringAttribute{
													Computed: true,
												},
												"channel_name": schema.StringAttribute{
													Computed: true,
												},
												"channel_url": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"incident": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"active": schema.BoolAttribute{
															Computed: true,
														},
														"ai_incident_summary": schema.StringAttribute{
															Computed: true,
														},
														"channel_id": schema.StringAttribute{
															Computed: true,
														},
														"channel_name": schema.StringAttribute{
															Computed: true,
														},
														"channel_reference": schema.StringAttribute{
															Computed: true,
														},
														"channel_status": schema.StringAttribute{
															Computed:    true,
															Description: `inoperative: 0, operational: 1, archived: 2`,
														},
														"conference_bridges": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"context_object": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"context_description": schema.StringAttribute{
																	Computed: true,
																},
																"context_tag": schema.StringAttribute{
																	Computed: true,
																},
																"object_id": schema.StringAttribute{
																	Computed: true,
																},
																"object_type": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"conversations": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"channel": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"comments_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"field": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_class": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_id": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"created_at": schema.StringAttribute{
															Computed:    true,
															Description: `The time the incident was opened`,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"created_by": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"source": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"current_milestone": schema.StringAttribute{
															Computed:    true,
															Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
														},
														"custom_fields": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"display_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"field_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"slug": schema.StringAttribute{
																		Computed: true,
																	},
																	"value": schema.StringAttribute{
																		Computed: true,
																	},
																	"value_array": schema.StringAttribute{
																		Computed: true,
																	},
																	"value_string": schema.StringAttribute{
																		Computed: true,
																	},
																	"value_type": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"customer_impact_summary": schema.StringAttribute{
															Computed: true,
														},
														"customers_impacted": schema.Int64Attribute{
															Computed: true,
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"discarded_at": schema.StringAttribute{
															Computed:    true,
															Description: `The time the incident was archived`,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"environments": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"field_requirements": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"field_id": schema.StringAttribute{
																		Computed:    true,
																		Description: `A unique identifier for the field.`,
																	},
																	"required_at_milestone_id": schema.StringAttribute{
																		Computed:    true,
																		Description: `The milestone at which this field is required. If null, this field is always required.`,
																	},
																},
															},
														},
														"functionalities": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"id": schema.StringAttribute{
															Computed:    true,
															Description: `UUID of the Incident`,
														},
														"impacts": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"condition": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"position": schema.Int64Attribute{
																				Computed:    true,
																				Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
																			},
																		},
																		Description: `SeverityMatrix_ConditionEntity model`,
																	},
																	"conversations": schema.ListNestedAttribute{
																		Computed: true,
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{
																				"channel": schema.SingleNestedAttribute{
																					Computed: true,
																					Attributes: map[string]schema.Attribute{
																						"name": schema.StringAttribute{
																							Computed: true,
																						},
																					},
																				},
																				"comments_url": schema.StringAttribute{
																					Computed: true,
																				},
																				"field": schema.StringAttribute{
																					Computed: true,
																				},
																				"id": schema.StringAttribute{
																					Computed: true,
																				},
																				"resource_class": schema.StringAttribute{
																					Computed: true,
																				},
																				"resource_id": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"impact": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"type": schema.StringAttribute{
																		Computed:    true,
																		Description: `must be one of ["environment", "functionality", "service"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"environment",
																				"functionality",
																				"service",
																			),
																		},
																	},
																},
															},
														},
														"incident_channels": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"icon_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																	"source_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"source_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"status": schema.StringAttribute{
																		Computed: true,
																	},
																	"url": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"incident_tickets": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"assignees": schema.ListNestedAttribute{
																		Computed: true,
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{
																				"email": schema.StringAttribute{
																					Computed: true,
																				},
																				"id": schema.StringAttribute{
																					Computed: true,
																				},
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																				"source": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																	},
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"created_by": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"email": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"source": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"due_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"incident_current_milestone": schema.StringAttribute{
																		Computed:    true,
																		Description: `Milestone of incident that this ticket is related to`,
																	},
																	"incident_id": schema.StringAttribute{
																		Computed:    true,
																		Description: `ID of incident that this ticket is related to`,
																	},
																	"incident_name": schema.StringAttribute{
																		Computed:    true,
																		Description: `Name of incident that this ticket is related to`,
																	},
																	"link": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"deletable": schema.BoolAttribute{
																				Computed:    true,
																				Description: `Link can be deleted`,
																			},
																			"display_text": schema.StringAttribute{
																				Computed: true,
																			},
																			"editable": schema.BoolAttribute{
																				Computed:    true,
																				Description: `Link can be edited`,
																			},
																			"href_url": schema.StringAttribute{
																				Computed: true,
																			},
																			"icon_url": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"type": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																		Description: `Attachments_LinkEntity model`,
																	},
																	"priority": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"position": schema.Int64Attribute{
																				Computed: true,
																			},
																			"updated_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																		},
																		Description: `Ticketing_PriorityEntity model`,
																	},
																	"state": schema.StringAttribute{
																		Computed:    true,
																		Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"open",
																				"in_progress",
																				"cancelled",
																				"done",
																			),
																		},
																	},
																	"summary": schema.StringAttribute{
																		Computed: true,
																	},
																	"tag_list": schema.ListAttribute{
																		Computed:    true,
																		ElementType: types.StringType,
																	},
																	"task_id": schema.StringAttribute{
																		Computed:    true,
																		Description: `ID of task that this ticket is related to`,
																	},
																	"type": schema.StringAttribute{
																		Computed:    true,
																		Description: `must be one of ["incident", "task", "follow_up"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"incident",
																				"task",
																				"follow_up",
																			),
																		},
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
															},
														},
														"incident_url": schema.StringAttribute{
															Computed: true,
														},
														"labels": schema.MapAttribute{
															Computed:    true,
															ElementType: types.StringType,
															Description: `A key/value of labels`,
														},
														"last_note": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"body": schema.StringAttribute{
																	Computed: true,
																},
																"conversations": schema.ListNestedAttribute{
																	Computed: true,
																	NestedObject: schema.NestedAttributeObject{
																		Attributes: map[string]schema.Attribute{
																			"channel": schema.SingleNestedAttribute{
																				Computed: true,
																				Attributes: map[string]schema.Attribute{
																					"name": schema.StringAttribute{
																						Computed: true,
																					},
																				},
																			},
																			"comments_url": schema.StringAttribute{
																				Computed: true,
																			},
																			"field": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"resource_class": schema.StringAttribute{
																				Computed: true,
																			},
																			"resource_id": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"status_pages": schema.ListNestedAttribute{
																	Computed: true,
																	NestedObject: schema.NestedAttributeObject{
																		Attributes: map[string]schema.Attribute{
																			"display_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"external_id": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration": schema.SingleNestedAttribute{
																				Computed: true,
																				Attributes: map[string]schema.Attribute{
																					"created_at": schema.StringAttribute{
																						Computed: true,
																						Validators: []validator.String{
																							validators.IsRFC3339(),
																						},
																					},
																					"display_name": schema.StringAttribute{
																						Computed: true,
																					},
																					"id": schema.StringAttribute{
																						Computed: true,
																					},
																					"integration_name": schema.StringAttribute{
																						Computed: true,
																					},
																					"integration_slug": schema.StringAttribute{
																						Computed: true,
																					},
																				},
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"url": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
															},
															Description: `Event_NoteEntity model`,
														},
														"last_update": schema.StringAttribute{
															Computed: true,
														},
														"lifecycle_measurements": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"calculated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"ends_at_milestone": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"slug": schema.StringAttribute{
																		Computed: true,
																	},
																	"starts_at_milestone": schema.StringAttribute{
																		Computed: true,
																	},
																	"value": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"lifecycle_phases": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"milestones": schema.ListNestedAttribute{
																		Computed: true,
																		NestedObject: schema.NestedAttributeObject{
																			Attributes: map[string]schema.Attribute{
																				"description": schema.StringAttribute{
																					Computed: true,
																				},
																				"duration": schema.StringAttribute{
																					Computed: true,
																				},
																				"id": schema.StringAttribute{
																					Computed: true,
																				},
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																				"occurred_at": schema.StringAttribute{
																					Computed: true,
																					Validators: []validator.String{
																						validators.IsRFC3339(),
																					},
																				},
																				"position": schema.Int64Attribute{
																					Computed: true,
																				},
																				"slug": schema.StringAttribute{
																					Computed: true,
																				},
																				"updated_at": schema.StringAttribute{
																					Computed: true,
																					Validators: []validator.String{
																						validators.IsRFC3339(),
																					},
																				},
																				"updated_by": schema.SingleNestedAttribute{
																					Computed: true,
																					Attributes: map[string]schema.Attribute{
																						"email": schema.StringAttribute{
																							Computed: true,
																						},
																						"id": schema.StringAttribute{
																							Computed: true,
																						},
																						"name": schema.StringAttribute{
																							Computed: true,
																						},
																						"source": schema.StringAttribute{
																							Computed: true,
																						},
																					},
																				},
																			},
																		},
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"position": schema.Int64Attribute{
																		Computed: true,
																	},
																	"type": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"milestones": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"duration": schema.StringAttribute{
																		Computed:    true,
																		Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"occurred_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"type": schema.StringAttribute{
																		Computed:    true,
																		Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
															},
															Description: `DEPRECATED: Please use lifecycle phases instead`,
														},
														"monetary_impact": schema.Int64Attribute{
															Computed: true,
														},
														"monetary_impact_cents": schema.Int64Attribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed:    true,
															Description: `Name of the incident`,
														},
														"number": schema.Int64Attribute{
															Computed:    true,
															Description: `Incident number`,
														},
														"organization": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"organization_id": schema.StringAttribute{
															Computed: true,
														},
														"priority": schema.StringAttribute{
															Computed: true,
														},
														"private_id": schema.StringAttribute{
															Computed: true,
														},
														"private_status_page_url": schema.StringAttribute{
															Computed: true,
														},
														"report_id": schema.StringAttribute{
															Computed: true,
														},
														"role_assignments": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"incident_role": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"description": schema.StringAttribute{
																				Computed: true,
																			},
																			"discarded_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"summary": schema.StringAttribute{
																				Computed: true,
																			},
																			"updated_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																		},
																		Description: `IncidentRoleEntity model`,
																	},
																	"status": schema.StringAttribute{
																		Computed:    true,
																		Description: `must be one of ["active", "inactive"]`,
																		Validators: []validator.String{
																			stringvalidator.OneOf(
																				"active",
																				"inactive",
																			),
																		},
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"user": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"email": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"signals_enabled_notification_types": schema.ListAttribute{
																				Computed:    true,
																				ElementType: types.StringType,
																			},
																			"slack_linked": schema.BoolAttribute{
																				Computed: true,
																			},
																			"slack_user_id": schema.StringAttribute{
																				Computed: true,
																			},
																			"updated_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																		},
																	},
																},
															},
														},
														"services": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"severity": schema.StringAttribute{
															Computed: true,
														},
														"severity_color": schema.StringAttribute{
															Computed: true,
														},
														"severity_condition": schema.StringAttribute{
															Computed: true,
														},
														"severity_condition_object": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed:    true,
																	Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
																},
															},
															Description: `SeverityMatrix_ConditionEntity model`,
														},
														"severity_impact": schema.StringAttribute{
															Computed: true,
														},
														"severity_impact_object": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"affects_id": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed: true,
																},
																"type": schema.StringAttribute{
																	Computed: true,
																},
															},
															Description: `SeverityMatrix_ImpactEntity model`,
														},
														"started_at": schema.StringAttribute{
															Computed:    true,
															Description: `The time the incident started`,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"status_pages": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"display_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"external_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"integration": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"display_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration_slug": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"url": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"summary": schema.StringAttribute{
															Computed: true,
														},
														"tag_list": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
														},
														"team_assignments": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"status": schema.StringAttribute{
																		Computed: true,
																	},
																	"team": schema.SingleNestedAttribute{
																		Computed:    true,
																		Description: `TeamEntity model`,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
															},
														},
														"ticket": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"assignees": schema.ListNestedAttribute{
																	Computed: true,
																	NestedObject: schema.NestedAttributeObject{
																		Attributes: map[string]schema.Attribute{
																			"email": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"source": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"created_by": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"email": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																		"source": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
																"description": schema.StringAttribute{
																	Computed: true,
																},
																"due_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"incident_current_milestone": schema.StringAttribute{
																	Computed:    true,
																	Description: `Milestone of incident that this ticket is related to`,
																},
																"incident_id": schema.StringAttribute{
																	Computed:    true,
																	Description: `ID of incident that this ticket is related to`,
																},
																"incident_name": schema.StringAttribute{
																	Computed:    true,
																	Description: `Name of incident that this ticket is related to`,
																},
																"link": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"deletable": schema.BoolAttribute{
																			Computed:    true,
																			Description: `Link can be deleted`,
																		},
																		"display_text": schema.StringAttribute{
																			Computed: true,
																		},
																		"editable": schema.BoolAttribute{
																			Computed:    true,
																			Description: `Link can be edited`,
																		},
																		"href_url": schema.StringAttribute{
																			Computed: true,
																		},
																		"icon_url": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"type": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																	Description: `Attachments_LinkEntity model`,
																},
																"priority": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"created_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																		"position": schema.Int64Attribute{
																			Computed: true,
																		},
																		"updated_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																	},
																	Description: `Ticketing_PriorityEntity model`,
																},
																"state": schema.StringAttribute{
																	Computed:    true,
																	Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"open",
																			"in_progress",
																			"cancelled",
																			"done",
																		),
																	},
																},
																"summary": schema.StringAttribute{
																	Computed: true,
																},
																"tag_list": schema.ListAttribute{
																	Computed:    true,
																	ElementType: types.StringType,
																},
																"task_id": schema.StringAttribute{
																	Computed:    true,
																	Description: `ID of task that this ticket is related to`,
																},
																"type": schema.StringAttribute{
																	Computed:    true,
																	Description: `must be one of ["incident", "task", "follow_up"]`,
																	Validators: []validator.String{
																		stringvalidator.OneOf(
																			"incident",
																			"task",
																			"follow_up",
																		),
																	},
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
															Description: `Ticketing_TicketEntity model`,
														},
													},
													Description: `IncidentEntity model`,
												},
												"ms_team_id": schema.StringAttribute{
													Computed: true,
												},
												"status": schema.StringAttribute{
													Computed: true,
												},
												"team_name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"owned_functionalities": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"active_incidents": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
														Description: `List of active incident guids`,
													},
													"alert_on_add": schema.BoolAttribute{
														Computed: true,
													},
													"auto_add_responding_team": schema.BoolAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"external_resources": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"connection_id": schema.StringAttribute{
																	Computed: true,
																},
																"connection_name": schema.StringAttribute{
																	Computed: true,
																},
																"connection_type": schema.StringAttribute{
																	Computed: true,
																},
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"remote_id": schema.StringAttribute{
																	Computed: true,
																},
																"remote_url": schema.StringAttribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
														},
														Description: `Information about known linkages to representations of services outside of FireHydrant.`,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"labels": schema.MapAttribute{
														Computed:    true,
														ElementType: types.StringType,
														Description: `An object of label key and values`,
													},
													"links": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"href_url": schema.StringAttribute{
																	Computed: true,
																},
																"icon_url": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														Description: `List of links attached to this functionality.`,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"owner": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `TeamEntity model`,
													},
													"slug": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"updated_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
										},
										"owned_runbooks": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"attachment_rule": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"logic": schema.SingleNestedAttribute{
																Computed:    true,
																Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
															},
															"user_data": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"label": schema.StringAttribute{
																		Computed: true,
																	},
																	"type": schema.StringAttribute{
																		Computed: true,
																	},
																	"value": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
													},
													"categories": schema.StringAttribute{
														Computed:    true,
														Description: `categories the runbook applies to`,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"owner": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `TeamEntity model`,
													},
													"summary": schema.StringAttribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
										},
										"signals_ical_url": schema.StringAttribute{
											Computed: true,
										},
										"slack_channel": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"slack_channel_id": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
									},
									Description: `TeamEntity model`,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						Description: `List of checklists associated with a service`,
					},
					"completed_checks": schema.Int64Attribute{
						Computed: true,
					},
					"created_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"description": schema.StringAttribute{
						Computed: true,
					},
					"external_resources": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"connection_id": schema.StringAttribute{
									Computed: true,
								},
								"connection_name": schema.StringAttribute{
									Computed: true,
								},
								"connection_type": schema.StringAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"remote_id": schema.StringAttribute{
									Computed: true,
								},
								"remote_url": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						Description: `Information about known linkages to representations of services outside of FireHydrant.`,
					},
					"functionalities": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"active_incidents": schema.ListAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `List of active incident guids`,
								},
								"alert_on_add": schema.BoolAttribute{
									Computed: true,
								},
								"auto_add_responding_team": schema.BoolAttribute{
									Computed: true,
								},
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"external_resources": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"connection_id": schema.StringAttribute{
												Computed: true,
											},
											"connection_name": schema.StringAttribute{
												Computed: true,
											},
											"connection_type": schema.StringAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"remote_id": schema.StringAttribute{
												Computed: true,
											},
											"remote_url": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
										},
									},
									Description: `Information about known linkages to representations of services outside of FireHydrant.`,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"labels": schema.MapAttribute{
									Computed:    true,
									ElementType: types.StringType,
									Description: `An object of label key and values`,
								},
								"links": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"href_url": schema.StringAttribute{
												Computed: true,
											},
											"icon_url": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
										},
									},
									Description: `List of links attached to this functionality.`,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owner": schema.SingleNestedAttribute{
									Computed:    true,
									Description: `TeamEntity model`,
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"updated_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
							},
						},
						Description: `List of functionalities attached to the service`,
					},
					"id": schema.StringAttribute{
						Computed: true,
					},
					"labels": schema.MapAttribute{
						Computed:    true,
						ElementType: types.StringType,
						Description: `An object of label key and values`,
					},
					"last_import": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"import_errors": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"data": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `Additional error data`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"message": schema.StringAttribute{
											Computed: true,
										},
										"resource": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"name": schema.StringAttribute{
													Computed: true,
												},
												"resource_id": schema.StringAttribute{
													Computed: true,
												},
												"resource_type": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"imported_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"remote_id": schema.StringAttribute{
								Computed: true,
							},
							"state": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["selected", "skipped", "imported", "errored"]`,
								Validators: []validator.String{
									stringvalidator.OneOf(
										"selected",
										"skipped",
										"imported",
										"errored",
									),
								},
							},
						},
					},
					"links": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"href_url": schema.StringAttribute{
									Computed: true,
								},
								"icon_url": schema.StringAttribute{
									Computed: true,
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						Description: `List of links attached to this service.`,
					},
					"managed_by": schema.StringAttribute{
						Computed:    true,
						Description: `If set, this field indicates that the service is managed by an integration and thus cannot be set manually`,
					},
					"managed_by_settings": schema.SingleNestedAttribute{
						Computed:    true,
						Description: `Indicates the settings of the catalog that manages this service`,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
					"owner": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"created_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
							"created_by": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"email": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"source": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"description": schema.StringAttribute{
								Computed: true,
							},
							"functionalities": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"active_incidents": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `List of active incident guids`,
										},
										"alert_on_add": schema.BoolAttribute{
											Computed: true,
										},
										"auto_add_responding_team": schema.BoolAttribute{
											Computed: true,
										},
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"external_resources": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"connection_id": schema.StringAttribute{
														Computed: true,
													},
													"connection_name": schema.StringAttribute{
														Computed: true,
													},
													"connection_type": schema.StringAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"remote_id": schema.StringAttribute{
														Computed: true,
													},
													"remote_url": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
											Description: `Information about known linkages to representations of services outside of FireHydrant.`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"labels": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `An object of label key and values`,
										},
										"links": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"href_url": schema.StringAttribute{
														Computed: true,
													},
													"icon_url": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											Description: `List of links attached to this functionality.`,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"owner": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `TeamEntity model`,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"updated_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"memberships": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"default_incident_role": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"description": schema.StringAttribute{
													Computed: true,
												},
												"discarded_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"summary": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
											},
											Description: `IncidentRoleEntity model`,
										},
										"schedule": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"discarded": schema.BoolAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"integration": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
											},
										},
										"user": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"created_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"signals_enabled_notification_types": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"slack_linked": schema.BoolAttribute{
													Computed: true,
												},
												"slack_user_id": schema.StringAttribute{
													Computed: true,
												},
												"updated_at": schema.StringAttribute{
													Computed: true,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
											},
										},
									},
								},
							},
							"ms_teams_channel": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"channel_id": schema.StringAttribute{
										Computed: true,
									},
									"channel_name": schema.StringAttribute{
										Computed: true,
									},
									"channel_url": schema.StringAttribute{
										Computed: true,
									},
									"id": schema.StringAttribute{
										Computed: true,
									},
									"incident": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"active": schema.BoolAttribute{
												Computed: true,
											},
											"ai_incident_summary": schema.StringAttribute{
												Computed: true,
											},
											"channel_id": schema.StringAttribute{
												Computed: true,
											},
											"channel_name": schema.StringAttribute{
												Computed: true,
											},
											"channel_reference": schema.StringAttribute{
												Computed: true,
											},
											"channel_status": schema.StringAttribute{
												Computed:    true,
												Description: `inoperative: 0, operational: 1, archived: 2`,
											},
											"conference_bridges": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"context_object": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"context_description": schema.StringAttribute{
														Computed: true,
													},
													"context_tag": schema.StringAttribute{
														Computed: true,
													},
													"object_id": schema.StringAttribute{
														Computed: true,
													},
													"object_type": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"conversations": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"channel": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"comments_url": schema.StringAttribute{
															Computed: true,
														},
														"field": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"resource_class": schema.StringAttribute{
															Computed: true,
														},
														"resource_id": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"created_at": schema.StringAttribute{
												Computed:    true,
												Description: `The time the incident was opened`,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"created_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"current_milestone": schema.StringAttribute{
												Computed:    true,
												Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
											},
											"custom_fields": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"description": schema.StringAttribute{
															Computed: true,
														},
														"display_name": schema.StringAttribute{
															Computed: true,
														},
														"field_id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"slug": schema.StringAttribute{
															Computed: true,
														},
														"value": schema.StringAttribute{
															Computed: true,
														},
														"value_array": schema.StringAttribute{
															Computed: true,
														},
														"value_string": schema.StringAttribute{
															Computed: true,
														},
														"value_type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"customer_impact_summary": schema.StringAttribute{
												Computed: true,
											},
											"customers_impacted": schema.Int64Attribute{
												Computed: true,
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"discarded_at": schema.StringAttribute{
												Computed:    true,
												Description: `The time the incident was archived`,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"environments": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"field_requirements": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"field_id": schema.StringAttribute{
															Computed:    true,
															Description: `A unique identifier for the field.`,
														},
														"required_at_milestone_id": schema.StringAttribute{
															Computed:    true,
															Description: `The milestone at which this field is required. If null, this field is always required.`,
														},
													},
												},
											},
											"functionalities": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"id": schema.StringAttribute{
												Computed:    true,
												Description: `UUID of the Incident`,
											},
											"impacts": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"condition": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed:    true,
																	Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
																},
															},
															Description: `SeverityMatrix_ConditionEntity model`,
														},
														"conversations": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"channel": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"comments_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"field": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_class": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_id": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"impact": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["environment", "functionality", "service"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"environment",
																	"functionality",
																	"service",
																),
															},
														},
													},
												},
											},
											"incident_channels": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"icon_url": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"source": schema.StringAttribute{
															Computed: true,
														},
														"source_id": schema.StringAttribute{
															Computed: true,
														},
														"source_name": schema.StringAttribute{
															Computed: true,
														},
														"status": schema.StringAttribute{
															Computed: true,
														},
														"url": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"incident_tickets": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"assignees": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"created_by": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"source": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"due_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"incident_current_milestone": schema.StringAttribute{
															Computed:    true,
															Description: `Milestone of incident that this ticket is related to`,
														},
														"incident_id": schema.StringAttribute{
															Computed:    true,
															Description: `ID of incident that this ticket is related to`,
														},
														"incident_name": schema.StringAttribute{
															Computed:    true,
															Description: `Name of incident that this ticket is related to`,
														},
														"link": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"deletable": schema.BoolAttribute{
																	Computed:    true,
																	Description: `Link can be deleted`,
																},
																"display_text": schema.StringAttribute{
																	Computed: true,
																},
																"editable": schema.BoolAttribute{
																	Computed:    true,
																	Description: `Link can be edited`,
																},
																"href_url": schema.StringAttribute{
																	Computed: true,
																},
																"icon_url": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"type": schema.StringAttribute{
																	Computed: true,
																},
															},
															Description: `Attachments_LinkEntity model`,
														},
														"priority": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
															Description: `Ticketing_PriorityEntity model`,
														},
														"state": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"open",
																	"in_progress",
																	"cancelled",
																	"done",
																),
															},
														},
														"summary": schema.StringAttribute{
															Computed: true,
														},
														"tag_list": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
														},
														"task_id": schema.StringAttribute{
															Computed:    true,
															Description: `ID of task that this ticket is related to`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["incident", "task", "follow_up"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"incident",
																	"task",
																	"follow_up",
																),
															},
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
											},
											"incident_url": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `A key/value of labels`,
											},
											"last_note": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"body": schema.StringAttribute{
														Computed: true,
													},
													"conversations": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"channel": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
																"comments_url": schema.StringAttribute{
																	Computed: true,
																},
																"field": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"resource_class": schema.StringAttribute{
																	Computed: true,
																},
																"resource_id": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"status_pages": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"display_name": schema.StringAttribute{
																	Computed: true,
																},
																"external_id": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"integration": schema.SingleNestedAttribute{
																	Computed: true,
																	Attributes: map[string]schema.Attribute{
																		"created_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																		"display_name": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"integration_name": schema.StringAttribute{
																			Computed: true,
																		},
																		"integration_slug": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"url": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
												},
												Description: `Event_NoteEntity model`,
											},
											"last_update": schema.StringAttribute{
												Computed: true,
											},
											"lifecycle_measurements": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"calculated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"ends_at_milestone": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"slug": schema.StringAttribute{
															Computed: true,
														},
														"starts_at_milestone": schema.StringAttribute{
															Computed: true,
														},
														"value": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"lifecycle_phases": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"description": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"milestones": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"duration": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"occurred_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"position": schema.Int64Attribute{
																		Computed: true,
																	},
																	"slug": schema.StringAttribute{
																		Computed: true,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"updated_by": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"email": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																			"source": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																},
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"position": schema.Int64Attribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"milestones": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"duration": schema.StringAttribute{
															Computed:    true,
															Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"occurred_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
												Description: `DEPRECATED: Please use lifecycle phases instead`,
											},
											"monetary_impact": schema.Int64Attribute{
												Computed: true,
											},
											"monetary_impact_cents": schema.Int64Attribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed:    true,
												Description: `Name of the incident`,
											},
											"number": schema.Int64Attribute{
												Computed:    true,
												Description: `Incident number`,
											},
											"organization": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"organization_id": schema.StringAttribute{
												Computed: true,
											},
											"priority": schema.StringAttribute{
												Computed: true,
											},
											"private_id": schema.StringAttribute{
												Computed: true,
											},
											"private_status_page_url": schema.StringAttribute{
												Computed: true,
											},
											"report_id": schema.StringAttribute{
												Computed: true,
											},
											"role_assignments": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"incident_role": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"description": schema.StringAttribute{
																	Computed: true,
																},
																"discarded_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"summary": schema.StringAttribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
															Description: `IncidentRoleEntity model`,
														},
														"status": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["active", "inactive"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"active",
																	"inactive",
																),
															},
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"user": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"signals_enabled_notification_types": schema.ListAttribute{
																	Computed:    true,
																	ElementType: types.StringType,
																},
																"slack_linked": schema.BoolAttribute{
																	Computed: true,
																},
																"slack_user_id": schema.StringAttribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
														},
													},
												},
											},
											"services": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"severity": schema.StringAttribute{
												Computed: true,
											},
											"severity_color": schema.StringAttribute{
												Computed: true,
											},
											"severity_condition": schema.StringAttribute{
												Computed: true,
											},
											"severity_condition_object": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"position": schema.Int64Attribute{
														Computed:    true,
														Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
													},
												},
												Description: `SeverityMatrix_ConditionEntity model`,
											},
											"severity_impact": schema.StringAttribute{
												Computed: true,
											},
											"severity_impact_object": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"affects_id": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"position": schema.Int64Attribute{
														Computed: true,
													},
													"type": schema.StringAttribute{
														Computed: true,
													},
												},
												Description: `SeverityMatrix_ImpactEntity model`,
											},
											"started_at": schema.StringAttribute{
												Computed:    true,
												Description: `The time the incident started`,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"status_pages": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"display_name": schema.StringAttribute{
															Computed: true,
														},
														"external_id": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"integration": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"display_name": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"integration_name": schema.StringAttribute{
																	Computed: true,
																},
																"integration_slug": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"url": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
											"summary": schema.StringAttribute{
												Computed: true,
											},
											"tag_list": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
											},
											"team_assignments": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"status": schema.StringAttribute{
															Computed: true,
														},
														"team": schema.SingleNestedAttribute{
															Computed:    true,
															Description: `TeamEntity model`,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
											},
											"ticket": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"assignees": schema.ListNestedAttribute{
														Computed: true,
														NestedObject: schema.NestedAttributeObject{
															Attributes: map[string]schema.Attribute{
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"source": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"created_by": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"email": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"due_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"incident_current_milestone": schema.StringAttribute{
														Computed:    true,
														Description: `Milestone of incident that this ticket is related to`,
													},
													"incident_id": schema.StringAttribute{
														Computed:    true,
														Description: `ID of incident that this ticket is related to`,
													},
													"incident_name": schema.StringAttribute{
														Computed:    true,
														Description: `Name of incident that this ticket is related to`,
													},
													"link": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"deletable": schema.BoolAttribute{
																Computed:    true,
																Description: `Link can be deleted`,
															},
															"display_text": schema.StringAttribute{
																Computed: true,
															},
															"editable": schema.BoolAttribute{
																Computed:    true,
																Description: `Link can be edited`,
															},
															"href_url": schema.StringAttribute{
																Computed: true,
															},
															"icon_url": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
														},
														Description: `Attachments_LinkEntity model`,
													},
													"priority": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"position": schema.Int64Attribute{
																Computed: true,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
														Description: `Ticketing_PriorityEntity model`,
													},
													"state": schema.StringAttribute{
														Computed:    true,
														Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"open",
																"in_progress",
																"cancelled",
																"done",
															),
														},
													},
													"summary": schema.StringAttribute{
														Computed: true,
													},
													"tag_list": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
													"task_id": schema.StringAttribute{
														Computed:    true,
														Description: `ID of task that this ticket is related to`,
													},
													"type": schema.StringAttribute{
														Computed:    true,
														Description: `must be one of ["incident", "task", "follow_up"]`,
														Validators: []validator.String{
															stringvalidator.OneOf(
																"incident",
																"task",
																"follow_up",
															),
														},
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
												Description: `Ticketing_TicketEntity model`,
											},
										},
										Description: `IncidentEntity model`,
									},
									"ms_team_id": schema.StringAttribute{
										Computed: true,
									},
									"status": schema.StringAttribute{
										Computed: true,
									},
									"team_name": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"owned_functionalities": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"active_incidents": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `List of active incident guids`,
										},
										"alert_on_add": schema.BoolAttribute{
											Computed: true,
										},
										"auto_add_responding_team": schema.BoolAttribute{
											Computed: true,
										},
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"external_resources": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"connection_id": schema.StringAttribute{
														Computed: true,
													},
													"connection_name": schema.StringAttribute{
														Computed: true,
													},
													"connection_type": schema.StringAttribute{
														Computed: true,
													},
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"remote_id": schema.StringAttribute{
														Computed: true,
													},
													"remote_url": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
											Description: `Information about known linkages to representations of services outside of FireHydrant.`,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"labels": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `An object of label key and values`,
										},
										"links": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"href_url": schema.StringAttribute{
														Computed: true,
													},
													"icon_url": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											Description: `List of links attached to this functionality.`,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"owner": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `TeamEntity model`,
										},
										"slug": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"updated_by": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"email": schema.StringAttribute{
													Computed: true,
												},
												"id": schema.StringAttribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed: true,
												},
												"source": schema.StringAttribute{
													Computed: true,
												},
											},
										},
									},
								},
							},
							"owned_runbooks": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"attachment_rule": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"logic": schema.SingleNestedAttribute{
													Computed:    true,
													Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
												},
												"user_data": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"label": schema.StringAttribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
														"value": schema.StringAttribute{
															Computed: true,
														},
													},
												},
											},
										},
										"categories": schema.StringAttribute{
											Computed:    true,
											Description: `categories the runbook applies to`,
										},
										"created_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
										"description": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"owner": schema.SingleNestedAttribute{
											Computed:    true,
											Description: `TeamEntity model`,
										},
										"summary": schema.StringAttribute{
											Computed: true,
										},
										"type": schema.StringAttribute{
											Computed: true,
										},
										"updated_at": schema.StringAttribute{
											Computed: true,
											Validators: []validator.String{
												validators.IsRFC3339(),
											},
										},
									},
								},
							},
							"signals_ical_url": schema.StringAttribute{
								Computed: true,
							},
							"slack_channel": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"id": schema.StringAttribute{
										Computed: true,
									},
									"name": schema.StringAttribute{
										Computed: true,
									},
									"slack_channel_id": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"slug": schema.StringAttribute{
								Computed: true,
							},
							"updated_at": schema.StringAttribute{
								Computed: true,
								Validators: []validator.String{
									validators.IsRFC3339(),
								},
							},
						},
						Description: `TeamEntity model`,
					},
					"service_checklist_updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"service_tier": schema.Int64Attribute{
						Computed: true,
					},
					"slug": schema.StringAttribute{
						Computed: true,
					},
					"teams": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"created_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
								"created_by": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"email": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"source": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"description": schema.StringAttribute{
									Computed: true,
								},
								"functionalities": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"active_incidents": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `List of active incident guids`,
											},
											"alert_on_add": schema.BoolAttribute{
												Computed: true,
											},
											"auto_add_responding_team": schema.BoolAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"external_resources": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"connection_id": schema.StringAttribute{
															Computed: true,
														},
														"connection_name": schema.StringAttribute{
															Computed: true,
														},
														"connection_type": schema.StringAttribute{
															Computed: true,
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"remote_id": schema.StringAttribute{
															Computed: true,
														},
														"remote_url": schema.StringAttribute{
															Computed: true,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
												Description: `Information about known linkages to representations of services outside of FireHydrant.`,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `An object of label key and values`,
											},
											"links": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"href_url": schema.StringAttribute{
															Computed: true,
														},
														"icon_url": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												Description: `List of links attached to this functionality.`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"owner": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `TeamEntity model`,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"updated_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"id": schema.StringAttribute{
									Computed: true,
								},
								"memberships": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"default_incident_role": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"description": schema.StringAttribute{
														Computed: true,
													},
													"discarded_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"summary": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
												Description: `IncidentRoleEntity model`,
											},
											"schedule": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"discarded": schema.BoolAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"integration": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
												},
											},
											"user": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"created_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"signals_enabled_notification_types": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
													"slack_linked": schema.BoolAttribute{
														Computed: true,
													},
													"slack_user_id": schema.StringAttribute{
														Computed: true,
													},
													"updated_at": schema.StringAttribute{
														Computed: true,
														Validators: []validator.String{
															validators.IsRFC3339(),
														},
													},
												},
											},
										},
									},
								},
								"ms_teams_channel": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"channel_id": schema.StringAttribute{
											Computed: true,
										},
										"channel_name": schema.StringAttribute{
											Computed: true,
										},
										"channel_url": schema.StringAttribute{
											Computed: true,
										},
										"id": schema.StringAttribute{
											Computed: true,
										},
										"incident": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"active": schema.BoolAttribute{
													Computed: true,
												},
												"ai_incident_summary": schema.StringAttribute{
													Computed: true,
												},
												"channel_id": schema.StringAttribute{
													Computed: true,
												},
												"channel_name": schema.StringAttribute{
													Computed: true,
												},
												"channel_reference": schema.StringAttribute{
													Computed: true,
												},
												"channel_status": schema.StringAttribute{
													Computed:    true,
													Description: `inoperative: 0, operational: 1, archived: 2`,
												},
												"conference_bridges": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"context_object": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"context_description": schema.StringAttribute{
															Computed: true,
														},
														"context_tag": schema.StringAttribute{
															Computed: true,
														},
														"object_id": schema.StringAttribute{
															Computed: true,
														},
														"object_type": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"conversations": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"channel": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"comments_url": schema.StringAttribute{
																Computed: true,
															},
															"field": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"resource_class": schema.StringAttribute{
																Computed: true,
															},
															"resource_id": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"created_at": schema.StringAttribute{
													Computed:    true,
													Description: `The time the incident was opened`,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"created_by": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"email": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"source": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"current_milestone": schema.StringAttribute{
													Computed:    true,
													Description: `The type/slug of the current milestone. Will be one of the currently configured milestones for the given incident.`,
												},
												"custom_fields": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"description": schema.StringAttribute{
																Computed: true,
															},
															"display_name": schema.StringAttribute{
																Computed: true,
															},
															"field_id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"slug": schema.StringAttribute{
																Computed: true,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
															"value_array": schema.StringAttribute{
																Computed: true,
															},
															"value_string": schema.StringAttribute{
																Computed: true,
															},
															"value_type": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"customer_impact_summary": schema.StringAttribute{
													Computed: true,
												},
												"customers_impacted": schema.Int64Attribute{
													Computed: true,
												},
												"description": schema.StringAttribute{
													Computed: true,
												},
												"discarded_at": schema.StringAttribute{
													Computed:    true,
													Description: `The time the incident was archived`,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"environments": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"field_requirements": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"field_id": schema.StringAttribute{
																Computed:    true,
																Description: `A unique identifier for the field.`,
															},
															"required_at_milestone_id": schema.StringAttribute{
																Computed:    true,
																Description: `The milestone at which this field is required. If null, this field is always required.`,
															},
														},
													},
												},
												"functionalities": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"id": schema.StringAttribute{
													Computed:    true,
													Description: `UUID of the Incident`,
												},
												"impacts": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"condition": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"position": schema.Int64Attribute{
																		Computed:    true,
																		Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
																	},
																},
																Description: `SeverityMatrix_ConditionEntity model`,
															},
															"conversations": schema.ListNestedAttribute{
																Computed: true,
																NestedObject: schema.NestedAttributeObject{
																	Attributes: map[string]schema.Attribute{
																		"channel": schema.SingleNestedAttribute{
																			Computed: true,
																			Attributes: map[string]schema.Attribute{
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																		"comments_url": schema.StringAttribute{
																			Computed: true,
																		},
																		"field": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"resource_class": schema.StringAttribute{
																			Computed: true,
																		},
																		"resource_id": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"impact": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["environment", "functionality", "service"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"environment",
																		"functionality",
																		"service",
																	),
																},
															},
														},
													},
												},
												"incident_channels": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"icon_url": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"source": schema.StringAttribute{
																Computed: true,
															},
															"source_id": schema.StringAttribute{
																Computed: true,
															},
															"source_name": schema.StringAttribute{
																Computed: true,
															},
															"status": schema.StringAttribute{
																Computed: true,
															},
															"url": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"incident_tickets": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"assignees": schema.ListNestedAttribute{
																Computed: true,
																NestedObject: schema.NestedAttributeObject{
																	Attributes: map[string]schema.Attribute{
																		"email": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																		"source": schema.StringAttribute{
																			Computed: true,
																		},
																	},
																},
															},
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"created_by": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"description": schema.StringAttribute{
																Computed: true,
															},
															"due_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"incident_current_milestone": schema.StringAttribute{
																Computed:    true,
																Description: `Milestone of incident that this ticket is related to`,
															},
															"incident_id": schema.StringAttribute{
																Computed:    true,
																Description: `ID of incident that this ticket is related to`,
															},
															"incident_name": schema.StringAttribute{
																Computed:    true,
																Description: `Name of incident that this ticket is related to`,
															},
															"link": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"deletable": schema.BoolAttribute{
																		Computed:    true,
																		Description: `Link can be deleted`,
																	},
																	"display_text": schema.StringAttribute{
																		Computed: true,
																	},
																	"editable": schema.BoolAttribute{
																		Computed:    true,
																		Description: `Link can be edited`,
																	},
																	"href_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"icon_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"type": schema.StringAttribute{
																		Computed: true,
																	},
																},
																Description: `Attachments_LinkEntity model`,
															},
															"priority": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"position": schema.Int64Attribute{
																		Computed: true,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
																Description: `Ticketing_PriorityEntity model`,
															},
															"state": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"open",
																		"in_progress",
																		"cancelled",
																		"done",
																	),
																},
															},
															"summary": schema.StringAttribute{
																Computed: true,
															},
															"tag_list": schema.ListAttribute{
																Computed:    true,
																ElementType: types.StringType,
															},
															"task_id": schema.StringAttribute{
																Computed:    true,
																Description: `ID of task that this ticket is related to`,
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["incident", "task", "follow_up"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"incident",
																		"task",
																		"follow_up",
																	),
																},
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
													},
												},
												"incident_url": schema.StringAttribute{
													Computed: true,
												},
												"labels": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													Description: `A key/value of labels`,
												},
												"last_note": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"body": schema.StringAttribute{
															Computed: true,
														},
														"conversations": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"channel": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"name": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"comments_url": schema.StringAttribute{
																		Computed: true,
																	},
																	"field": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_class": schema.StringAttribute{
																		Computed: true,
																	},
																	"resource_id": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"status_pages": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"display_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"external_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"integration": schema.SingleNestedAttribute{
																		Computed: true,
																		Attributes: map[string]schema.Attribute{
																			"created_at": schema.StringAttribute{
																				Computed: true,
																				Validators: []validator.String{
																					validators.IsRFC3339(),
																				},
																			},
																			"display_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"id": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration_name": schema.StringAttribute{
																				Computed: true,
																			},
																			"integration_slug": schema.StringAttribute{
																				Computed: true,
																			},
																		},
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"url": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
													},
													Description: `Event_NoteEntity model`,
												},
												"last_update": schema.StringAttribute{
													Computed: true,
												},
												"lifecycle_measurements": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"calculated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"description": schema.StringAttribute{
																Computed: true,
															},
															"ends_at_milestone": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"slug": schema.StringAttribute{
																Computed: true,
															},
															"starts_at_milestone": schema.StringAttribute{
																Computed: true,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"lifecycle_phases": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"description": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"milestones": schema.ListNestedAttribute{
																Computed: true,
																NestedObject: schema.NestedAttributeObject{
																	Attributes: map[string]schema.Attribute{
																		"description": schema.StringAttribute{
																			Computed: true,
																		},
																		"duration": schema.StringAttribute{
																			Computed: true,
																		},
																		"id": schema.StringAttribute{
																			Computed: true,
																		},
																		"name": schema.StringAttribute{
																			Computed: true,
																		},
																		"occurred_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																		"position": schema.Int64Attribute{
																			Computed: true,
																		},
																		"slug": schema.StringAttribute{
																			Computed: true,
																		},
																		"updated_at": schema.StringAttribute{
																			Computed: true,
																			Validators: []validator.String{
																				validators.IsRFC3339(),
																			},
																		},
																		"updated_by": schema.SingleNestedAttribute{
																			Computed: true,
																			Attributes: map[string]schema.Attribute{
																				"email": schema.StringAttribute{
																					Computed: true,
																				},
																				"id": schema.StringAttribute{
																					Computed: true,
																				},
																				"name": schema.StringAttribute{
																					Computed: true,
																				},
																				"source": schema.StringAttribute{
																					Computed: true,
																				},
																			},
																		},
																	},
																},
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"position": schema.Int64Attribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"milestones": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"duration": schema.StringAttribute{
																Computed:    true,
																Description: `How long the incident spent in this milestones, in ISO 8601 Duration Format. This will be null if the milestone is the incident's current milestone.`,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"occurred_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"type": schema.StringAttribute{
																Computed:    true,
																Description: `The milestone's type. This will be one of the currently configured milestones for the given incident.`,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
													},
													Description: `DEPRECATED: Please use lifecycle phases instead`,
												},
												"monetary_impact": schema.Int64Attribute{
													Computed: true,
												},
												"monetary_impact_cents": schema.Int64Attribute{
													Computed: true,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `Name of the incident`,
												},
												"number": schema.Int64Attribute{
													Computed:    true,
													Description: `Incident number`,
												},
												"organization": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												"organization_id": schema.StringAttribute{
													Computed: true,
												},
												"priority": schema.StringAttribute{
													Computed: true,
												},
												"private_id": schema.StringAttribute{
													Computed: true,
												},
												"private_status_page_url": schema.StringAttribute{
													Computed: true,
												},
												"report_id": schema.StringAttribute{
													Computed: true,
												},
												"role_assignments": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"incident_role": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"description": schema.StringAttribute{
																		Computed: true,
																	},
																	"discarded_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"summary": schema.StringAttribute{
																		Computed: true,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
																Description: `IncidentRoleEntity model`,
															},
															"status": schema.StringAttribute{
																Computed:    true,
																Description: `must be one of ["active", "inactive"]`,
																Validators: []validator.String{
																	stringvalidator.OneOf(
																		"active",
																		"inactive",
																	),
																},
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"user": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"signals_enabled_notification_types": schema.ListAttribute{
																		Computed:    true,
																		ElementType: types.StringType,
																	},
																	"slack_linked": schema.BoolAttribute{
																		Computed: true,
																	},
																	"slack_user_id": schema.StringAttribute{
																		Computed: true,
																	},
																	"updated_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																},
															},
														},
													},
												},
												"services": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"id": schema.StringAttribute{
																Computed: true,
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"severity": schema.StringAttribute{
													Computed: true,
												},
												"severity_color": schema.StringAttribute{
													Computed: true,
												},
												"severity_condition": schema.StringAttribute{
													Computed: true,
												},
												"severity_condition_object": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"position": schema.Int64Attribute{
															Computed:    true,
															Description: `Position is used to determine ordering of conditions in API responses and dropdowns. The condition with the lowest position (typically 0) will be considered the Default Condition`,
														},
													},
													Description: `SeverityMatrix_ConditionEntity model`,
												},
												"severity_impact": schema.StringAttribute{
													Computed: true,
												},
												"severity_impact_object": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"affects_id": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"position": schema.Int64Attribute{
															Computed: true,
														},
														"type": schema.StringAttribute{
															Computed: true,
														},
													},
													Description: `SeverityMatrix_ImpactEntity model`,
												},
												"started_at": schema.StringAttribute{
													Computed:    true,
													Description: `The time the incident started`,
													Validators: []validator.String{
														validators.IsRFC3339(),
													},
												},
												"status_pages": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"display_name": schema.StringAttribute{
																Computed: true,
															},
															"external_id": schema.StringAttribute{
																Computed: true,
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"integration": schema.SingleNestedAttribute{
																Computed: true,
																Attributes: map[string]schema.Attribute{
																	"created_at": schema.StringAttribute{
																		Computed: true,
																		Validators: []validator.String{
																			validators.IsRFC3339(),
																		},
																	},
																	"display_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"integration_name": schema.StringAttribute{
																		Computed: true,
																	},
																	"integration_slug": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
															"name": schema.StringAttribute{
																Computed: true,
															},
															"url": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
												"summary": schema.StringAttribute{
													Computed: true,
												},
												"tag_list": schema.ListAttribute{
													Computed:    true,
													ElementType: types.StringType,
												},
												"team_assignments": schema.ListNestedAttribute{
													Computed: true,
													NestedObject: schema.NestedAttributeObject{
														Attributes: map[string]schema.Attribute{
															"created_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
															"id": schema.StringAttribute{
																Computed: true,
															},
															"status": schema.StringAttribute{
																Computed: true,
															},
															"team": schema.SingleNestedAttribute{
																Computed:    true,
																Description: `TeamEntity model`,
															},
															"updated_at": schema.StringAttribute{
																Computed: true,
																Validators: []validator.String{
																	validators.IsRFC3339(),
																},
															},
														},
													},
												},
												"ticket": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"assignees": schema.ListNestedAttribute{
															Computed: true,
															NestedObject: schema.NestedAttributeObject{
																Attributes: map[string]schema.Attribute{
																	"email": schema.StringAttribute{
																		Computed: true,
																	},
																	"id": schema.StringAttribute{
																		Computed: true,
																	},
																	"name": schema.StringAttribute{
																		Computed: true,
																	},
																	"source": schema.StringAttribute{
																		Computed: true,
																	},
																},
															},
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"created_by": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"email": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"source": schema.StringAttribute{
																	Computed: true,
																},
															},
														},
														"description": schema.StringAttribute{
															Computed: true,
														},
														"due_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"incident_current_milestone": schema.StringAttribute{
															Computed:    true,
															Description: `Milestone of incident that this ticket is related to`,
														},
														"incident_id": schema.StringAttribute{
															Computed:    true,
															Description: `ID of incident that this ticket is related to`,
														},
														"incident_name": schema.StringAttribute{
															Computed:    true,
															Description: `Name of incident that this ticket is related to`,
														},
														"link": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"deletable": schema.BoolAttribute{
																	Computed:    true,
																	Description: `Link can be deleted`,
																},
																"display_text": schema.StringAttribute{
																	Computed: true,
																},
																"editable": schema.BoolAttribute{
																	Computed:    true,
																	Description: `Link can be edited`,
																},
																"href_url": schema.StringAttribute{
																	Computed: true,
																},
																"icon_url": schema.StringAttribute{
																	Computed: true,
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"type": schema.StringAttribute{
																	Computed: true,
																},
															},
															Description: `Attachments_LinkEntity model`,
														},
														"priority": schema.SingleNestedAttribute{
															Computed: true,
															Attributes: map[string]schema.Attribute{
																"created_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
																"id": schema.StringAttribute{
																	Computed: true,
																},
																"name": schema.StringAttribute{
																	Computed: true,
																},
																"position": schema.Int64Attribute{
																	Computed: true,
																},
																"updated_at": schema.StringAttribute{
																	Computed: true,
																	Validators: []validator.String{
																		validators.IsRFC3339(),
																	},
																},
															},
															Description: `Ticketing_PriorityEntity model`,
														},
														"state": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["open", "in_progress", "cancelled", "done"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"open",
																	"in_progress",
																	"cancelled",
																	"done",
																),
															},
														},
														"summary": schema.StringAttribute{
															Computed: true,
														},
														"tag_list": schema.ListAttribute{
															Computed:    true,
															ElementType: types.StringType,
														},
														"task_id": schema.StringAttribute{
															Computed:    true,
															Description: `ID of task that this ticket is related to`,
														},
														"type": schema.StringAttribute{
															Computed:    true,
															Description: `must be one of ["incident", "task", "follow_up"]`,
															Validators: []validator.String{
																stringvalidator.OneOf(
																	"incident",
																	"task",
																	"follow_up",
																),
															},
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
													Description: `Ticketing_TicketEntity model`,
												},
											},
											Description: `IncidentEntity model`,
										},
										"ms_team_id": schema.StringAttribute{
											Computed: true,
										},
										"status": schema.StringAttribute{
											Computed: true,
										},
										"team_name": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"name": schema.StringAttribute{
									Computed: true,
								},
								"owned_functionalities": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"active_incidents": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `List of active incident guids`,
											},
											"alert_on_add": schema.BoolAttribute{
												Computed: true,
											},
											"auto_add_responding_team": schema.BoolAttribute{
												Computed: true,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"external_resources": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"connection_id": schema.StringAttribute{
															Computed: true,
														},
														"connection_name": schema.StringAttribute{
															Computed: true,
														},
														"connection_type": schema.StringAttribute{
															Computed: true,
														},
														"created_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
														"remote_id": schema.StringAttribute{
															Computed: true,
														},
														"remote_url": schema.StringAttribute{
															Computed: true,
														},
														"updated_at": schema.StringAttribute{
															Computed: true,
															Validators: []validator.String{
																validators.IsRFC3339(),
															},
														},
													},
												},
												Description: `Information about known linkages to representations of services outside of FireHydrant.`,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"labels": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `An object of label key and values`,
											},
											"links": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"href_url": schema.StringAttribute{
															Computed: true,
														},
														"icon_url": schema.StringAttribute{
															Computed: true,
														},
														"id": schema.StringAttribute{
															Computed: true,
														},
														"name": schema.StringAttribute{
															Computed: true,
														},
													},
												},
												Description: `List of links attached to this functionality.`,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"owner": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `TeamEntity model`,
											},
											"slug": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"updated_by": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"email": schema.StringAttribute{
														Computed: true,
													},
													"id": schema.StringAttribute{
														Computed: true,
													},
													"name": schema.StringAttribute{
														Computed: true,
													},
													"source": schema.StringAttribute{
														Computed: true,
													},
												},
											},
										},
									},
								},
								"owned_runbooks": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"attachment_rule": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"logic": schema.SingleNestedAttribute{
														Computed:    true,
														Description: `An unstructured object of key/value pairs describing the logic for applying the rule.`,
													},
													"user_data": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"label": schema.StringAttribute{
																Computed: true,
															},
															"type": schema.StringAttribute{
																Computed: true,
															},
															"value": schema.StringAttribute{
																Computed: true,
															},
														},
													},
												},
											},
											"categories": schema.StringAttribute{
												Computed:    true,
												Description: `categories the runbook applies to`,
											},
											"created_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
											"description": schema.StringAttribute{
												Computed: true,
											},
											"id": schema.StringAttribute{
												Computed: true,
											},
											"name": schema.StringAttribute{
												Computed: true,
											},
											"owner": schema.SingleNestedAttribute{
												Computed:    true,
												Description: `TeamEntity model`,
											},
											"summary": schema.StringAttribute{
												Computed: true,
											},
											"type": schema.StringAttribute{
												Computed: true,
											},
											"updated_at": schema.StringAttribute{
												Computed: true,
												Validators: []validator.String{
													validators.IsRFC3339(),
												},
											},
										},
									},
								},
								"signals_ical_url": schema.StringAttribute{
									Computed: true,
								},
								"slack_channel": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"id": schema.StringAttribute{
											Computed: true,
										},
										"name": schema.StringAttribute{
											Computed: true,
										},
										"slack_channel_id": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"slug": schema.StringAttribute{
									Computed: true,
								},
								"updated_at": schema.StringAttribute{
									Computed: true,
									Validators: []validator.String{
										validators.IsRFC3339(),
									},
								},
							},
						},
						Description: `List of teams attached to the service`,
					},
					"updated_at": schema.StringAttribute{
						Computed: true,
						Validators: []validator.String{
							validators.IsRFC3339(),
						},
					},
					"updated_by": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"email": schema.StringAttribute{
								Computed: true,
							},
							"id": schema.StringAttribute{
								Computed: true,
							},
							"name": schema.StringAttribute{
								Computed: true,
							},
							"source": schema.StringAttribute{
								Computed: true,
							},
						},
					},
				},
				Description: `ServiceEntity model`,
			},
			"service_id": schema.StringAttribute{
				Required: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Description: `Requires replacement if changed.`,
			},
			"updated_at": schema.StringAttribute{
				Computed: true,
				Validators: []validator.String{
					validators.IsRFC3339(),
				},
			},
		},
	}
}

func (r *ServiceDependencyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.FirehydrantTerraformSDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.FirehydrantTerraformSDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *ServiceDependencyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *ServiceDependencyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedPostV1ServiceDependencies()
	res, err := r.client.ServiceDependencies.Create(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 201 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ServiceDependencyEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedServiceDependencyEntity(res.ServiceDependencyEntity)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	var serviceDependencyID string
	serviceDependencyID = data.ID.ValueString()

	request1 := operations.GetV1ServiceDependenciesServiceDependencyIDRequest{
		ServiceDependencyID: serviceDependencyID,
	}
	res1, err := r.client.ServiceDependencies.Get(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if !(res1.ServiceDependencyEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedServiceDependencyEntity(res1.ServiceDependencyEntity)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ServiceDependencyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *ServiceDependencyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var serviceDependencyID string
	serviceDependencyID = data.ID.ValueString()

	request := operations.GetV1ServiceDependenciesServiceDependencyIDRequest{
		ServiceDependencyID: serviceDependencyID,
	}
	res, err := r.client.ServiceDependencies.Get(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ServiceDependencyEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedServiceDependencyEntity(res.ServiceDependencyEntity)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ServiceDependencyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *ServiceDependencyResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	var serviceDependencyID string
	serviceDependencyID = data.ID.ValueString()

	patchV1ServiceDependenciesServiceDependencyID := *data.ToSharedPatchV1ServiceDependenciesServiceDependencyID()
	request := operations.PatchV1ServiceDependenciesServiceDependencyIDRequest{
		ServiceDependencyID:                           serviceDependencyID,
		PatchV1ServiceDependenciesServiceDependencyID: patchV1ServiceDependenciesServiceDependencyID,
	}
	res, err := r.client.ServiceDependencies.Update(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.ServiceDependencyEntity != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedServiceDependencyEntity(res.ServiceDependencyEntity)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *ServiceDependencyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *ServiceDependencyResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var serviceDependencyID string
	serviceDependencyID = data.ID.ValueString()

	request := operations.DeleteV1ServiceDependenciesServiceDependencyIDRequest{
		ServiceDependencyID: serviceDependencyID,
	}
	res, err := r.client.ServiceDependencies.Delete(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *ServiceDependencyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), req.ID)...)
}
