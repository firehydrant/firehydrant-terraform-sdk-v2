// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk"
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"net/http"
)

var _ provider.Provider = &FirehydrantProvider{}

type FirehydrantProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// FirehydrantProviderModel describes the provider data model.
type FirehydrantProviderModel struct {
	ServerURL types.String `tfsdk:"server_url"`
	APIKey    types.String `tfsdk:"api_key"`
}

func (p *FirehydrantProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "firehydrant"
	resp.Version = p.version
}

func (p *FirehydrantProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"server_url": schema.StringAttribute{
				MarkdownDescription: "Server URL (defaults to https://api.firehydrant.io)",
				Optional:            true,
				Required:            false,
			},
			"api_key": schema.StringAttribute{
				Sensitive: true,
				Optional:  true,
			},
		},
	}
}

func (p *FirehydrantProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data FirehydrantProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" {
		ServerURL = "https://api.firehydrant.io"
	}

	apiKey := new(string)
	if !data.APIKey.IsUnknown() && !data.APIKey.IsNull() {
		*apiKey = data.APIKey.ValueString()
	} else {
		apiKey = nil
	}
	security := shared.Security{
		APIKey: apiKey,
	}

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
		sdk.WithClient(http.DefaultClient),
	}
	client := sdk.New(opts...)

	resp.DataSourceData = client
	resp.ResourceData = client
}

func (p *FirehydrantProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewChecklistTemplateResource,
		NewEnvironmentResource,
		NewFunctionalityResource,
		NewIncidentRoleResource,
		NewIncidentTypeResource,
		NewPriorityResource,
		NewRunbookResource,
		NewServiceResource,
		NewServiceDependencyResource,
		NewSeverityResource,
		NewStatusUpdateTemplateResource,
		NewTaskListResource,
		NewTeamResource,
		NewWebhookResource,
	}
}

func (p *FirehydrantProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewChecklistTemplateDataSource,
		NewChecklistTemplatesDataSource,
		NewEnvironmentDataSource,
		NewEnvironmentsDataSource,
		NewFunctionalitiesDataSource,
		NewFunctionalityDataSource,
		NewIncidentRoleDataSource,
		NewIncidentTypeDataSource,
		NewIncidentTypesDataSource,
		NewPrioritiesDataSource,
		NewPriorityDataSource,
		NewRunbookDataSource,
		NewRunbooksDataSource,
		NewServiceDataSource,
		NewServiceDependencyDataSource,
		NewServicesDataSource,
		NewSeveritiesDataSource,
		NewSeverityDataSource,
		NewStatusUpdateTemplateDataSource,
		NewStatusUpdateTemplatesDataSource,
		NewTaskListDataSource,
		NewTaskListsDataSource,
		NewTeamDataSource,
		NewTeamsDataSource,
		NewUsersDataSource,
		NewWebhookDataSource,
		NewWebhooksDataSource,
		NewWebhookTargetDataSource,
	}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &FirehydrantProvider{
			version: version,
		}
	}
}
