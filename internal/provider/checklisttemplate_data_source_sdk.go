// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"time"
)

func (r *ChecklistTemplateDataSourceModel) RefreshFromSharedChecklistTemplateEntity(resp *shared.ChecklistTemplateEntity) {
	if resp != nil {
		r.Checks = []tfTypes.ChecklistCheckEntity{}
		if len(r.Checks) > len(resp.Checks) {
			r.Checks = r.Checks[:len(resp.Checks)]
		}
		for checksCount, checksItem := range resp.Checks {
			var checks1 tfTypes.ChecklistCheckEntity
			checks1.Description = types.StringPointerValue(checksItem.Description)
			checks1.ID = types.StringPointerValue(checksItem.ID)
			checks1.Name = types.StringPointerValue(checksItem.Name)
			checks1.Status = types.BoolPointerValue(checksItem.Status)
			if checksCount+1 > len(r.Checks) {
				r.Checks = append(r.Checks, checks1)
			} else {
				r.Checks[checksCount].Description = checks1.Description
				r.Checks[checksCount].ID = checks1.ID
				r.Checks[checksCount].Name = checks1.Name
				r.Checks[checksCount].Status = checks1.Status
			}
		}
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Owner == nil {
			r.Owner = nil
		} else {
			r.Owner = &tfTypes.TeamEntity{}
			if resp.Owner.CreatedAt != nil {
				r.Owner.CreatedAt = types.StringValue(resp.Owner.CreatedAt.Format(time.RFC3339Nano))
			} else {
				r.Owner.CreatedAt = types.StringNull()
			}
			if resp.Owner.CreatedBy == nil {
				r.Owner.CreatedBy = nil
			} else {
				r.Owner.CreatedBy = &tfTypes.AuthorEntity{}
				r.Owner.CreatedBy.Email = types.StringPointerValue(resp.Owner.CreatedBy.Email)
				r.Owner.CreatedBy.ID = types.StringPointerValue(resp.Owner.CreatedBy.ID)
				r.Owner.CreatedBy.Name = types.StringPointerValue(resp.Owner.CreatedBy.Name)
				r.Owner.CreatedBy.Source = types.StringPointerValue(resp.Owner.CreatedBy.Source)
			}
			r.Owner.Description = types.StringPointerValue(resp.Owner.Description)
			r.Owner.Functionalities = []tfTypes.FunctionalityEntity{}
			if len(r.Owner.Functionalities) > len(resp.Owner.Functionalities) {
				r.Owner.Functionalities = r.Owner.Functionalities[:len(resp.Owner.Functionalities)]
			}
			for functionalitiesCount, functionalitiesItem := range resp.Owner.Functionalities {
				var functionalities1 tfTypes.FunctionalityEntity
				functionalities1.ActiveIncidents = []types.String{}
				for _, v := range functionalitiesItem.ActiveIncidents {
					functionalities1.ActiveIncidents = append(functionalities1.ActiveIncidents, types.StringValue(v))
				}
				functionalities1.AlertOnAdd = types.BoolPointerValue(functionalitiesItem.AlertOnAdd)
				functionalities1.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem.AutoAddRespondingTeam)
				if functionalitiesItem.CreatedAt != nil {
					functionalities1.CreatedAt = types.StringValue(functionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					functionalities1.CreatedAt = types.StringNull()
				}
				functionalities1.Description = types.StringPointerValue(functionalitiesItem.Description)
				functionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
				for externalResourcesCount, externalResourcesItem := range functionalitiesItem.ExternalResources {
					var externalResources1 tfTypes.ExternalResourceEntity
					externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
					externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
					externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
					if externalResourcesItem.CreatedAt != nil {
						externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources1.CreatedAt = types.StringNull()
					}
					externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
					externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
					externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
					if externalResourcesItem.UpdatedAt != nil {
						externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources1.UpdatedAt = types.StringNull()
					}
					if externalResourcesCount+1 > len(functionalities1.ExternalResources) {
						functionalities1.ExternalResources = append(functionalities1.ExternalResources, externalResources1)
					} else {
						functionalities1.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
						functionalities1.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
						functionalities1.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
						functionalities1.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
						functionalities1.ExternalResources[externalResourcesCount].Name = externalResources1.Name
						functionalities1.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
						functionalities1.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
						functionalities1.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
					}
				}
				functionalities1.ID = types.StringPointerValue(functionalitiesItem.ID)
				if len(functionalitiesItem.Labels) > 0 {
					functionalities1.Labels = make(map[string]types.String)
					for key, value := range functionalitiesItem.Labels {
						functionalities1.Labels[key] = types.StringValue(value)
					}
				}
				functionalities1.Links = []tfTypes.LinksEntity{}
				for linksCount, linksItem := range functionalitiesItem.Links {
					var links1 tfTypes.LinksEntity
					links1.HrefURL = types.StringPointerValue(linksItem.HrefURL)
					links1.IconURL = types.StringPointerValue(linksItem.IconURL)
					links1.ID = types.StringPointerValue(linksItem.ID)
					links1.Name = types.StringPointerValue(linksItem.Name)
					if linksCount+1 > len(functionalities1.Links) {
						functionalities1.Links = append(functionalities1.Links, links1)
					} else {
						functionalities1.Links[linksCount].HrefURL = links1.HrefURL
						functionalities1.Links[linksCount].IconURL = links1.IconURL
						functionalities1.Links[linksCount].ID = links1.ID
						functionalities1.Links[linksCount].Name = links1.Name
					}
				}
				functionalities1.Name = types.StringPointerValue(functionalitiesItem.Name)
				if functionalitiesItem.Owner == nil {
					functionalities1.Owner = nil
				} else {
					functionalities1.Owner = &tfTypes.TeamEntity1{}
				}
				functionalities1.Slug = types.StringPointerValue(functionalitiesItem.Slug)
				if functionalitiesItem.UpdatedAt != nil {
					functionalities1.UpdatedAt = types.StringValue(functionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					functionalities1.UpdatedAt = types.StringNull()
				}
				if functionalitiesItem.UpdatedBy == nil {
					functionalities1.UpdatedBy = nil
				} else {
					functionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
					functionalities1.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem.UpdatedBy.Email)
					functionalities1.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem.UpdatedBy.ID)
					functionalities1.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem.UpdatedBy.Name)
					functionalities1.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem.UpdatedBy.Source)
				}
				if functionalitiesCount+1 > len(r.Owner.Functionalities) {
					r.Owner.Functionalities = append(r.Owner.Functionalities, functionalities1)
				} else {
					r.Owner.Functionalities[functionalitiesCount].ActiveIncidents = functionalities1.ActiveIncidents
					r.Owner.Functionalities[functionalitiesCount].AlertOnAdd = functionalities1.AlertOnAdd
					r.Owner.Functionalities[functionalitiesCount].AutoAddRespondingTeam = functionalities1.AutoAddRespondingTeam
					r.Owner.Functionalities[functionalitiesCount].CreatedAt = functionalities1.CreatedAt
					r.Owner.Functionalities[functionalitiesCount].Description = functionalities1.Description
					r.Owner.Functionalities[functionalitiesCount].ExternalResources = functionalities1.ExternalResources
					r.Owner.Functionalities[functionalitiesCount].ID = functionalities1.ID
					r.Owner.Functionalities[functionalitiesCount].Labels = functionalities1.Labels
					r.Owner.Functionalities[functionalitiesCount].Links = functionalities1.Links
					r.Owner.Functionalities[functionalitiesCount].Name = functionalities1.Name
					r.Owner.Functionalities[functionalitiesCount].Owner = functionalities1.Owner
					r.Owner.Functionalities[functionalitiesCount].Slug = functionalities1.Slug
					r.Owner.Functionalities[functionalitiesCount].UpdatedAt = functionalities1.UpdatedAt
					r.Owner.Functionalities[functionalitiesCount].UpdatedBy = functionalities1.UpdatedBy
				}
			}
			r.Owner.ID = types.StringPointerValue(resp.Owner.ID)
			r.Owner.Memberships = []tfTypes.MembershipEntity{}
			if len(r.Owner.Memberships) > len(resp.Owner.Memberships) {
				r.Owner.Memberships = r.Owner.Memberships[:len(resp.Owner.Memberships)]
			}
			for membershipsCount, membershipsItem := range resp.Owner.Memberships {
				var memberships1 tfTypes.MembershipEntity
				if membershipsItem.DefaultIncidentRole == nil {
					memberships1.DefaultIncidentRole = nil
				} else {
					memberships1.DefaultIncidentRole = &tfTypes.IncidentRoleEntity{}
					if membershipsItem.DefaultIncidentRole.CreatedAt != nil {
						memberships1.DefaultIncidentRole.CreatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.CreatedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.DefaultIncidentRole.CreatedAt = types.StringNull()
					}
					memberships1.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Description)
					if membershipsItem.DefaultIncidentRole.DiscardedAt != nil {
						memberships1.DefaultIncidentRole.DiscardedAt = types.StringValue(membershipsItem.DefaultIncidentRole.DiscardedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.DefaultIncidentRole.DiscardedAt = types.StringNull()
					}
					memberships1.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem.DefaultIncidentRole.ID)
					memberships1.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Name)
					memberships1.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Summary)
					if membershipsItem.DefaultIncidentRole.UpdatedAt != nil {
						memberships1.DefaultIncidentRole.UpdatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.DefaultIncidentRole.UpdatedAt = types.StringNull()
					}
				}
				if membershipsItem.Schedule == nil {
					memberships1.Schedule = nil
				} else {
					memberships1.Schedule = &tfTypes.ScheduleEntity{}
					memberships1.Schedule.Discarded = types.BoolPointerValue(membershipsItem.Schedule.Discarded)
					memberships1.Schedule.ID = types.StringPointerValue(membershipsItem.Schedule.ID)
					memberships1.Schedule.Integration = types.StringPointerValue(membershipsItem.Schedule.Integration)
					memberships1.Schedule.Name = types.StringPointerValue(membershipsItem.Schedule.Name)
				}
				if membershipsItem.User == nil {
					memberships1.User = nil
				} else {
					memberships1.User = &tfTypes.UserEntity{}
					if membershipsItem.User.CreatedAt != nil {
						memberships1.User.CreatedAt = types.StringValue(membershipsItem.User.CreatedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.User.CreatedAt = types.StringNull()
					}
					memberships1.User.Email = types.StringPointerValue(membershipsItem.User.Email)
					memberships1.User.ID = types.StringPointerValue(membershipsItem.User.ID)
					memberships1.User.Name = types.StringPointerValue(membershipsItem.User.Name)
					memberships1.User.SignalsEnabledNotificationTypes = []types.String{}
					for _, v := range membershipsItem.User.SignalsEnabledNotificationTypes {
						memberships1.User.SignalsEnabledNotificationTypes = append(memberships1.User.SignalsEnabledNotificationTypes, types.StringValue(v))
					}
					memberships1.User.SlackLinked = types.BoolPointerValue(membershipsItem.User.SlackLinked)
					memberships1.User.SlackUserID = types.StringPointerValue(membershipsItem.User.SlackUserID)
					if membershipsItem.User.UpdatedAt != nil {
						memberships1.User.UpdatedAt = types.StringValue(membershipsItem.User.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.User.UpdatedAt = types.StringNull()
					}
				}
				if membershipsCount+1 > len(r.Owner.Memberships) {
					r.Owner.Memberships = append(r.Owner.Memberships, memberships1)
				} else {
					r.Owner.Memberships[membershipsCount].DefaultIncidentRole = memberships1.DefaultIncidentRole
					r.Owner.Memberships[membershipsCount].Schedule = memberships1.Schedule
					r.Owner.Memberships[membershipsCount].User = memberships1.User
				}
			}
			if resp.Owner.MsTeamsChannel == nil {
				r.Owner.MsTeamsChannel = nil
			} else {
				r.Owner.MsTeamsChannel = &tfTypes.IntegrationsMicrosoftTeamsV2ChannelEntity{}
				r.Owner.MsTeamsChannel.ChannelID = types.StringPointerValue(resp.Owner.MsTeamsChannel.ChannelID)
				r.Owner.MsTeamsChannel.ChannelName = types.StringPointerValue(resp.Owner.MsTeamsChannel.ChannelName)
				r.Owner.MsTeamsChannel.ChannelURL = types.StringPointerValue(resp.Owner.MsTeamsChannel.ChannelURL)
				r.Owner.MsTeamsChannel.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.ID)
				r.Owner.MsTeamsChannel.MsTeamID = types.StringPointerValue(resp.Owner.MsTeamsChannel.MsTeamID)
				r.Owner.MsTeamsChannel.Status = types.StringPointerValue(resp.Owner.MsTeamsChannel.Status)
				r.Owner.MsTeamsChannel.TeamName = types.StringPointerValue(resp.Owner.MsTeamsChannel.TeamName)
			}
			r.Owner.Name = types.StringPointerValue(resp.Owner.Name)
			r.Owner.OwnedFunctionalities = []tfTypes.FunctionalityEntity{}
			if len(r.Owner.OwnedFunctionalities) > len(resp.Owner.OwnedFunctionalities) {
				r.Owner.OwnedFunctionalities = r.Owner.OwnedFunctionalities[:len(resp.Owner.OwnedFunctionalities)]
			}
			for ownedFunctionalitiesCount, ownedFunctionalitiesItem := range resp.Owner.OwnedFunctionalities {
				var ownedFunctionalities1 tfTypes.FunctionalityEntity
				ownedFunctionalities1.ActiveIncidents = []types.String{}
				for _, v := range ownedFunctionalitiesItem.ActiveIncidents {
					ownedFunctionalities1.ActiveIncidents = append(ownedFunctionalities1.ActiveIncidents, types.StringValue(v))
				}
				ownedFunctionalities1.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem.AlertOnAdd)
				ownedFunctionalities1.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem.AutoAddRespondingTeam)
				if ownedFunctionalitiesItem.CreatedAt != nil {
					ownedFunctionalities1.CreatedAt = types.StringValue(ownedFunctionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					ownedFunctionalities1.CreatedAt = types.StringNull()
				}
				ownedFunctionalities1.Description = types.StringPointerValue(ownedFunctionalitiesItem.Description)
				ownedFunctionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
				for externalResourcesCount1, externalResourcesItem1 := range ownedFunctionalitiesItem.ExternalResources {
					var externalResources3 tfTypes.ExternalResourceEntity
					externalResources3.ConnectionID = types.StringPointerValue(externalResourcesItem1.ConnectionID)
					externalResources3.ConnectionName = types.StringPointerValue(externalResourcesItem1.ConnectionName)
					externalResources3.ConnectionType = types.StringPointerValue(externalResourcesItem1.ConnectionType)
					if externalResourcesItem1.CreatedAt != nil {
						externalResources3.CreatedAt = types.StringValue(externalResourcesItem1.CreatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources3.CreatedAt = types.StringNull()
					}
					externalResources3.Name = types.StringPointerValue(externalResourcesItem1.Name)
					externalResources3.RemoteID = types.StringPointerValue(externalResourcesItem1.RemoteID)
					externalResources3.RemoteURL = types.StringPointerValue(externalResourcesItem1.RemoteURL)
					if externalResourcesItem1.UpdatedAt != nil {
						externalResources3.UpdatedAt = types.StringValue(externalResourcesItem1.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources3.UpdatedAt = types.StringNull()
					}
					if externalResourcesCount1+1 > len(ownedFunctionalities1.ExternalResources) {
						ownedFunctionalities1.ExternalResources = append(ownedFunctionalities1.ExternalResources, externalResources3)
					} else {
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionID = externalResources3.ConnectionID
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionName = externalResources3.ConnectionName
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionType = externalResources3.ConnectionType
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].CreatedAt = externalResources3.CreatedAt
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].Name = externalResources3.Name
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteID = externalResources3.RemoteID
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteURL = externalResources3.RemoteURL
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].UpdatedAt = externalResources3.UpdatedAt
					}
				}
				ownedFunctionalities1.ID = types.StringPointerValue(ownedFunctionalitiesItem.ID)
				if len(ownedFunctionalitiesItem.Labels) > 0 {
					ownedFunctionalities1.Labels = make(map[string]types.String)
					for key1, value1 := range ownedFunctionalitiesItem.Labels {
						ownedFunctionalities1.Labels[key1] = types.StringValue(value1)
					}
				}
				ownedFunctionalities1.Links = []tfTypes.LinksEntity{}
				for linksCount1, linksItem1 := range ownedFunctionalitiesItem.Links {
					var links3 tfTypes.LinksEntity
					links3.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
					links3.IconURL = types.StringPointerValue(linksItem1.IconURL)
					links3.ID = types.StringPointerValue(linksItem1.ID)
					links3.Name = types.StringPointerValue(linksItem1.Name)
					if linksCount1+1 > len(ownedFunctionalities1.Links) {
						ownedFunctionalities1.Links = append(ownedFunctionalities1.Links, links3)
					} else {
						ownedFunctionalities1.Links[linksCount1].HrefURL = links3.HrefURL
						ownedFunctionalities1.Links[linksCount1].IconURL = links3.IconURL
						ownedFunctionalities1.Links[linksCount1].ID = links3.ID
						ownedFunctionalities1.Links[linksCount1].Name = links3.Name
					}
				}
				ownedFunctionalities1.Name = types.StringPointerValue(ownedFunctionalitiesItem.Name)
				if ownedFunctionalitiesItem.Owner == nil {
					ownedFunctionalities1.Owner = nil
				} else {
					ownedFunctionalities1.Owner = &tfTypes.TeamEntity1{}
				}
				ownedFunctionalities1.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Slug)
				if ownedFunctionalitiesItem.UpdatedAt != nil {
					ownedFunctionalities1.UpdatedAt = types.StringValue(ownedFunctionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					ownedFunctionalities1.UpdatedAt = types.StringNull()
				}
				if ownedFunctionalitiesItem.UpdatedBy == nil {
					ownedFunctionalities1.UpdatedBy = nil
				} else {
					ownedFunctionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
					ownedFunctionalities1.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Email)
					ownedFunctionalities1.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.ID)
					ownedFunctionalities1.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Name)
					ownedFunctionalities1.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Source)
				}
				if ownedFunctionalitiesCount+1 > len(r.Owner.OwnedFunctionalities) {
					r.Owner.OwnedFunctionalities = append(r.Owner.OwnedFunctionalities, ownedFunctionalities1)
				} else {
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ActiveIncidents = ownedFunctionalities1.ActiveIncidents
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].AlertOnAdd = ownedFunctionalities1.AlertOnAdd
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].AutoAddRespondingTeam = ownedFunctionalities1.AutoAddRespondingTeam
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].CreatedAt = ownedFunctionalities1.CreatedAt
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Description = ownedFunctionalities1.Description
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ExternalResources = ownedFunctionalities1.ExternalResources
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ID = ownedFunctionalities1.ID
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Labels = ownedFunctionalities1.Labels
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Links = ownedFunctionalities1.Links
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Name = ownedFunctionalities1.Name
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Owner = ownedFunctionalities1.Owner
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Slug = ownedFunctionalities1.Slug
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedAt = ownedFunctionalities1.UpdatedAt
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedBy = ownedFunctionalities1.UpdatedBy
				}
			}
			r.Owner.OwnedRunbooks = []tfTypes.SlimRunbookEntity{}
			if len(r.Owner.OwnedRunbooks) > len(resp.Owner.OwnedRunbooks) {
				r.Owner.OwnedRunbooks = r.Owner.OwnedRunbooks[:len(resp.Owner.OwnedRunbooks)]
			}
			for ownedRunbooksCount, ownedRunbooksItem := range resp.Owner.OwnedRunbooks {
				var ownedRunbooks1 tfTypes.SlimRunbookEntity
				if ownedRunbooksItem.AttachmentRule == nil {
					ownedRunbooks1.AttachmentRule = nil
				} else {
					ownedRunbooks1.AttachmentRule = &tfTypes.RulesRuleEntity{}
					if ownedRunbooksItem.AttachmentRule.Logic == nil {
						ownedRunbooks1.AttachmentRule.Logic = nil
					} else {
						ownedRunbooks1.AttachmentRule.Logic = &tfTypes.TeamEntity1{}
					}
					if ownedRunbooksItem.AttachmentRule.UserData == nil {
						ownedRunbooks1.AttachmentRule.UserData = nil
					} else {
						ownedRunbooks1.AttachmentRule.UserData = &tfTypes.FHTypesGenericEntity{}
						ownedRunbooks1.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Label)
						ownedRunbooks1.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Type)
						ownedRunbooks1.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Value)
					}
				}
				ownedRunbooks1.Categories = types.StringPointerValue(ownedRunbooksItem.Categories)
				if ownedRunbooksItem.CreatedAt != nil {
					ownedRunbooks1.CreatedAt = types.StringValue(ownedRunbooksItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					ownedRunbooks1.CreatedAt = types.StringNull()
				}
				ownedRunbooks1.Description = types.StringPointerValue(ownedRunbooksItem.Description)
				ownedRunbooks1.ID = types.StringPointerValue(ownedRunbooksItem.ID)
				ownedRunbooks1.Name = types.StringPointerValue(ownedRunbooksItem.Name)
				if ownedRunbooksItem.Owner == nil {
					ownedRunbooks1.Owner = nil
				} else {
					ownedRunbooks1.Owner = &tfTypes.TeamEntity1{}
				}
				ownedRunbooks1.Summary = types.StringPointerValue(ownedRunbooksItem.Summary)
				ownedRunbooks1.Type = types.StringPointerValue(ownedRunbooksItem.Type)
				if ownedRunbooksItem.UpdatedAt != nil {
					ownedRunbooks1.UpdatedAt = types.StringValue(ownedRunbooksItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					ownedRunbooks1.UpdatedAt = types.StringNull()
				}
				if ownedRunbooksCount+1 > len(r.Owner.OwnedRunbooks) {
					r.Owner.OwnedRunbooks = append(r.Owner.OwnedRunbooks, ownedRunbooks1)
				} else {
					r.Owner.OwnedRunbooks[ownedRunbooksCount].AttachmentRule = ownedRunbooks1.AttachmentRule
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Categories = ownedRunbooks1.Categories
					r.Owner.OwnedRunbooks[ownedRunbooksCount].CreatedAt = ownedRunbooks1.CreatedAt
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Description = ownedRunbooks1.Description
					r.Owner.OwnedRunbooks[ownedRunbooksCount].ID = ownedRunbooks1.ID
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Name = ownedRunbooks1.Name
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Owner = ownedRunbooks1.Owner
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Summary = ownedRunbooks1.Summary
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Type = ownedRunbooks1.Type
					r.Owner.OwnedRunbooks[ownedRunbooksCount].UpdatedAt = ownedRunbooks1.UpdatedAt
				}
			}
			r.Owner.SignalsIcalURL = types.StringPointerValue(resp.Owner.SignalsIcalURL)
			if resp.Owner.SlackChannel == nil {
				r.Owner.SlackChannel = nil
			} else {
				r.Owner.SlackChannel = &tfTypes.IntegrationsSlackSlackChannelEntity{}
				r.Owner.SlackChannel.ID = types.StringPointerValue(resp.Owner.SlackChannel.ID)
				r.Owner.SlackChannel.Name = types.StringPointerValue(resp.Owner.SlackChannel.Name)
				r.Owner.SlackChannel.SlackChannelID = types.StringPointerValue(resp.Owner.SlackChannel.SlackChannelID)
			}
			r.Owner.Slug = types.StringPointerValue(resp.Owner.Slug)
			if resp.Owner.UpdatedAt != nil {
				r.Owner.UpdatedAt = types.StringValue(resp.Owner.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				r.Owner.UpdatedAt = types.StringNull()
			}
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
	}
}
