// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"time"
)

func (r *IncidentTypeResourceModel) ToSharedPostV1IncidentTypes() *shared.PostV1IncidentTypes {
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Template.Description.IsUnknown() && !r.Template.Description.IsNull() {
		*description = r.Template.Description.ValueString()
	} else {
		description = nil
	}
	customerImpactSummary := new(string)
	if !r.Template.CustomerImpactSummary.IsUnknown() && !r.Template.CustomerImpactSummary.IsNull() {
		*customerImpactSummary = r.Template.CustomerImpactSummary.ValueString()
	} else {
		customerImpactSummary = nil
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Template.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	severity := new(string)
	if !r.Template.Severity.IsUnknown() && !r.Template.Severity.IsNull() {
		*severity = r.Template.Severity.ValueString()
	} else {
		severity = nil
	}
	priority := new(string)
	if !r.Template.Priority.IsUnknown() && !r.Template.Priority.IsNull() {
		*priority = r.Template.Priority.ValueString()
	} else {
		priority = nil
	}
	var tagList []string = []string{}
	for _, tagListItem := range r.Template.TagList {
		tagList = append(tagList, tagListItem.ValueString())
	}
	var runbookIds []string = []string{}
	for _, runbookIdsItem := range r.Template.RunbookIds {
		runbookIds = append(runbookIds, runbookIdsItem.ValueString())
	}
	privateIncident := new(bool)
	if !r.Template.PrivateIncident.IsUnknown() && !r.Template.PrivateIncident.IsNull() {
		*privateIncident = r.Template.PrivateIncident.ValueBool()
	} else {
		privateIncident = nil
	}
	var teamIds []string = []string{}
	for _, teamIdsItem := range r.Template.TeamIds {
		teamIds = append(teamIds, teamIdsItem.ValueString())
	}
	var impacts []shared.PostV1IncidentTypesImpacts = []shared.PostV1IncidentTypesImpacts{}
	for _, impactsItem := range r.Template.Impacts {
		var id string
		id = impactsItem.ID.ValueString()

		var conditionID string
		conditionID = impactsItem.ConditionID.ValueString()

		impacts = append(impacts, shared.PostV1IncidentTypesImpacts{
			ID:          id,
			ConditionID: conditionID,
		})
	}
	template := shared.Template{
		Description:           description,
		CustomerImpactSummary: customerImpactSummary,
		Labels:                labels,
		Severity:              severity,
		Priority:              priority,
		TagList:               tagList,
		RunbookIds:            runbookIds,
		PrivateIncident:       privateIncident,
		TeamIds:               teamIds,
		Impacts:               impacts,
	}
	out := shared.PostV1IncidentTypes{
		Name:     name,
		Template: template,
	}
	return &out
}

func (r *IncidentTypeResourceModel) RefreshFromSharedIncidentTypeEntity(resp *shared.IncidentTypeEntity) {
	if resp != nil {
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Template != nil {
			r.Template.CustomFields = types.StringPointerValue(resp.Template.CustomFields)
			r.Template.CustomerImpactSummary = types.StringPointerValue(resp.Template.CustomerImpactSummary)
			r.Template.Description = types.StringPointerValue(resp.Template.Description)
			r.Template.Impacts = []tfTypes.PostV1IncidentTypesImpacts{}
			if len(r.Template.Impacts) > len(resp.Template.Impacts) {
				r.Template.Impacts = r.Template.Impacts[:len(resp.Template.Impacts)]
			}
			for impactsCount, impactsItem := range resp.Template.Impacts {
				var impacts1 tfTypes.PostV1IncidentTypesImpacts
				impacts1.ConditionID = types.StringPointerValue(impactsItem.ConditionID)
				impacts1.ConditionName = types.StringPointerValue(impactsItem.ConditionName)
				impacts1.ID = types.StringPointerValue(impactsItem.ID)
				impacts1.Name = types.StringPointerValue(impactsItem.Name)
				if impactsItem.Type != nil {
					impacts1.Type = types.StringValue(string(*impactsItem.Type))
				} else {
					impacts1.Type = types.StringNull()
				}
				if impactsCount+1 > len(r.Template.Impacts) {
					r.Template.Impacts = append(r.Template.Impacts, impacts1)
				} else {
					r.Template.Impacts[impactsCount].ConditionID = impacts1.ConditionID
					r.Template.Impacts[impactsCount].ConditionName = impacts1.ConditionName
					r.Template.Impacts[impactsCount].ID = impacts1.ID
					r.Template.Impacts[impactsCount].Name = impacts1.Name
					r.Template.Impacts[impactsCount].Type = impacts1.Type
				}
			}
			r.Template.IncidentName = types.StringPointerValue(resp.Template.IncidentName)
			if len(resp.Template.Labels) > 0 {
				r.Template.Labels = make(map[string]types.String)
				for key, value := range resp.Template.Labels {
					r.Template.Labels[key] = types.StringValue(value)
				}
			}
			r.Template.Priority = types.StringPointerValue(resp.Template.Priority)
			r.Template.PrivateIncident = types.BoolPointerValue(resp.Template.PrivateIncident)
			r.Template.RunbookIds = []types.String{}
			for _, v := range resp.Template.RunbookIds {
				r.Template.RunbookIds = append(r.Template.RunbookIds, types.StringValue(v))
			}
			r.Template.Severity = types.StringPointerValue(resp.Template.Severity)
			r.Template.Summary = types.StringPointerValue(resp.Template.Summary)
			r.Template.TagList = []types.String{}
			for _, v := range resp.Template.TagList {
				r.Template.TagList = append(r.Template.TagList, types.StringValue(v))
			}
			r.Template.TeamIds = []types.String{}
			for _, v := range resp.Template.TeamIds {
				r.Template.TeamIds = append(r.Template.TeamIds, types.StringValue(v))
			}
		}
		if resp.TemplateValues == nil {
			r.TemplateValues = nil
		} else {
			r.TemplateValues = &tfTypes.IncidentTypeEntityTemplateValuesEntity{}
			r.TemplateValues.Environments = []tfTypes.IncidentTypeEntityTemplateImpactEntity{}
			if len(r.TemplateValues.Environments) > len(resp.TemplateValues.Environments) {
				r.TemplateValues.Environments = r.TemplateValues.Environments[:len(resp.TemplateValues.Environments)]
			}
			for environmentsCount, environmentsItem := range resp.TemplateValues.Environments {
				var environments1 tfTypes.IncidentTypeEntityTemplateImpactEntity
				environments1.ConditionID = types.StringPointerValue(environmentsItem.ConditionID)
				environments1.ConditionName = types.StringPointerValue(environmentsItem.ConditionName)
				environments1.ID = types.StringPointerValue(environmentsItem.ID)
				environments1.Name = types.StringPointerValue(environmentsItem.Name)
				if environmentsItem.Type != nil {
					environments1.Type = types.StringValue(string(*environmentsItem.Type))
				} else {
					environments1.Type = types.StringNull()
				}
				if environmentsCount+1 > len(r.TemplateValues.Environments) {
					r.TemplateValues.Environments = append(r.TemplateValues.Environments, environments1)
				} else {
					r.TemplateValues.Environments[environmentsCount].ConditionID = environments1.ConditionID
					r.TemplateValues.Environments[environmentsCount].ConditionName = environments1.ConditionName
					r.TemplateValues.Environments[environmentsCount].ID = environments1.ID
					r.TemplateValues.Environments[environmentsCount].Name = environments1.Name
					r.TemplateValues.Environments[environmentsCount].Type = environments1.Type
				}
			}
			r.TemplateValues.Functionalities = []tfTypes.IncidentTypeEntityTemplateImpactEntity{}
			if len(r.TemplateValues.Functionalities) > len(resp.TemplateValues.Functionalities) {
				r.TemplateValues.Functionalities = r.TemplateValues.Functionalities[:len(resp.TemplateValues.Functionalities)]
			}
			for functionalitiesCount, functionalitiesItem := range resp.TemplateValues.Functionalities {
				var functionalities1 tfTypes.IncidentTypeEntityTemplateImpactEntity
				functionalities1.ConditionID = types.StringPointerValue(functionalitiesItem.ConditionID)
				functionalities1.ConditionName = types.StringPointerValue(functionalitiesItem.ConditionName)
				functionalities1.ID = types.StringPointerValue(functionalitiesItem.ID)
				functionalities1.Name = types.StringPointerValue(functionalitiesItem.Name)
				if functionalitiesItem.Type != nil {
					functionalities1.Type = types.StringValue(string(*functionalitiesItem.Type))
				} else {
					functionalities1.Type = types.StringNull()
				}
				if functionalitiesCount+1 > len(r.TemplateValues.Functionalities) {
					r.TemplateValues.Functionalities = append(r.TemplateValues.Functionalities, functionalities1)
				} else {
					r.TemplateValues.Functionalities[functionalitiesCount].ConditionID = functionalities1.ConditionID
					r.TemplateValues.Functionalities[functionalitiesCount].ConditionName = functionalities1.ConditionName
					r.TemplateValues.Functionalities[functionalitiesCount].ID = functionalities1.ID
					r.TemplateValues.Functionalities[functionalitiesCount].Name = functionalities1.Name
					r.TemplateValues.Functionalities[functionalitiesCount].Type = functionalities1.Type
				}
			}
			if resp.TemplateValues.Runbooks == nil {
				r.TemplateValues.Runbooks = nil
			} else {
				r.TemplateValues.Runbooks = &tfTypes.TeamEntity1{}
			}
			r.TemplateValues.Services = []tfTypes.IncidentTypeEntityTemplateImpactEntity{}
			if len(r.TemplateValues.Services) > len(resp.TemplateValues.Services) {
				r.TemplateValues.Services = r.TemplateValues.Services[:len(resp.TemplateValues.Services)]
			}
			for servicesCount, servicesItem := range resp.TemplateValues.Services {
				var services1 tfTypes.IncidentTypeEntityTemplateImpactEntity
				services1.ConditionID = types.StringPointerValue(servicesItem.ConditionID)
				services1.ConditionName = types.StringPointerValue(servicesItem.ConditionName)
				services1.ID = types.StringPointerValue(servicesItem.ID)
				services1.Name = types.StringPointerValue(servicesItem.Name)
				if servicesItem.Type != nil {
					services1.Type = types.StringValue(string(*servicesItem.Type))
				} else {
					services1.Type = types.StringNull()
				}
				if servicesCount+1 > len(r.TemplateValues.Services) {
					r.TemplateValues.Services = append(r.TemplateValues.Services, services1)
				} else {
					r.TemplateValues.Services[servicesCount].ConditionID = services1.ConditionID
					r.TemplateValues.Services[servicesCount].ConditionName = services1.ConditionName
					r.TemplateValues.Services[servicesCount].ID = services1.ID
					r.TemplateValues.Services[servicesCount].Name = services1.Name
					r.TemplateValues.Services[servicesCount].Type = services1.Type
				}
			}
			r.TemplateValues.Teams = []tfTypes.TeamEntity{}
			if len(r.TemplateValues.Teams) > len(resp.TemplateValues.Teams) {
				r.TemplateValues.Teams = r.TemplateValues.Teams[:len(resp.TemplateValues.Teams)]
			}
			for teamsCount, teamsItem := range resp.TemplateValues.Teams {
				var teams1 tfTypes.TeamEntity
				if teamsItem.CreatedAt != nil {
					teams1.CreatedAt = types.StringValue(teamsItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					teams1.CreatedAt = types.StringNull()
				}
				if teamsItem.CreatedBy == nil {
					teams1.CreatedBy = nil
				} else {
					teams1.CreatedBy = &tfTypes.AuthorEntity{}
					teams1.CreatedBy.Email = types.StringPointerValue(teamsItem.CreatedBy.Email)
					teams1.CreatedBy.ID = types.StringPointerValue(teamsItem.CreatedBy.ID)
					teams1.CreatedBy.Name = types.StringPointerValue(teamsItem.CreatedBy.Name)
					teams1.CreatedBy.Source = types.StringPointerValue(teamsItem.CreatedBy.Source)
				}
				teams1.Description = types.StringPointerValue(teamsItem.Description)
				teams1.Functionalities = []tfTypes.FunctionalityEntity{}
				for functionalitiesCount1, functionalitiesItem1 := range teamsItem.Functionalities {
					var functionalities3 tfTypes.FunctionalityEntity
					functionalities3.ActiveIncidents = []types.String{}
					for _, v := range functionalitiesItem1.ActiveIncidents {
						functionalities3.ActiveIncidents = append(functionalities3.ActiveIncidents, types.StringValue(v))
					}
					functionalities3.AlertOnAdd = types.BoolPointerValue(functionalitiesItem1.AlertOnAdd)
					functionalities3.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem1.AutoAddRespondingTeam)
					if functionalitiesItem1.CreatedAt != nil {
						functionalities3.CreatedAt = types.StringValue(functionalitiesItem1.CreatedAt.Format(time.RFC3339Nano))
					} else {
						functionalities3.CreatedAt = types.StringNull()
					}
					functionalities3.Description = types.StringPointerValue(functionalitiesItem1.Description)
					functionalities3.ExternalResources = []tfTypes.ExternalResourceEntity{}
					for externalResourcesCount, externalResourcesItem := range functionalitiesItem1.ExternalResources {
						var externalResources1 tfTypes.ExternalResourceEntity
						externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
						externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
						externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
						if externalResourcesItem.CreatedAt != nil {
							externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources1.CreatedAt = types.StringNull()
						}
						externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
						externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
						externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
						if externalResourcesItem.UpdatedAt != nil {
							externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources1.UpdatedAt = types.StringNull()
						}
						if externalResourcesCount+1 > len(functionalities3.ExternalResources) {
							functionalities3.ExternalResources = append(functionalities3.ExternalResources, externalResources1)
						} else {
							functionalities3.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
							functionalities3.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
							functionalities3.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
							functionalities3.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
							functionalities3.ExternalResources[externalResourcesCount].Name = externalResources1.Name
							functionalities3.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
							functionalities3.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
							functionalities3.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
						}
					}
					functionalities3.ID = types.StringPointerValue(functionalitiesItem1.ID)
					if len(functionalitiesItem1.Labels) > 0 {
						functionalities3.Labels = make(map[string]types.String)
						for key1, value1 := range functionalitiesItem1.Labels {
							functionalities3.Labels[key1] = types.StringValue(value1)
						}
					}
					functionalities3.Links = []tfTypes.LinksEntity{}
					for linksCount, linksItem := range functionalitiesItem1.Links {
						var links1 tfTypes.LinksEntity
						links1.HrefURL = types.StringPointerValue(linksItem.HrefURL)
						links1.IconURL = types.StringPointerValue(linksItem.IconURL)
						links1.ID = types.StringPointerValue(linksItem.ID)
						links1.Name = types.StringPointerValue(linksItem.Name)
						if linksCount+1 > len(functionalities3.Links) {
							functionalities3.Links = append(functionalities3.Links, links1)
						} else {
							functionalities3.Links[linksCount].HrefURL = links1.HrefURL
							functionalities3.Links[linksCount].IconURL = links1.IconURL
							functionalities3.Links[linksCount].ID = links1.ID
							functionalities3.Links[linksCount].Name = links1.Name
						}
					}
					functionalities3.Name = types.StringPointerValue(functionalitiesItem1.Name)
					if functionalitiesItem1.Owner == nil {
						functionalities3.Owner = nil
					} else {
						functionalities3.Owner = &tfTypes.TeamEntity1{}
					}
					functionalities3.Slug = types.StringPointerValue(functionalitiesItem1.Slug)
					if functionalitiesItem1.UpdatedAt != nil {
						functionalities3.UpdatedAt = types.StringValue(functionalitiesItem1.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						functionalities3.UpdatedAt = types.StringNull()
					}
					if functionalitiesItem1.UpdatedBy == nil {
						functionalities3.UpdatedBy = nil
					} else {
						functionalities3.UpdatedBy = &tfTypes.AuthorEntity{}
						functionalities3.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Email)
						functionalities3.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem1.UpdatedBy.ID)
						functionalities3.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Name)
						functionalities3.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem1.UpdatedBy.Source)
					}
					if functionalitiesCount1+1 > len(teams1.Functionalities) {
						teams1.Functionalities = append(teams1.Functionalities, functionalities3)
					} else {
						teams1.Functionalities[functionalitiesCount1].ActiveIncidents = functionalities3.ActiveIncidents
						teams1.Functionalities[functionalitiesCount1].AlertOnAdd = functionalities3.AlertOnAdd
						teams1.Functionalities[functionalitiesCount1].AutoAddRespondingTeam = functionalities3.AutoAddRespondingTeam
						teams1.Functionalities[functionalitiesCount1].CreatedAt = functionalities3.CreatedAt
						teams1.Functionalities[functionalitiesCount1].Description = functionalities3.Description
						teams1.Functionalities[functionalitiesCount1].ExternalResources = functionalities3.ExternalResources
						teams1.Functionalities[functionalitiesCount1].ID = functionalities3.ID
						teams1.Functionalities[functionalitiesCount1].Labels = functionalities3.Labels
						teams1.Functionalities[functionalitiesCount1].Links = functionalities3.Links
						teams1.Functionalities[functionalitiesCount1].Name = functionalities3.Name
						teams1.Functionalities[functionalitiesCount1].Owner = functionalities3.Owner
						teams1.Functionalities[functionalitiesCount1].Slug = functionalities3.Slug
						teams1.Functionalities[functionalitiesCount1].UpdatedAt = functionalities3.UpdatedAt
						teams1.Functionalities[functionalitiesCount1].UpdatedBy = functionalities3.UpdatedBy
					}
				}
				teams1.ID = types.StringPointerValue(teamsItem.ID)
				teams1.Memberships = []tfTypes.MembershipEntity{}
				for membershipsCount, membershipsItem := range teamsItem.Memberships {
					var memberships1 tfTypes.MembershipEntity
					if membershipsItem.DefaultIncidentRole == nil {
						memberships1.DefaultIncidentRole = nil
					} else {
						memberships1.DefaultIncidentRole = &tfTypes.IncidentRoleEntity{}
						if membershipsItem.DefaultIncidentRole.CreatedAt != nil {
							memberships1.DefaultIncidentRole.CreatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.CreatedAt.Format(time.RFC3339Nano))
						} else {
							memberships1.DefaultIncidentRole.CreatedAt = types.StringNull()
						}
						memberships1.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Description)
						if membershipsItem.DefaultIncidentRole.DiscardedAt != nil {
							memberships1.DefaultIncidentRole.DiscardedAt = types.StringValue(membershipsItem.DefaultIncidentRole.DiscardedAt.Format(time.RFC3339Nano))
						} else {
							memberships1.DefaultIncidentRole.DiscardedAt = types.StringNull()
						}
						memberships1.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem.DefaultIncidentRole.ID)
						memberships1.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Name)
						memberships1.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Summary)
						if membershipsItem.DefaultIncidentRole.UpdatedAt != nil {
							memberships1.DefaultIncidentRole.UpdatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							memberships1.DefaultIncidentRole.UpdatedAt = types.StringNull()
						}
					}
					if membershipsItem.Schedule == nil {
						memberships1.Schedule = nil
					} else {
						memberships1.Schedule = &tfTypes.ScheduleEntity{}
						memberships1.Schedule.Discarded = types.BoolPointerValue(membershipsItem.Schedule.Discarded)
						memberships1.Schedule.ID = types.StringPointerValue(membershipsItem.Schedule.ID)
						memberships1.Schedule.Integration = types.StringPointerValue(membershipsItem.Schedule.Integration)
						memberships1.Schedule.Name = types.StringPointerValue(membershipsItem.Schedule.Name)
					}
					if membershipsItem.User == nil {
						memberships1.User = nil
					} else {
						memberships1.User = &tfTypes.UserEntity{}
						if membershipsItem.User.CreatedAt != nil {
							memberships1.User.CreatedAt = types.StringValue(membershipsItem.User.CreatedAt.Format(time.RFC3339Nano))
						} else {
							memberships1.User.CreatedAt = types.StringNull()
						}
						memberships1.User.Email = types.StringPointerValue(membershipsItem.User.Email)
						memberships1.User.ID = types.StringPointerValue(membershipsItem.User.ID)
						memberships1.User.Name = types.StringPointerValue(membershipsItem.User.Name)
						memberships1.User.SignalsEnabledNotificationTypes = []types.String{}
						for _, v := range membershipsItem.User.SignalsEnabledNotificationTypes {
							memberships1.User.SignalsEnabledNotificationTypes = append(memberships1.User.SignalsEnabledNotificationTypes, types.StringValue(v))
						}
						memberships1.User.SlackLinked = types.BoolPointerValue(membershipsItem.User.SlackLinked)
						memberships1.User.SlackUserID = types.StringPointerValue(membershipsItem.User.SlackUserID)
						if membershipsItem.User.UpdatedAt != nil {
							memberships1.User.UpdatedAt = types.StringValue(membershipsItem.User.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							memberships1.User.UpdatedAt = types.StringNull()
						}
					}
					if membershipsCount+1 > len(teams1.Memberships) {
						teams1.Memberships = append(teams1.Memberships, memberships1)
					} else {
						teams1.Memberships[membershipsCount].DefaultIncidentRole = memberships1.DefaultIncidentRole
						teams1.Memberships[membershipsCount].Schedule = memberships1.Schedule
						teams1.Memberships[membershipsCount].User = memberships1.User
					}
				}
				if teamsItem.MsTeamsChannel == nil {
					teams1.MsTeamsChannel = nil
				} else {
					teams1.MsTeamsChannel = &tfTypes.IntegrationsMicrosoftTeamsV2ChannelEntity{}
					teams1.MsTeamsChannel.ChannelID = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelID)
					teams1.MsTeamsChannel.ChannelName = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelName)
					teams1.MsTeamsChannel.ChannelURL = types.StringPointerValue(teamsItem.MsTeamsChannel.ChannelURL)
					teams1.MsTeamsChannel.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.ID)
					if teamsItem.MsTeamsChannel.Incident == nil {
						teams1.MsTeamsChannel.Incident = nil
					} else {
						teams1.MsTeamsChannel.Incident = &tfTypes.IncidentEntity{}
						teams1.MsTeamsChannel.Incident.Active = types.BoolPointerValue(teamsItem.MsTeamsChannel.Incident.Active)
						teams1.MsTeamsChannel.Incident.AiIncidentSummary = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.AiIncidentSummary)
						teams1.MsTeamsChannel.Incident.ChannelID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ChannelID)
						teams1.MsTeamsChannel.Incident.ChannelName = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ChannelName)
						teams1.MsTeamsChannel.Incident.ChannelReference = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ChannelReference)
						teams1.MsTeamsChannel.Incident.ChannelStatus = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ChannelStatus)
						teams1.MsTeamsChannel.Incident.ConferenceBridges = []tfTypes.IncidentsConferenceBridgeEntity{}
						for conferenceBridgesCount, conferenceBridgesItem := range teamsItem.MsTeamsChannel.Incident.ConferenceBridges {
							var conferenceBridges1 tfTypes.IncidentsConferenceBridgeEntity
							conferenceBridges1.ID = types.StringPointerValue(conferenceBridgesItem.ID)
							if conferenceBridgesCount+1 > len(teams1.MsTeamsChannel.Incident.ConferenceBridges) {
								teams1.MsTeamsChannel.Incident.ConferenceBridges = append(teams1.MsTeamsChannel.Incident.ConferenceBridges, conferenceBridges1)
							} else {
								teams1.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].ID = conferenceBridges1.ID
							}
						}
						if teamsItem.MsTeamsChannel.Incident.ContextObject == nil {
							teams1.MsTeamsChannel.Incident.ContextObject = nil
						} else {
							teams1.MsTeamsChannel.Incident.ContextObject = &tfTypes.IncidentsContextObjectEntity{}
							teams1.MsTeamsChannel.Incident.ContextObject.ContextDescription = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ContextObject.ContextDescription)
							teams1.MsTeamsChannel.Incident.ContextObject.ContextTag = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ContextObject.ContextTag)
							teams1.MsTeamsChannel.Incident.ContextObject.ObjectID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ContextObject.ObjectID)
							teams1.MsTeamsChannel.Incident.ContextObject.ObjectType = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ContextObject.ObjectType)
						}
						teams1.MsTeamsChannel.Incident.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
						for conversationsCount, conversationsItem := range teamsItem.MsTeamsChannel.Incident.Conversations {
							var conversations1 tfTypes.ConversationsAPIEntitiesReference
							if conversationsItem.Channel == nil {
								conversations1.Channel = nil
							} else {
								conversations1.Channel = &tfTypes.ConversationsAPIEntitiesChannel{}
								conversations1.Channel.Name = types.StringPointerValue(conversationsItem.Channel.Name)
							}
							conversations1.CommentsURL = types.StringPointerValue(conversationsItem.CommentsURL)
							conversations1.Field = types.StringPointerValue(conversationsItem.Field)
							conversations1.ID = types.StringPointerValue(conversationsItem.ID)
							conversations1.ResourceClass = types.StringPointerValue(conversationsItem.ResourceClass)
							conversations1.ResourceID = types.StringPointerValue(conversationsItem.ResourceID)
							if conversationsCount+1 > len(teams1.MsTeamsChannel.Incident.Conversations) {
								teams1.MsTeamsChannel.Incident.Conversations = append(teams1.MsTeamsChannel.Incident.Conversations, conversations1)
							} else {
								teams1.MsTeamsChannel.Incident.Conversations[conversationsCount].Channel = conversations1.Channel
								teams1.MsTeamsChannel.Incident.Conversations[conversationsCount].CommentsURL = conversations1.CommentsURL
								teams1.MsTeamsChannel.Incident.Conversations[conversationsCount].Field = conversations1.Field
								teams1.MsTeamsChannel.Incident.Conversations[conversationsCount].ID = conversations1.ID
								teams1.MsTeamsChannel.Incident.Conversations[conversationsCount].ResourceClass = conversations1.ResourceClass
								teams1.MsTeamsChannel.Incident.Conversations[conversationsCount].ResourceID = conversations1.ResourceID
							}
						}
						if teamsItem.MsTeamsChannel.Incident.CreatedAt != nil {
							teams1.MsTeamsChannel.Incident.CreatedAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.CreatedAt.Format(time.RFC3339Nano))
						} else {
							teams1.MsTeamsChannel.Incident.CreatedAt = types.StringNull()
						}
						if teamsItem.MsTeamsChannel.Incident.CreatedBy == nil {
							teams1.MsTeamsChannel.Incident.CreatedBy = nil
						} else {
							teams1.MsTeamsChannel.Incident.CreatedBy = &tfTypes.AuthorEntity{}
							teams1.MsTeamsChannel.Incident.CreatedBy.Email = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CreatedBy.Email)
							teams1.MsTeamsChannel.Incident.CreatedBy.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CreatedBy.ID)
							teams1.MsTeamsChannel.Incident.CreatedBy.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CreatedBy.Name)
							teams1.MsTeamsChannel.Incident.CreatedBy.Source = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CreatedBy.Source)
						}
						teams1.MsTeamsChannel.Incident.CurrentMilestone = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CurrentMilestone)
						teams1.MsTeamsChannel.Incident.CustomFields = []tfTypes.CustomFieldsFieldValue{}
						for customFieldsCount, customFieldsItem := range teamsItem.MsTeamsChannel.Incident.CustomFields {
							var customFields2 tfTypes.CustomFieldsFieldValue
							customFields2.Description = types.StringPointerValue(customFieldsItem.Description)
							customFields2.DisplayName = types.StringPointerValue(customFieldsItem.DisplayName)
							customFields2.FieldID = types.StringPointerValue(customFieldsItem.FieldID)
							customFields2.Name = types.StringPointerValue(customFieldsItem.Name)
							customFields2.Slug = types.StringPointerValue(customFieldsItem.Slug)
							customFields2.Value = types.StringPointerValue(customFieldsItem.Value)
							customFields2.ValueArray = types.StringPointerValue(customFieldsItem.ValueArray)
							customFields2.ValueString = types.StringPointerValue(customFieldsItem.ValueString)
							customFields2.ValueType = types.StringPointerValue(customFieldsItem.ValueType)
							if customFieldsCount+1 > len(teams1.MsTeamsChannel.Incident.CustomFields) {
								teams1.MsTeamsChannel.Incident.CustomFields = append(teams1.MsTeamsChannel.Incident.CustomFields, customFields2)
							} else {
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Description = customFields2.Description
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].DisplayName = customFields2.DisplayName
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].FieldID = customFields2.FieldID
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Name = customFields2.Name
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Slug = customFields2.Slug
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Value = customFields2.Value
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueArray = customFields2.ValueArray
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueString = customFields2.ValueString
								teams1.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueType = customFields2.ValueType
							}
						}
						teams1.MsTeamsChannel.Incident.CustomerImpactSummary = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.CustomerImpactSummary)
						if teamsItem.MsTeamsChannel.Incident.CustomersImpacted != nil {
							teams1.MsTeamsChannel.Incident.CustomersImpacted = types.Int64Value(int64(*teamsItem.MsTeamsChannel.Incident.CustomersImpacted))
						} else {
							teams1.MsTeamsChannel.Incident.CustomersImpacted = types.Int64Null()
						}
						teams1.MsTeamsChannel.Incident.Description = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Description)
						if teamsItem.MsTeamsChannel.Incident.DiscardedAt != nil {
							teams1.MsTeamsChannel.Incident.DiscardedAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.DiscardedAt.Format(time.RFC3339Nano))
						} else {
							teams1.MsTeamsChannel.Incident.DiscardedAt = types.StringNull()
						}
						teams1.MsTeamsChannel.Incident.Environments = []tfTypes.SuccinctEntity{}
						for environmentsCount1, environmentsItem1 := range teamsItem.MsTeamsChannel.Incident.Environments {
							var environments3 tfTypes.SuccinctEntity
							environments3.ID = types.StringPointerValue(environmentsItem1.ID)
							environments3.Name = types.StringPointerValue(environmentsItem1.Name)
							if environmentsCount1+1 > len(teams1.MsTeamsChannel.Incident.Environments) {
								teams1.MsTeamsChannel.Incident.Environments = append(teams1.MsTeamsChannel.Incident.Environments, environments3)
							} else {
								teams1.MsTeamsChannel.Incident.Environments[environmentsCount1].ID = environments3.ID
								teams1.MsTeamsChannel.Incident.Environments[environmentsCount1].Name = environments3.Name
							}
						}
						teams1.MsTeamsChannel.Incident.FieldRequirements = []tfTypes.IncidentEntityFieldRequirementEntity{}
						for fieldRequirementsCount, fieldRequirementsItem := range teamsItem.MsTeamsChannel.Incident.FieldRequirements {
							var fieldRequirements1 tfTypes.IncidentEntityFieldRequirementEntity
							fieldRequirements1.FieldID = types.StringPointerValue(fieldRequirementsItem.FieldID)
							fieldRequirements1.RequiredAtMilestoneID = types.StringPointerValue(fieldRequirementsItem.RequiredAtMilestoneID)
							if fieldRequirementsCount+1 > len(teams1.MsTeamsChannel.Incident.FieldRequirements) {
								teams1.MsTeamsChannel.Incident.FieldRequirements = append(teams1.MsTeamsChannel.Incident.FieldRequirements, fieldRequirements1)
							} else {
								teams1.MsTeamsChannel.Incident.FieldRequirements[fieldRequirementsCount].FieldID = fieldRequirements1.FieldID
								teams1.MsTeamsChannel.Incident.FieldRequirements[fieldRequirementsCount].RequiredAtMilestoneID = fieldRequirements1.RequiredAtMilestoneID
							}
						}
						teams1.MsTeamsChannel.Incident.Functionalities = []tfTypes.SuccinctEntity{}
						for functionalitiesCount2, functionalitiesItem2 := range teamsItem.MsTeamsChannel.Incident.Functionalities {
							var functionalities5 tfTypes.SuccinctEntity
							functionalities5.ID = types.StringPointerValue(functionalitiesItem2.ID)
							functionalities5.Name = types.StringPointerValue(functionalitiesItem2.Name)
							if functionalitiesCount2+1 > len(teams1.MsTeamsChannel.Incident.Functionalities) {
								teams1.MsTeamsChannel.Incident.Functionalities = append(teams1.MsTeamsChannel.Incident.Functionalities, functionalities5)
							} else {
								teams1.MsTeamsChannel.Incident.Functionalities[functionalitiesCount2].ID = functionalities5.ID
								teams1.MsTeamsChannel.Incident.Functionalities[functionalitiesCount2].Name = functionalities5.Name
							}
						}
						teams1.MsTeamsChannel.Incident.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ID)
						teams1.MsTeamsChannel.Incident.Impacts = []tfTypes.IncidentsImpactEntity{}
						for impactsCount1, impactsItem1 := range teamsItem.MsTeamsChannel.Incident.Impacts {
							var impacts3 tfTypes.IncidentsImpactEntity
							if impactsItem1.Condition == nil {
								impacts3.Condition = nil
							} else {
								impacts3.Condition = &tfTypes.SeverityMatrixConditionEntity{}
								impacts3.Condition.ID = types.StringPointerValue(impactsItem1.Condition.ID)
								impacts3.Condition.Name = types.StringPointerValue(impactsItem1.Condition.Name)
								if impactsItem1.Condition.Position != nil {
									impacts3.Condition.Position = types.Int64Value(int64(*impactsItem1.Condition.Position))
								} else {
									impacts3.Condition.Position = types.Int64Null()
								}
							}
							impacts3.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
							for conversationsCount1, conversationsItem1 := range impactsItem1.Conversations {
								var conversations3 tfTypes.ConversationsAPIEntitiesReference
								if conversationsItem1.Channel == nil {
									conversations3.Channel = nil
								} else {
									conversations3.Channel = &tfTypes.ConversationsAPIEntitiesChannel{}
									conversations3.Channel.Name = types.StringPointerValue(conversationsItem1.Channel.Name)
								}
								conversations3.CommentsURL = types.StringPointerValue(conversationsItem1.CommentsURL)
								conversations3.Field = types.StringPointerValue(conversationsItem1.Field)
								conversations3.ID = types.StringPointerValue(conversationsItem1.ID)
								conversations3.ResourceClass = types.StringPointerValue(conversationsItem1.ResourceClass)
								conversations3.ResourceID = types.StringPointerValue(conversationsItem1.ResourceID)
								if conversationsCount1+1 > len(impacts3.Conversations) {
									impacts3.Conversations = append(impacts3.Conversations, conversations3)
								} else {
									impacts3.Conversations[conversationsCount1].Channel = conversations3.Channel
									impacts3.Conversations[conversationsCount1].CommentsURL = conversations3.CommentsURL
									impacts3.Conversations[conversationsCount1].Field = conversations3.Field
									impacts3.Conversations[conversationsCount1].ID = conversations3.ID
									impacts3.Conversations[conversationsCount1].ResourceClass = conversations3.ResourceClass
									impacts3.Conversations[conversationsCount1].ResourceID = conversations3.ResourceID
								}
							}
							impacts3.ID = types.StringPointerValue(impactsItem1.ID)
							if impactsItem1.Impact == nil {
								impacts3.Impact = nil
							} else {
								impacts3.Impact = &tfTypes.SuccinctEntity{}
								impacts3.Impact.ID = types.StringPointerValue(impactsItem1.Impact.ID)
								impacts3.Impact.Name = types.StringPointerValue(impactsItem1.Impact.Name)
							}
							if impactsItem1.Type != nil {
								impacts3.Type = types.StringValue(string(*impactsItem1.Type))
							} else {
								impacts3.Type = types.StringNull()
							}
							if impactsCount1+1 > len(teams1.MsTeamsChannel.Incident.Impacts) {
								teams1.MsTeamsChannel.Incident.Impacts = append(teams1.MsTeamsChannel.Incident.Impacts, impacts3)
							} else {
								teams1.MsTeamsChannel.Incident.Impacts[impactsCount1].Condition = impacts3.Condition
								teams1.MsTeamsChannel.Incident.Impacts[impactsCount1].Conversations = impacts3.Conversations
								teams1.MsTeamsChannel.Incident.Impacts[impactsCount1].ID = impacts3.ID
								teams1.MsTeamsChannel.Incident.Impacts[impactsCount1].Impact = impacts3.Impact
								teams1.MsTeamsChannel.Incident.Impacts[impactsCount1].Type = impacts3.Type
							}
						}
						teams1.MsTeamsChannel.Incident.IncidentChannels = []tfTypes.IncidentsChannelEntity{}
						for incidentChannelsCount, incidentChannelsItem := range teamsItem.MsTeamsChannel.Incident.IncidentChannels {
							var incidentChannels1 tfTypes.IncidentsChannelEntity
							incidentChannels1.IconURL = types.StringPointerValue(incidentChannelsItem.IconURL)
							incidentChannels1.ID = types.StringPointerValue(incidentChannelsItem.ID)
							incidentChannels1.Name = types.StringPointerValue(incidentChannelsItem.Name)
							incidentChannels1.Source = types.StringPointerValue(incidentChannelsItem.Source)
							incidentChannels1.SourceID = types.StringPointerValue(incidentChannelsItem.SourceID)
							incidentChannels1.SourceName = types.StringPointerValue(incidentChannelsItem.SourceName)
							incidentChannels1.Status = types.StringPointerValue(incidentChannelsItem.Status)
							incidentChannels1.URL = types.StringPointerValue(incidentChannelsItem.URL)
							if incidentChannelsCount+1 > len(teams1.MsTeamsChannel.Incident.IncidentChannels) {
								teams1.MsTeamsChannel.Incident.IncidentChannels = append(teams1.MsTeamsChannel.Incident.IncidentChannels, incidentChannels1)
							} else {
								teams1.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].IconURL = incidentChannels1.IconURL
								teams1.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].ID = incidentChannels1.ID
								teams1.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Name = incidentChannels1.Name
								teams1.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Source = incidentChannels1.Source
								teams1.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].SourceID = incidentChannels1.SourceID
								teams1.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].SourceName = incidentChannels1.SourceName
								teams1.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Status = incidentChannels1.Status
								teams1.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].URL = incidentChannels1.URL
							}
						}
						teams1.MsTeamsChannel.Incident.IncidentTickets = []tfTypes.TicketingTicketEntity{}
						for incidentTicketsCount, incidentTicketsItem := range teamsItem.MsTeamsChannel.Incident.IncidentTickets {
							var incidentTickets1 tfTypes.TicketingTicketEntity
							incidentTickets1.Assignees = []tfTypes.AuthorEntity{}
							for assigneesCount, assigneesItem := range incidentTicketsItem.Assignees {
								var assignees1 tfTypes.AuthorEntity
								assignees1.Email = types.StringPointerValue(assigneesItem.Email)
								assignees1.ID = types.StringPointerValue(assigneesItem.ID)
								assignees1.Name = types.StringPointerValue(assigneesItem.Name)
								assignees1.Source = types.StringPointerValue(assigneesItem.Source)
								if assigneesCount+1 > len(incidentTickets1.Assignees) {
									incidentTickets1.Assignees = append(incidentTickets1.Assignees, assignees1)
								} else {
									incidentTickets1.Assignees[assigneesCount].Email = assignees1.Email
									incidentTickets1.Assignees[assigneesCount].ID = assignees1.ID
									incidentTickets1.Assignees[assigneesCount].Name = assignees1.Name
									incidentTickets1.Assignees[assigneesCount].Source = assignees1.Source
								}
							}
							if incidentTicketsItem.CreatedAt != nil {
								incidentTickets1.CreatedAt = types.StringValue(incidentTicketsItem.CreatedAt.Format(time.RFC3339Nano))
							} else {
								incidentTickets1.CreatedAt = types.StringNull()
							}
							if incidentTicketsItem.CreatedBy == nil {
								incidentTickets1.CreatedBy = nil
							} else {
								incidentTickets1.CreatedBy = &tfTypes.AuthorEntity{}
								incidentTickets1.CreatedBy.Email = types.StringPointerValue(incidentTicketsItem.CreatedBy.Email)
								incidentTickets1.CreatedBy.ID = types.StringPointerValue(incidentTicketsItem.CreatedBy.ID)
								incidentTickets1.CreatedBy.Name = types.StringPointerValue(incidentTicketsItem.CreatedBy.Name)
								incidentTickets1.CreatedBy.Source = types.StringPointerValue(incidentTicketsItem.CreatedBy.Source)
							}
							incidentTickets1.Description = types.StringPointerValue(incidentTicketsItem.Description)
							if incidentTicketsItem.DueAt != nil {
								incidentTickets1.DueAt = types.StringValue(incidentTicketsItem.DueAt.Format(time.RFC3339Nano))
							} else {
								incidentTickets1.DueAt = types.StringNull()
							}
							incidentTickets1.ID = types.StringPointerValue(incidentTicketsItem.ID)
							incidentTickets1.IncidentCurrentMilestone = types.StringPointerValue(incidentTicketsItem.IncidentCurrentMilestone)
							incidentTickets1.IncidentID = types.StringPointerValue(incidentTicketsItem.IncidentID)
							incidentTickets1.IncidentName = types.StringPointerValue(incidentTicketsItem.IncidentName)
							if incidentTicketsItem.Link == nil {
								incidentTickets1.Link = nil
							} else {
								incidentTickets1.Link = &tfTypes.AttachmentsLinkEntity{}
								incidentTickets1.Link.Deletable = types.BoolPointerValue(incidentTicketsItem.Link.Deletable)
								incidentTickets1.Link.DisplayText = types.StringPointerValue(incidentTicketsItem.Link.DisplayText)
								incidentTickets1.Link.Editable = types.BoolPointerValue(incidentTicketsItem.Link.Editable)
								incidentTickets1.Link.HrefURL = types.StringPointerValue(incidentTicketsItem.Link.HrefURL)
								incidentTickets1.Link.IconURL = types.StringPointerValue(incidentTicketsItem.Link.IconURL)
								incidentTickets1.Link.ID = types.StringPointerValue(incidentTicketsItem.Link.ID)
								incidentTickets1.Link.Type = types.StringPointerValue(incidentTicketsItem.Link.Type)
							}
							if incidentTicketsItem.Priority == nil {
								incidentTickets1.Priority = nil
							} else {
								incidentTickets1.Priority = &tfTypes.TicketingPriorityEntity{}
								if incidentTicketsItem.Priority.CreatedAt != nil {
									incidentTickets1.Priority.CreatedAt = types.StringValue(incidentTicketsItem.Priority.CreatedAt.Format(time.RFC3339Nano))
								} else {
									incidentTickets1.Priority.CreatedAt = types.StringNull()
								}
								incidentTickets1.Priority.ID = types.StringPointerValue(incidentTicketsItem.Priority.ID)
								incidentTickets1.Priority.Name = types.StringPointerValue(incidentTicketsItem.Priority.Name)
								if incidentTicketsItem.Priority.Position != nil {
									incidentTickets1.Priority.Position = types.Int64Value(int64(*incidentTicketsItem.Priority.Position))
								} else {
									incidentTickets1.Priority.Position = types.Int64Null()
								}
								if incidentTicketsItem.Priority.UpdatedAt != nil {
									incidentTickets1.Priority.UpdatedAt = types.StringValue(incidentTicketsItem.Priority.UpdatedAt.Format(time.RFC3339Nano))
								} else {
									incidentTickets1.Priority.UpdatedAt = types.StringNull()
								}
							}
							if incidentTicketsItem.State != nil {
								incidentTickets1.State = types.StringValue(string(*incidentTicketsItem.State))
							} else {
								incidentTickets1.State = types.StringNull()
							}
							incidentTickets1.Summary = types.StringPointerValue(incidentTicketsItem.Summary)
							incidentTickets1.TagList = []types.String{}
							for _, v := range incidentTicketsItem.TagList {
								incidentTickets1.TagList = append(incidentTickets1.TagList, types.StringValue(v))
							}
							incidentTickets1.TaskID = types.StringPointerValue(incidentTicketsItem.TaskID)
							if incidentTicketsItem.Type != nil {
								incidentTickets1.Type = types.StringValue(string(*incidentTicketsItem.Type))
							} else {
								incidentTickets1.Type = types.StringNull()
							}
							if incidentTicketsItem.UpdatedAt != nil {
								incidentTickets1.UpdatedAt = types.StringValue(incidentTicketsItem.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								incidentTickets1.UpdatedAt = types.StringNull()
							}
							if incidentTicketsCount+1 > len(teams1.MsTeamsChannel.Incident.IncidentTickets) {
								teams1.MsTeamsChannel.Incident.IncidentTickets = append(teams1.MsTeamsChannel.Incident.IncidentTickets, incidentTickets1)
							} else {
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Assignees = incidentTickets1.Assignees
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].CreatedAt = incidentTickets1.CreatedAt
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].CreatedBy = incidentTickets1.CreatedBy
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Description = incidentTickets1.Description
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].DueAt = incidentTickets1.DueAt
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].ID = incidentTickets1.ID
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentCurrentMilestone = incidentTickets1.IncidentCurrentMilestone
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentID = incidentTickets1.IncidentID
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentName = incidentTickets1.IncidentName
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Link = incidentTickets1.Link
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Priority = incidentTickets1.Priority
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].State = incidentTickets1.State
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Summary = incidentTickets1.Summary
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].TagList = incidentTickets1.TagList
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].TaskID = incidentTickets1.TaskID
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Type = incidentTickets1.Type
								teams1.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].UpdatedAt = incidentTickets1.UpdatedAt
							}
						}
						teams1.MsTeamsChannel.Incident.IncidentURL = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.IncidentURL)
						if len(teamsItem.MsTeamsChannel.Incident.Labels) > 0 {
							teams1.MsTeamsChannel.Incident.Labels = make(map[string]types.String)
							for key2, value3 := range teamsItem.MsTeamsChannel.Incident.Labels {
								teams1.MsTeamsChannel.Incident.Labels[key2] = types.StringValue(value3)
							}
						}
						if teamsItem.MsTeamsChannel.Incident.LastNote == nil {
							teams1.MsTeamsChannel.Incident.LastNote = nil
						} else {
							teams1.MsTeamsChannel.Incident.LastNote = &tfTypes.EventNoteEntity{}
							teams1.MsTeamsChannel.Incident.LastNote.Body = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.LastNote.Body)
							teams1.MsTeamsChannel.Incident.LastNote.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
							for conversationsCount2, conversationsItem2 := range teamsItem.MsTeamsChannel.Incident.LastNote.Conversations {
								var conversations5 tfTypes.ConversationsAPIEntitiesReference
								if conversationsItem2.Channel == nil {
									conversations5.Channel = nil
								} else {
									conversations5.Channel = &tfTypes.ConversationsAPIEntitiesChannel{}
									conversations5.Channel.Name = types.StringPointerValue(conversationsItem2.Channel.Name)
								}
								conversations5.CommentsURL = types.StringPointerValue(conversationsItem2.CommentsURL)
								conversations5.Field = types.StringPointerValue(conversationsItem2.Field)
								conversations5.ID = types.StringPointerValue(conversationsItem2.ID)
								conversations5.ResourceClass = types.StringPointerValue(conversationsItem2.ResourceClass)
								conversations5.ResourceID = types.StringPointerValue(conversationsItem2.ResourceID)
								if conversationsCount2+1 > len(teams1.MsTeamsChannel.Incident.LastNote.Conversations) {
									teams1.MsTeamsChannel.Incident.LastNote.Conversations = append(teams1.MsTeamsChannel.Incident.LastNote.Conversations, conversations5)
								} else {
									teams1.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].Channel = conversations5.Channel
									teams1.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].CommentsURL = conversations5.CommentsURL
									teams1.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].Field = conversations5.Field
									teams1.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ID = conversations5.ID
									teams1.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ResourceClass = conversations5.ResourceClass
									teams1.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ResourceID = conversations5.ResourceID
								}
							}
							if teamsItem.MsTeamsChannel.Incident.LastNote.CreatedAt != nil {
								teams1.MsTeamsChannel.Incident.LastNote.CreatedAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.LastNote.CreatedAt.Format(time.RFC3339Nano))
							} else {
								teams1.MsTeamsChannel.Incident.LastNote.CreatedAt = types.StringNull()
							}
							teams1.MsTeamsChannel.Incident.LastNote.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.LastNote.ID)
							teams1.MsTeamsChannel.Incident.LastNote.StatusPages = []tfTypes.IncidentsStatusPageEntity{}
							for statusPagesCount, statusPagesItem := range teamsItem.MsTeamsChannel.Incident.LastNote.StatusPages {
								var statusPages1 tfTypes.IncidentsStatusPageEntity
								statusPages1.DisplayName = types.StringPointerValue(statusPagesItem.DisplayName)
								statusPages1.ExternalID = types.StringPointerValue(statusPagesItem.ExternalID)
								statusPages1.ID = types.StringPointerValue(statusPagesItem.ID)
								if statusPagesItem.Integration == nil {
									statusPages1.Integration = nil
								} else {
									statusPages1.Integration = &tfTypes.IntegrationEntity{}
									if statusPagesItem.Integration.CreatedAt != nil {
										statusPages1.Integration.CreatedAt = types.StringValue(statusPagesItem.Integration.CreatedAt.Format(time.RFC3339Nano))
									} else {
										statusPages1.Integration.CreatedAt = types.StringNull()
									}
									statusPages1.Integration.DisplayName = types.StringPointerValue(statusPagesItem.Integration.DisplayName)
									statusPages1.Integration.ID = types.StringPointerValue(statusPagesItem.Integration.ID)
									statusPages1.Integration.IntegrationName = types.StringPointerValue(statusPagesItem.Integration.IntegrationName)
									statusPages1.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem.Integration.IntegrationSlug)
								}
								statusPages1.Name = types.StringPointerValue(statusPagesItem.Name)
								statusPages1.URL = types.StringPointerValue(statusPagesItem.URL)
								if statusPagesCount+1 > len(teams1.MsTeamsChannel.Incident.LastNote.StatusPages) {
									teams1.MsTeamsChannel.Incident.LastNote.StatusPages = append(teams1.MsTeamsChannel.Incident.LastNote.StatusPages, statusPages1)
								} else {
									teams1.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].DisplayName = statusPages1.DisplayName
									teams1.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].ExternalID = statusPages1.ExternalID
									teams1.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].ID = statusPages1.ID
									teams1.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].Integration = statusPages1.Integration
									teams1.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].Name = statusPages1.Name
									teams1.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].URL = statusPages1.URL
								}
							}
						}
						teams1.MsTeamsChannel.Incident.LastUpdate = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.LastUpdate)
						teams1.MsTeamsChannel.Incident.LifecycleMeasurements = []tfTypes.IncidentsLifecycleMeasurementEntity{}
						for lifecycleMeasurementsCount, lifecycleMeasurementsItem := range teamsItem.MsTeamsChannel.Incident.LifecycleMeasurements {
							var lifecycleMeasurements1 tfTypes.IncidentsLifecycleMeasurementEntity
							if lifecycleMeasurementsItem.CalculatedAt != nil {
								lifecycleMeasurements1.CalculatedAt = types.StringValue(lifecycleMeasurementsItem.CalculatedAt.Format(time.RFC3339Nano))
							} else {
								lifecycleMeasurements1.CalculatedAt = types.StringNull()
							}
							lifecycleMeasurements1.Description = types.StringPointerValue(lifecycleMeasurementsItem.Description)
							lifecycleMeasurements1.EndsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.EndsAtMilestone)
							lifecycleMeasurements1.ID = types.StringPointerValue(lifecycleMeasurementsItem.ID)
							lifecycleMeasurements1.Name = types.StringPointerValue(lifecycleMeasurementsItem.Name)
							lifecycleMeasurements1.Slug = types.StringPointerValue(lifecycleMeasurementsItem.Slug)
							lifecycleMeasurements1.StartsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.StartsAtMilestone)
							lifecycleMeasurements1.Value = types.StringPointerValue(lifecycleMeasurementsItem.Value)
							if lifecycleMeasurementsCount+1 > len(teams1.MsTeamsChannel.Incident.LifecycleMeasurements) {
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements = append(teams1.MsTeamsChannel.Incident.LifecycleMeasurements, lifecycleMeasurements1)
							} else {
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].CalculatedAt = lifecycleMeasurements1.CalculatedAt
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Description = lifecycleMeasurements1.Description
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].EndsAtMilestone = lifecycleMeasurements1.EndsAtMilestone
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].ID = lifecycleMeasurements1.ID
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Name = lifecycleMeasurements1.Name
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Slug = lifecycleMeasurements1.Slug
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].StartsAtMilestone = lifecycleMeasurements1.StartsAtMilestone
								teams1.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Value = lifecycleMeasurements1.Value
							}
						}
						teams1.MsTeamsChannel.Incident.LifecyclePhases = []tfTypes.IncidentsLifecyclePhaseEntity{}
						for lifecyclePhasesCount, lifecyclePhasesItem := range teamsItem.MsTeamsChannel.Incident.LifecyclePhases {
							var lifecyclePhases1 tfTypes.IncidentsLifecyclePhaseEntity
							lifecyclePhases1.Description = types.StringPointerValue(lifecyclePhasesItem.Description)
							lifecyclePhases1.ID = types.StringPointerValue(lifecyclePhasesItem.ID)
							lifecyclePhases1.Milestones = []tfTypes.IncidentsLifecycleMilestoneEntity{}
							for milestonesCount, milestonesItem := range lifecyclePhasesItem.Milestones {
								var milestones1 tfTypes.IncidentsLifecycleMilestoneEntity
								milestones1.Description = types.StringPointerValue(milestonesItem.Description)
								milestones1.Duration = types.StringPointerValue(milestonesItem.Duration)
								milestones1.ID = types.StringPointerValue(milestonesItem.ID)
								milestones1.Name = types.StringPointerValue(milestonesItem.Name)
								if milestonesItem.OccurredAt != nil {
									milestones1.OccurredAt = types.StringValue(milestonesItem.OccurredAt.Format(time.RFC3339Nano))
								} else {
									milestones1.OccurredAt = types.StringNull()
								}
								if milestonesItem.Position != nil {
									milestones1.Position = types.Int64Value(int64(*milestonesItem.Position))
								} else {
									milestones1.Position = types.Int64Null()
								}
								milestones1.Slug = types.StringPointerValue(milestonesItem.Slug)
								if milestonesItem.UpdatedAt != nil {
									milestones1.UpdatedAt = types.StringValue(milestonesItem.UpdatedAt.Format(time.RFC3339Nano))
								} else {
									milestones1.UpdatedAt = types.StringNull()
								}
								if milestonesItem.UpdatedBy == nil {
									milestones1.UpdatedBy = nil
								} else {
									milestones1.UpdatedBy = &tfTypes.AuthorEntity{}
									milestones1.UpdatedBy.Email = types.StringPointerValue(milestonesItem.UpdatedBy.Email)
									milestones1.UpdatedBy.ID = types.StringPointerValue(milestonesItem.UpdatedBy.ID)
									milestones1.UpdatedBy.Name = types.StringPointerValue(milestonesItem.UpdatedBy.Name)
									milestones1.UpdatedBy.Source = types.StringPointerValue(milestonesItem.UpdatedBy.Source)
								}
								if milestonesCount+1 > len(lifecyclePhases1.Milestones) {
									lifecyclePhases1.Milestones = append(lifecyclePhases1.Milestones, milestones1)
								} else {
									lifecyclePhases1.Milestones[milestonesCount].Description = milestones1.Description
									lifecyclePhases1.Milestones[milestonesCount].Duration = milestones1.Duration
									lifecyclePhases1.Milestones[milestonesCount].ID = milestones1.ID
									lifecyclePhases1.Milestones[milestonesCount].Name = milestones1.Name
									lifecyclePhases1.Milestones[milestonesCount].OccurredAt = milestones1.OccurredAt
									lifecyclePhases1.Milestones[milestonesCount].Position = milestones1.Position
									lifecyclePhases1.Milestones[milestonesCount].Slug = milestones1.Slug
									lifecyclePhases1.Milestones[milestonesCount].UpdatedAt = milestones1.UpdatedAt
									lifecyclePhases1.Milestones[milestonesCount].UpdatedBy = milestones1.UpdatedBy
								}
							}
							lifecyclePhases1.Name = types.StringPointerValue(lifecyclePhasesItem.Name)
							if lifecyclePhasesItem.Position != nil {
								lifecyclePhases1.Position = types.Int64Value(int64(*lifecyclePhasesItem.Position))
							} else {
								lifecyclePhases1.Position = types.Int64Null()
							}
							lifecyclePhases1.Type = types.StringPointerValue(lifecyclePhasesItem.Type)
							if lifecyclePhasesCount+1 > len(teams1.MsTeamsChannel.Incident.LifecyclePhases) {
								teams1.MsTeamsChannel.Incident.LifecyclePhases = append(teams1.MsTeamsChannel.Incident.LifecyclePhases, lifecyclePhases1)
							} else {
								teams1.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Description = lifecyclePhases1.Description
								teams1.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].ID = lifecyclePhases1.ID
								teams1.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Milestones = lifecyclePhases1.Milestones
								teams1.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Name = lifecyclePhases1.Name
								teams1.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Position = lifecyclePhases1.Position
								teams1.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Type = lifecyclePhases1.Type
							}
						}
						teams1.MsTeamsChannel.Incident.Milestones = []tfTypes.IncidentsMilestoneEntity{}
						for milestonesCount1, milestonesItem1 := range teamsItem.MsTeamsChannel.Incident.Milestones {
							var milestones3 tfTypes.IncidentsMilestoneEntity
							if milestonesItem1.CreatedAt != nil {
								milestones3.CreatedAt = types.StringValue(milestonesItem1.CreatedAt.Format(time.RFC3339Nano))
							} else {
								milestones3.CreatedAt = types.StringNull()
							}
							milestones3.Duration = types.StringPointerValue(milestonesItem1.Duration)
							milestones3.ID = types.StringPointerValue(milestonesItem1.ID)
							if milestonesItem1.OccurredAt != nil {
								milestones3.OccurredAt = types.StringValue(milestonesItem1.OccurredAt.Format(time.RFC3339Nano))
							} else {
								milestones3.OccurredAt = types.StringNull()
							}
							milestones3.Type = types.StringPointerValue(milestonesItem1.Type)
							if milestonesItem1.UpdatedAt != nil {
								milestones3.UpdatedAt = types.StringValue(milestonesItem1.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								milestones3.UpdatedAt = types.StringNull()
							}
							if milestonesCount1+1 > len(teams1.MsTeamsChannel.Incident.Milestones) {
								teams1.MsTeamsChannel.Incident.Milestones = append(teams1.MsTeamsChannel.Incident.Milestones, milestones3)
							} else {
								teams1.MsTeamsChannel.Incident.Milestones[milestonesCount1].CreatedAt = milestones3.CreatedAt
								teams1.MsTeamsChannel.Incident.Milestones[milestonesCount1].Duration = milestones3.Duration
								teams1.MsTeamsChannel.Incident.Milestones[milestonesCount1].ID = milestones3.ID
								teams1.MsTeamsChannel.Incident.Milestones[milestonesCount1].OccurredAt = milestones3.OccurredAt
								teams1.MsTeamsChannel.Incident.Milestones[milestonesCount1].Type = milestones3.Type
								teams1.MsTeamsChannel.Incident.Milestones[milestonesCount1].UpdatedAt = milestones3.UpdatedAt
							}
						}
						if teamsItem.MsTeamsChannel.Incident.MonetaryImpact != nil {
							teams1.MsTeamsChannel.Incident.MonetaryImpact = types.Int64Value(int64(*teamsItem.MsTeamsChannel.Incident.MonetaryImpact))
						} else {
							teams1.MsTeamsChannel.Incident.MonetaryImpact = types.Int64Null()
						}
						if teamsItem.MsTeamsChannel.Incident.MonetaryImpactCents != nil {
							teams1.MsTeamsChannel.Incident.MonetaryImpactCents = types.Int64Value(int64(*teamsItem.MsTeamsChannel.Incident.MonetaryImpactCents))
						} else {
							teams1.MsTeamsChannel.Incident.MonetaryImpactCents = types.Int64Null()
						}
						teams1.MsTeamsChannel.Incident.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Name)
						if teamsItem.MsTeamsChannel.Incident.Number != nil {
							teams1.MsTeamsChannel.Incident.Number = types.Int64Value(int64(*teamsItem.MsTeamsChannel.Incident.Number))
						} else {
							teams1.MsTeamsChannel.Incident.Number = types.Int64Null()
						}
						if teamsItem.MsTeamsChannel.Incident.Organization == nil {
							teams1.MsTeamsChannel.Incident.Organization = nil
						} else {
							teams1.MsTeamsChannel.Incident.Organization = &tfTypes.SuccinctEntity{}
							teams1.MsTeamsChannel.Incident.Organization.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Organization.ID)
							teams1.MsTeamsChannel.Incident.Organization.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Organization.Name)
						}
						teams1.MsTeamsChannel.Incident.OrganizationID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.OrganizationID)
						teams1.MsTeamsChannel.Incident.Priority = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Priority)
						teams1.MsTeamsChannel.Incident.PrivateID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.PrivateID)
						teams1.MsTeamsChannel.Incident.PrivateStatusPageURL = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.PrivateStatusPageURL)
						teams1.MsTeamsChannel.Incident.ReportID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.ReportID)
						teams1.MsTeamsChannel.Incident.RoleAssignments = []tfTypes.IncidentsRoleAssignmentEntity{}
						for roleAssignmentsCount, roleAssignmentsItem := range teamsItem.MsTeamsChannel.Incident.RoleAssignments {
							var roleAssignments1 tfTypes.IncidentsRoleAssignmentEntity
							if roleAssignmentsItem.CreatedAt != nil {
								roleAssignments1.CreatedAt = types.StringValue(roleAssignmentsItem.CreatedAt.Format(time.RFC3339Nano))
							} else {
								roleAssignments1.CreatedAt = types.StringNull()
							}
							roleAssignments1.ID = types.StringPointerValue(roleAssignmentsItem.ID)
							if roleAssignmentsItem.IncidentRole == nil {
								roleAssignments1.IncidentRole = nil
							} else {
								roleAssignments1.IncidentRole = &tfTypes.IncidentRoleEntity{}
								if roleAssignmentsItem.IncidentRole.CreatedAt != nil {
									roleAssignments1.IncidentRole.CreatedAt = types.StringValue(roleAssignmentsItem.IncidentRole.CreatedAt.Format(time.RFC3339Nano))
								} else {
									roleAssignments1.IncidentRole.CreatedAt = types.StringNull()
								}
								roleAssignments1.IncidentRole.Description = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Description)
								if roleAssignmentsItem.IncidentRole.DiscardedAt != nil {
									roleAssignments1.IncidentRole.DiscardedAt = types.StringValue(roleAssignmentsItem.IncidentRole.DiscardedAt.Format(time.RFC3339Nano))
								} else {
									roleAssignments1.IncidentRole.DiscardedAt = types.StringNull()
								}
								roleAssignments1.IncidentRole.ID = types.StringPointerValue(roleAssignmentsItem.IncidentRole.ID)
								roleAssignments1.IncidentRole.Name = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Name)
								roleAssignments1.IncidentRole.Summary = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Summary)
								if roleAssignmentsItem.IncidentRole.UpdatedAt != nil {
									roleAssignments1.IncidentRole.UpdatedAt = types.StringValue(roleAssignmentsItem.IncidentRole.UpdatedAt.Format(time.RFC3339Nano))
								} else {
									roleAssignments1.IncidentRole.UpdatedAt = types.StringNull()
								}
							}
							if roleAssignmentsItem.Status != nil {
								roleAssignments1.Status = types.StringValue(string(*roleAssignmentsItem.Status))
							} else {
								roleAssignments1.Status = types.StringNull()
							}
							if roleAssignmentsItem.UpdatedAt != nil {
								roleAssignments1.UpdatedAt = types.StringValue(roleAssignmentsItem.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								roleAssignments1.UpdatedAt = types.StringNull()
							}
							if roleAssignmentsItem.User == nil {
								roleAssignments1.User = nil
							} else {
								roleAssignments1.User = &tfTypes.UserEntity{}
								if roleAssignmentsItem.User.CreatedAt != nil {
									roleAssignments1.User.CreatedAt = types.StringValue(roleAssignmentsItem.User.CreatedAt.Format(time.RFC3339Nano))
								} else {
									roleAssignments1.User.CreatedAt = types.StringNull()
								}
								roleAssignments1.User.Email = types.StringPointerValue(roleAssignmentsItem.User.Email)
								roleAssignments1.User.ID = types.StringPointerValue(roleAssignmentsItem.User.ID)
								roleAssignments1.User.Name = types.StringPointerValue(roleAssignmentsItem.User.Name)
								roleAssignments1.User.SignalsEnabledNotificationTypes = []types.String{}
								for _, v := range roleAssignmentsItem.User.SignalsEnabledNotificationTypes {
									roleAssignments1.User.SignalsEnabledNotificationTypes = append(roleAssignments1.User.SignalsEnabledNotificationTypes, types.StringValue(v))
								}
								roleAssignments1.User.SlackLinked = types.BoolPointerValue(roleAssignmentsItem.User.SlackLinked)
								roleAssignments1.User.SlackUserID = types.StringPointerValue(roleAssignmentsItem.User.SlackUserID)
								if roleAssignmentsItem.User.UpdatedAt != nil {
									roleAssignments1.User.UpdatedAt = types.StringValue(roleAssignmentsItem.User.UpdatedAt.Format(time.RFC3339Nano))
								} else {
									roleAssignments1.User.UpdatedAt = types.StringNull()
								}
							}
							if roleAssignmentsCount+1 > len(teams1.MsTeamsChannel.Incident.RoleAssignments) {
								teams1.MsTeamsChannel.Incident.RoleAssignments = append(teams1.MsTeamsChannel.Incident.RoleAssignments, roleAssignments1)
							} else {
								teams1.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].CreatedAt = roleAssignments1.CreatedAt
								teams1.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].ID = roleAssignments1.ID
								teams1.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].IncidentRole = roleAssignments1.IncidentRole
								teams1.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].Status = roleAssignments1.Status
								teams1.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].UpdatedAt = roleAssignments1.UpdatedAt
								teams1.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].User = roleAssignments1.User
							}
						}
						teams1.MsTeamsChannel.Incident.Services = []tfTypes.SuccinctEntity{}
						for servicesCount1, servicesItem1 := range teamsItem.MsTeamsChannel.Incident.Services {
							var services3 tfTypes.SuccinctEntity
							services3.ID = types.StringPointerValue(servicesItem1.ID)
							services3.Name = types.StringPointerValue(servicesItem1.Name)
							if servicesCount1+1 > len(teams1.MsTeamsChannel.Incident.Services) {
								teams1.MsTeamsChannel.Incident.Services = append(teams1.MsTeamsChannel.Incident.Services, services3)
							} else {
								teams1.MsTeamsChannel.Incident.Services[servicesCount1].ID = services3.ID
								teams1.MsTeamsChannel.Incident.Services[servicesCount1].Name = services3.Name
							}
						}
						teams1.MsTeamsChannel.Incident.Severity = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Severity)
						teams1.MsTeamsChannel.Incident.SeverityColor = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityColor)
						teams1.MsTeamsChannel.Incident.SeverityCondition = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityCondition)
						if teamsItem.MsTeamsChannel.Incident.SeverityConditionObject == nil {
							teams1.MsTeamsChannel.Incident.SeverityConditionObject = nil
						} else {
							teams1.MsTeamsChannel.Incident.SeverityConditionObject = &tfTypes.SeverityMatrixConditionEntity{}
							teams1.MsTeamsChannel.Incident.SeverityConditionObject.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityConditionObject.ID)
							teams1.MsTeamsChannel.Incident.SeverityConditionObject.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityConditionObject.Name)
							if teamsItem.MsTeamsChannel.Incident.SeverityConditionObject.Position != nil {
								teams1.MsTeamsChannel.Incident.SeverityConditionObject.Position = types.Int64Value(int64(*teamsItem.MsTeamsChannel.Incident.SeverityConditionObject.Position))
							} else {
								teams1.MsTeamsChannel.Incident.SeverityConditionObject.Position = types.Int64Null()
							}
						}
						teams1.MsTeamsChannel.Incident.SeverityImpact = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpact)
						if teamsItem.MsTeamsChannel.Incident.SeverityImpactObject == nil {
							teams1.MsTeamsChannel.Incident.SeverityImpactObject = nil
						} else {
							teams1.MsTeamsChannel.Incident.SeverityImpactObject = &tfTypes.SeverityMatrixImpactEntity{}
							teams1.MsTeamsChannel.Incident.SeverityImpactObject.AffectsID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.AffectsID)
							teams1.MsTeamsChannel.Incident.SeverityImpactObject.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.ID)
							teams1.MsTeamsChannel.Incident.SeverityImpactObject.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.Name)
							if teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.Position != nil {
								teams1.MsTeamsChannel.Incident.SeverityImpactObject.Position = types.Int64Value(int64(*teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.Position))
							} else {
								teams1.MsTeamsChannel.Incident.SeverityImpactObject.Position = types.Int64Null()
							}
							teams1.MsTeamsChannel.Incident.SeverityImpactObject.Type = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.SeverityImpactObject.Type)
						}
						if teamsItem.MsTeamsChannel.Incident.StartedAt != nil {
							teams1.MsTeamsChannel.Incident.StartedAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.StartedAt.Format(time.RFC3339Nano))
						} else {
							teams1.MsTeamsChannel.Incident.StartedAt = types.StringNull()
						}
						teams1.MsTeamsChannel.Incident.StatusPages = []tfTypes.IncidentsStatusPageEntity{}
						for statusPagesCount1, statusPagesItem1 := range teamsItem.MsTeamsChannel.Incident.StatusPages {
							var statusPages3 tfTypes.IncidentsStatusPageEntity
							statusPages3.DisplayName = types.StringPointerValue(statusPagesItem1.DisplayName)
							statusPages3.ExternalID = types.StringPointerValue(statusPagesItem1.ExternalID)
							statusPages3.ID = types.StringPointerValue(statusPagesItem1.ID)
							if statusPagesItem1.Integration == nil {
								statusPages3.Integration = nil
							} else {
								statusPages3.Integration = &tfTypes.IntegrationEntity{}
								if statusPagesItem1.Integration.CreatedAt != nil {
									statusPages3.Integration.CreatedAt = types.StringValue(statusPagesItem1.Integration.CreatedAt.Format(time.RFC3339Nano))
								} else {
									statusPages3.Integration.CreatedAt = types.StringNull()
								}
								statusPages3.Integration.DisplayName = types.StringPointerValue(statusPagesItem1.Integration.DisplayName)
								statusPages3.Integration.ID = types.StringPointerValue(statusPagesItem1.Integration.ID)
								statusPages3.Integration.IntegrationName = types.StringPointerValue(statusPagesItem1.Integration.IntegrationName)
								statusPages3.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem1.Integration.IntegrationSlug)
							}
							statusPages3.Name = types.StringPointerValue(statusPagesItem1.Name)
							statusPages3.URL = types.StringPointerValue(statusPagesItem1.URL)
							if statusPagesCount1+1 > len(teams1.MsTeamsChannel.Incident.StatusPages) {
								teams1.MsTeamsChannel.Incident.StatusPages = append(teams1.MsTeamsChannel.Incident.StatusPages, statusPages3)
							} else {
								teams1.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].DisplayName = statusPages3.DisplayName
								teams1.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].ExternalID = statusPages3.ExternalID
								teams1.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].ID = statusPages3.ID
								teams1.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].Integration = statusPages3.Integration
								teams1.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].Name = statusPages3.Name
								teams1.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].URL = statusPages3.URL
							}
						}
						teams1.MsTeamsChannel.Incident.Summary = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Summary)
						teams1.MsTeamsChannel.Incident.TagList = []types.String{}
						for _, v := range teamsItem.MsTeamsChannel.Incident.TagList {
							teams1.MsTeamsChannel.Incident.TagList = append(teams1.MsTeamsChannel.Incident.TagList, types.StringValue(v))
						}
						teams1.MsTeamsChannel.Incident.TeamAssignments = []tfTypes.IncidentsTeamAssignmentEntity{}
						for teamAssignmentsCount, teamAssignmentsItem := range teamsItem.MsTeamsChannel.Incident.TeamAssignments {
							var teamAssignments1 tfTypes.IncidentsTeamAssignmentEntity
							if teamAssignmentsItem.CreatedAt != nil {
								teamAssignments1.CreatedAt = types.StringValue(teamAssignmentsItem.CreatedAt.Format(time.RFC3339Nano))
							} else {
								teamAssignments1.CreatedAt = types.StringNull()
							}
							teamAssignments1.ID = types.StringPointerValue(teamAssignmentsItem.ID)
							teamAssignments1.Status = types.StringPointerValue(teamAssignmentsItem.Status)
							if teamAssignmentsItem.Team == nil {
								teamAssignments1.Team = nil
							} else {
								teamAssignments1.Team = &tfTypes.TeamEntity1{}
							}
							if teamAssignmentsItem.UpdatedAt != nil {
								teamAssignments1.UpdatedAt = types.StringValue(teamAssignmentsItem.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								teamAssignments1.UpdatedAt = types.StringNull()
							}
							if teamAssignmentsCount+1 > len(teams1.MsTeamsChannel.Incident.TeamAssignments) {
								teams1.MsTeamsChannel.Incident.TeamAssignments = append(teams1.MsTeamsChannel.Incident.TeamAssignments, teamAssignments1)
							} else {
								teams1.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].CreatedAt = teamAssignments1.CreatedAt
								teams1.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].ID = teamAssignments1.ID
								teams1.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].Status = teamAssignments1.Status
								teams1.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].Team = teamAssignments1.Team
								teams1.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].UpdatedAt = teamAssignments1.UpdatedAt
							}
						}
						if teamsItem.MsTeamsChannel.Incident.Ticket == nil {
							teams1.MsTeamsChannel.Incident.Ticket = nil
						} else {
							teams1.MsTeamsChannel.Incident.Ticket = &tfTypes.TicketingTicketEntity{}
							teams1.MsTeamsChannel.Incident.Ticket.Assignees = []tfTypes.AuthorEntity{}
							for assigneesCount1, assigneesItem1 := range teamsItem.MsTeamsChannel.Incident.Ticket.Assignees {
								var assignees3 tfTypes.AuthorEntity
								assignees3.Email = types.StringPointerValue(assigneesItem1.Email)
								assignees3.ID = types.StringPointerValue(assigneesItem1.ID)
								assignees3.Name = types.StringPointerValue(assigneesItem1.Name)
								assignees3.Source = types.StringPointerValue(assigneesItem1.Source)
								if assigneesCount1+1 > len(teams1.MsTeamsChannel.Incident.Ticket.Assignees) {
									teams1.MsTeamsChannel.Incident.Ticket.Assignees = append(teams1.MsTeamsChannel.Incident.Ticket.Assignees, assignees3)
								} else {
									teams1.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Email = assignees3.Email
									teams1.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].ID = assignees3.ID
									teams1.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Name = assignees3.Name
									teams1.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Source = assignees3.Source
								}
							}
							if teamsItem.MsTeamsChannel.Incident.Ticket.CreatedAt != nil {
								teams1.MsTeamsChannel.Incident.Ticket.CreatedAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedAt.Format(time.RFC3339Nano))
							} else {
								teams1.MsTeamsChannel.Incident.Ticket.CreatedAt = types.StringNull()
							}
							if teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy == nil {
								teams1.MsTeamsChannel.Incident.Ticket.CreatedBy = nil
							} else {
								teams1.MsTeamsChannel.Incident.Ticket.CreatedBy = &tfTypes.AuthorEntity{}
								teams1.MsTeamsChannel.Incident.Ticket.CreatedBy.Email = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy.Email)
								teams1.MsTeamsChannel.Incident.Ticket.CreatedBy.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy.ID)
								teams1.MsTeamsChannel.Incident.Ticket.CreatedBy.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy.Name)
								teams1.MsTeamsChannel.Incident.Ticket.CreatedBy.Source = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.CreatedBy.Source)
							}
							teams1.MsTeamsChannel.Incident.Ticket.Description = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Description)
							if teamsItem.MsTeamsChannel.Incident.Ticket.DueAt != nil {
								teams1.MsTeamsChannel.Incident.Ticket.DueAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.Ticket.DueAt.Format(time.RFC3339Nano))
							} else {
								teams1.MsTeamsChannel.Incident.Ticket.DueAt = types.StringNull()
							}
							teams1.MsTeamsChannel.Incident.Ticket.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.ID)
							teams1.MsTeamsChannel.Incident.Ticket.IncidentCurrentMilestone = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.IncidentCurrentMilestone)
							teams1.MsTeamsChannel.Incident.Ticket.IncidentID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.IncidentID)
							teams1.MsTeamsChannel.Incident.Ticket.IncidentName = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.IncidentName)
							if teamsItem.MsTeamsChannel.Incident.Ticket.Link == nil {
								teams1.MsTeamsChannel.Incident.Ticket.Link = nil
							} else {
								teams1.MsTeamsChannel.Incident.Ticket.Link = &tfTypes.AttachmentsLinkEntity{}
								teams1.MsTeamsChannel.Incident.Ticket.Link.Deletable = types.BoolPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.Deletable)
								teams1.MsTeamsChannel.Incident.Ticket.Link.DisplayText = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.DisplayText)
								teams1.MsTeamsChannel.Incident.Ticket.Link.Editable = types.BoolPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.Editable)
								teams1.MsTeamsChannel.Incident.Ticket.Link.HrefURL = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.HrefURL)
								teams1.MsTeamsChannel.Incident.Ticket.Link.IconURL = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.IconURL)
								teams1.MsTeamsChannel.Incident.Ticket.Link.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.ID)
								teams1.MsTeamsChannel.Incident.Ticket.Link.Type = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Link.Type)
							}
							if teamsItem.MsTeamsChannel.Incident.Ticket.Priority == nil {
								teams1.MsTeamsChannel.Incident.Ticket.Priority = nil
							} else {
								teams1.MsTeamsChannel.Incident.Ticket.Priority = &tfTypes.TicketingPriorityEntity{}
								if teamsItem.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt != nil {
									teams1.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt.Format(time.RFC3339Nano))
								} else {
									teams1.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt = types.StringNull()
								}
								teams1.MsTeamsChannel.Incident.Ticket.Priority.ID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.ID)
								teams1.MsTeamsChannel.Incident.Ticket.Priority.Name = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.Name)
								if teamsItem.MsTeamsChannel.Incident.Ticket.Priority.Position != nil {
									teams1.MsTeamsChannel.Incident.Ticket.Priority.Position = types.Int64Value(int64(*teamsItem.MsTeamsChannel.Incident.Ticket.Priority.Position))
								} else {
									teams1.MsTeamsChannel.Incident.Ticket.Priority.Position = types.Int64Null()
								}
								if teamsItem.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt != nil {
									teams1.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt.Format(time.RFC3339Nano))
								} else {
									teams1.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt = types.StringNull()
								}
							}
							if teamsItem.MsTeamsChannel.Incident.Ticket.State != nil {
								teams1.MsTeamsChannel.Incident.Ticket.State = types.StringValue(string(*teamsItem.MsTeamsChannel.Incident.Ticket.State))
							} else {
								teams1.MsTeamsChannel.Incident.Ticket.State = types.StringNull()
							}
							teams1.MsTeamsChannel.Incident.Ticket.Summary = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.Summary)
							teams1.MsTeamsChannel.Incident.Ticket.TagList = []types.String{}
							for _, v := range teamsItem.MsTeamsChannel.Incident.Ticket.TagList {
								teams1.MsTeamsChannel.Incident.Ticket.TagList = append(teams1.MsTeamsChannel.Incident.Ticket.TagList, types.StringValue(v))
							}
							teams1.MsTeamsChannel.Incident.Ticket.TaskID = types.StringPointerValue(teamsItem.MsTeamsChannel.Incident.Ticket.TaskID)
							if teamsItem.MsTeamsChannel.Incident.Ticket.Type != nil {
								teams1.MsTeamsChannel.Incident.Ticket.Type = types.StringValue(string(*teamsItem.MsTeamsChannel.Incident.Ticket.Type))
							} else {
								teams1.MsTeamsChannel.Incident.Ticket.Type = types.StringNull()
							}
							if teamsItem.MsTeamsChannel.Incident.Ticket.UpdatedAt != nil {
								teams1.MsTeamsChannel.Incident.Ticket.UpdatedAt = types.StringValue(teamsItem.MsTeamsChannel.Incident.Ticket.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								teams1.MsTeamsChannel.Incident.Ticket.UpdatedAt = types.StringNull()
							}
						}
					}
					teams1.MsTeamsChannel.MsTeamID = types.StringPointerValue(teamsItem.MsTeamsChannel.MsTeamID)
					teams1.MsTeamsChannel.Status = types.StringPointerValue(teamsItem.MsTeamsChannel.Status)
					teams1.MsTeamsChannel.TeamName = types.StringPointerValue(teamsItem.MsTeamsChannel.TeamName)
				}
				teams1.Name = types.StringPointerValue(teamsItem.Name)
				teams1.OwnedFunctionalities = []tfTypes.FunctionalityEntity{}
				for ownedFunctionalitiesCount, ownedFunctionalitiesItem := range teamsItem.OwnedFunctionalities {
					var ownedFunctionalities1 tfTypes.FunctionalityEntity
					ownedFunctionalities1.ActiveIncidents = []types.String{}
					for _, v := range ownedFunctionalitiesItem.ActiveIncidents {
						ownedFunctionalities1.ActiveIncidents = append(ownedFunctionalities1.ActiveIncidents, types.StringValue(v))
					}
					ownedFunctionalities1.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem.AlertOnAdd)
					ownedFunctionalities1.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem.AutoAddRespondingTeam)
					if ownedFunctionalitiesItem.CreatedAt != nil {
						ownedFunctionalities1.CreatedAt = types.StringValue(ownedFunctionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						ownedFunctionalities1.CreatedAt = types.StringNull()
					}
					ownedFunctionalities1.Description = types.StringPointerValue(ownedFunctionalitiesItem.Description)
					ownedFunctionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
					for externalResourcesCount1, externalResourcesItem1 := range ownedFunctionalitiesItem.ExternalResources {
						var externalResources3 tfTypes.ExternalResourceEntity
						externalResources3.ConnectionID = types.StringPointerValue(externalResourcesItem1.ConnectionID)
						externalResources3.ConnectionName = types.StringPointerValue(externalResourcesItem1.ConnectionName)
						externalResources3.ConnectionType = types.StringPointerValue(externalResourcesItem1.ConnectionType)
						if externalResourcesItem1.CreatedAt != nil {
							externalResources3.CreatedAt = types.StringValue(externalResourcesItem1.CreatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources3.CreatedAt = types.StringNull()
						}
						externalResources3.Name = types.StringPointerValue(externalResourcesItem1.Name)
						externalResources3.RemoteID = types.StringPointerValue(externalResourcesItem1.RemoteID)
						externalResources3.RemoteURL = types.StringPointerValue(externalResourcesItem1.RemoteURL)
						if externalResourcesItem1.UpdatedAt != nil {
							externalResources3.UpdatedAt = types.StringValue(externalResourcesItem1.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							externalResources3.UpdatedAt = types.StringNull()
						}
						if externalResourcesCount1+1 > len(ownedFunctionalities1.ExternalResources) {
							ownedFunctionalities1.ExternalResources = append(ownedFunctionalities1.ExternalResources, externalResources3)
						} else {
							ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionID = externalResources3.ConnectionID
							ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionName = externalResources3.ConnectionName
							ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionType = externalResources3.ConnectionType
							ownedFunctionalities1.ExternalResources[externalResourcesCount1].CreatedAt = externalResources3.CreatedAt
							ownedFunctionalities1.ExternalResources[externalResourcesCount1].Name = externalResources3.Name
							ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteID = externalResources3.RemoteID
							ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteURL = externalResources3.RemoteURL
							ownedFunctionalities1.ExternalResources[externalResourcesCount1].UpdatedAt = externalResources3.UpdatedAt
						}
					}
					ownedFunctionalities1.ID = types.StringPointerValue(ownedFunctionalitiesItem.ID)
					if len(ownedFunctionalitiesItem.Labels) > 0 {
						ownedFunctionalities1.Labels = make(map[string]types.String)
						for key3, value5 := range ownedFunctionalitiesItem.Labels {
							ownedFunctionalities1.Labels[key3] = types.StringValue(value5)
						}
					}
					ownedFunctionalities1.Links = []tfTypes.LinksEntity{}
					for linksCount1, linksItem1 := range ownedFunctionalitiesItem.Links {
						var links3 tfTypes.LinksEntity
						links3.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
						links3.IconURL = types.StringPointerValue(linksItem1.IconURL)
						links3.ID = types.StringPointerValue(linksItem1.ID)
						links3.Name = types.StringPointerValue(linksItem1.Name)
						if linksCount1+1 > len(ownedFunctionalities1.Links) {
							ownedFunctionalities1.Links = append(ownedFunctionalities1.Links, links3)
						} else {
							ownedFunctionalities1.Links[linksCount1].HrefURL = links3.HrefURL
							ownedFunctionalities1.Links[linksCount1].IconURL = links3.IconURL
							ownedFunctionalities1.Links[linksCount1].ID = links3.ID
							ownedFunctionalities1.Links[linksCount1].Name = links3.Name
						}
					}
					ownedFunctionalities1.Name = types.StringPointerValue(ownedFunctionalitiesItem.Name)
					if ownedFunctionalitiesItem.Owner == nil {
						ownedFunctionalities1.Owner = nil
					} else {
						ownedFunctionalities1.Owner = &tfTypes.TeamEntity1{}
					}
					ownedFunctionalities1.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Slug)
					if ownedFunctionalitiesItem.UpdatedAt != nil {
						ownedFunctionalities1.UpdatedAt = types.StringValue(ownedFunctionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						ownedFunctionalities1.UpdatedAt = types.StringNull()
					}
					if ownedFunctionalitiesItem.UpdatedBy == nil {
						ownedFunctionalities1.UpdatedBy = nil
					} else {
						ownedFunctionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
						ownedFunctionalities1.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Email)
						ownedFunctionalities1.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.ID)
						ownedFunctionalities1.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Name)
						ownedFunctionalities1.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Source)
					}
					if ownedFunctionalitiesCount+1 > len(teams1.OwnedFunctionalities) {
						teams1.OwnedFunctionalities = append(teams1.OwnedFunctionalities, ownedFunctionalities1)
					} else {
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].ActiveIncidents = ownedFunctionalities1.ActiveIncidents
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].AlertOnAdd = ownedFunctionalities1.AlertOnAdd
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].AutoAddRespondingTeam = ownedFunctionalities1.AutoAddRespondingTeam
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].CreatedAt = ownedFunctionalities1.CreatedAt
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].Description = ownedFunctionalities1.Description
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].ExternalResources = ownedFunctionalities1.ExternalResources
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].ID = ownedFunctionalities1.ID
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].Labels = ownedFunctionalities1.Labels
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].Links = ownedFunctionalities1.Links
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].Name = ownedFunctionalities1.Name
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].Owner = ownedFunctionalities1.Owner
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].Slug = ownedFunctionalities1.Slug
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedAt = ownedFunctionalities1.UpdatedAt
						teams1.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedBy = ownedFunctionalities1.UpdatedBy
					}
				}
				teams1.OwnedRunbooks = []tfTypes.SlimRunbookEntity{}
				for ownedRunbooksCount, ownedRunbooksItem := range teamsItem.OwnedRunbooks {
					var ownedRunbooks1 tfTypes.SlimRunbookEntity
					if ownedRunbooksItem.AttachmentRule == nil {
						ownedRunbooks1.AttachmentRule = nil
					} else {
						ownedRunbooks1.AttachmentRule = &tfTypes.RulesRuleEntity{}
						if ownedRunbooksItem.AttachmentRule.Logic == nil {
							ownedRunbooks1.AttachmentRule.Logic = nil
						} else {
							ownedRunbooks1.AttachmentRule.Logic = &tfTypes.TeamEntity1{}
						}
						if ownedRunbooksItem.AttachmentRule.UserData == nil {
							ownedRunbooks1.AttachmentRule.UserData = nil
						} else {
							ownedRunbooks1.AttachmentRule.UserData = &tfTypes.FHTypesGenericEntity{}
							ownedRunbooks1.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Label)
							ownedRunbooks1.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Type)
							ownedRunbooks1.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Value)
						}
					}
					ownedRunbooks1.Categories = types.StringPointerValue(ownedRunbooksItem.Categories)
					if ownedRunbooksItem.CreatedAt != nil {
						ownedRunbooks1.CreatedAt = types.StringValue(ownedRunbooksItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						ownedRunbooks1.CreatedAt = types.StringNull()
					}
					ownedRunbooks1.Description = types.StringPointerValue(ownedRunbooksItem.Description)
					ownedRunbooks1.ID = types.StringPointerValue(ownedRunbooksItem.ID)
					ownedRunbooks1.Name = types.StringPointerValue(ownedRunbooksItem.Name)
					if ownedRunbooksItem.Owner == nil {
						ownedRunbooks1.Owner = nil
					} else {
						ownedRunbooks1.Owner = &tfTypes.TeamEntity1{}
					}
					ownedRunbooks1.Summary = types.StringPointerValue(ownedRunbooksItem.Summary)
					ownedRunbooks1.Type = types.StringPointerValue(ownedRunbooksItem.Type)
					if ownedRunbooksItem.UpdatedAt != nil {
						ownedRunbooks1.UpdatedAt = types.StringValue(ownedRunbooksItem.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						ownedRunbooks1.UpdatedAt = types.StringNull()
					}
					if ownedRunbooksCount+1 > len(teams1.OwnedRunbooks) {
						teams1.OwnedRunbooks = append(teams1.OwnedRunbooks, ownedRunbooks1)
					} else {
						teams1.OwnedRunbooks[ownedRunbooksCount].AttachmentRule = ownedRunbooks1.AttachmentRule
						teams1.OwnedRunbooks[ownedRunbooksCount].Categories = ownedRunbooks1.Categories
						teams1.OwnedRunbooks[ownedRunbooksCount].CreatedAt = ownedRunbooks1.CreatedAt
						teams1.OwnedRunbooks[ownedRunbooksCount].Description = ownedRunbooks1.Description
						teams1.OwnedRunbooks[ownedRunbooksCount].ID = ownedRunbooks1.ID
						teams1.OwnedRunbooks[ownedRunbooksCount].Name = ownedRunbooks1.Name
						teams1.OwnedRunbooks[ownedRunbooksCount].Owner = ownedRunbooks1.Owner
						teams1.OwnedRunbooks[ownedRunbooksCount].Summary = ownedRunbooks1.Summary
						teams1.OwnedRunbooks[ownedRunbooksCount].Type = ownedRunbooks1.Type
						teams1.OwnedRunbooks[ownedRunbooksCount].UpdatedAt = ownedRunbooks1.UpdatedAt
					}
				}
				teams1.SignalsIcalURL = types.StringPointerValue(teamsItem.SignalsIcalURL)
				if teamsItem.SlackChannel == nil {
					teams1.SlackChannel = nil
				} else {
					teams1.SlackChannel = &tfTypes.IntegrationsSlackSlackChannelEntity{}
					teams1.SlackChannel.ID = types.StringPointerValue(teamsItem.SlackChannel.ID)
					teams1.SlackChannel.Name = types.StringPointerValue(teamsItem.SlackChannel.Name)
					teams1.SlackChannel.SlackChannelID = types.StringPointerValue(teamsItem.SlackChannel.SlackChannelID)
				}
				teams1.Slug = types.StringPointerValue(teamsItem.Slug)
				if teamsItem.UpdatedAt != nil {
					teams1.UpdatedAt = types.StringValue(teamsItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					teams1.UpdatedAt = types.StringNull()
				}
				if teamsCount+1 > len(r.TemplateValues.Teams) {
					r.TemplateValues.Teams = append(r.TemplateValues.Teams, teams1)
				} else {
					r.TemplateValues.Teams[teamsCount].CreatedAt = teams1.CreatedAt
					r.TemplateValues.Teams[teamsCount].CreatedBy = teams1.CreatedBy
					r.TemplateValues.Teams[teamsCount].Description = teams1.Description
					r.TemplateValues.Teams[teamsCount].Functionalities = teams1.Functionalities
					r.TemplateValues.Teams[teamsCount].ID = teams1.ID
					r.TemplateValues.Teams[teamsCount].Memberships = teams1.Memberships
					r.TemplateValues.Teams[teamsCount].MsTeamsChannel = teams1.MsTeamsChannel
					r.TemplateValues.Teams[teamsCount].Name = teams1.Name
					r.TemplateValues.Teams[teamsCount].OwnedFunctionalities = teams1.OwnedFunctionalities
					r.TemplateValues.Teams[teamsCount].OwnedRunbooks = teams1.OwnedRunbooks
					r.TemplateValues.Teams[teamsCount].SignalsIcalURL = teams1.SignalsIcalURL
					r.TemplateValues.Teams[teamsCount].SlackChannel = teams1.SlackChannel
					r.TemplateValues.Teams[teamsCount].Slug = teams1.Slug
					r.TemplateValues.Teams[teamsCount].UpdatedAt = teams1.UpdatedAt
				}
			}
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
	}
}

func (r *IncidentTypeResourceModel) ToSharedPatchV1IncidentTypesID() *shared.PatchV1IncidentTypesID {
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Template.Description.IsUnknown() && !r.Template.Description.IsNull() {
		*description = r.Template.Description.ValueString()
	} else {
		description = nil
	}
	customerImpactSummary := new(string)
	if !r.Template.CustomerImpactSummary.IsUnknown() && !r.Template.CustomerImpactSummary.IsNull() {
		*customerImpactSummary = r.Template.CustomerImpactSummary.ValueString()
	} else {
		customerImpactSummary = nil
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Template.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	severity := new(string)
	if !r.Template.Severity.IsUnknown() && !r.Template.Severity.IsNull() {
		*severity = r.Template.Severity.ValueString()
	} else {
		severity = nil
	}
	priority := new(string)
	if !r.Template.Priority.IsUnknown() && !r.Template.Priority.IsNull() {
		*priority = r.Template.Priority.ValueString()
	} else {
		priority = nil
	}
	var tagList []string = []string{}
	for _, tagListItem := range r.Template.TagList {
		tagList = append(tagList, tagListItem.ValueString())
	}
	var runbookIds []string = []string{}
	for _, runbookIdsItem := range r.Template.RunbookIds {
		runbookIds = append(runbookIds, runbookIdsItem.ValueString())
	}
	privateIncident := new(bool)
	if !r.Template.PrivateIncident.IsUnknown() && !r.Template.PrivateIncident.IsNull() {
		*privateIncident = r.Template.PrivateIncident.ValueBool()
	} else {
		privateIncident = nil
	}
	var teamIds []string = []string{}
	for _, teamIdsItem := range r.Template.TeamIds {
		teamIds = append(teamIds, teamIdsItem.ValueString())
	}
	var impacts []shared.PatchV1IncidentTypesIDImpacts = []shared.PatchV1IncidentTypesIDImpacts{}
	for _, impactsItem := range r.Template.Impacts {
		var id string
		id = impactsItem.ID.ValueString()

		var conditionID string
		conditionID = impactsItem.ConditionID.ValueString()

		impacts = append(impacts, shared.PatchV1IncidentTypesIDImpacts{
			ID:          id,
			ConditionID: conditionID,
		})
	}
	template := shared.PatchV1IncidentTypesIDTemplate{
		Description:           description,
		CustomerImpactSummary: customerImpactSummary,
		Labels:                labels,
		Severity:              severity,
		Priority:              priority,
		TagList:               tagList,
		RunbookIds:            runbookIds,
		PrivateIncident:       privateIncident,
		TeamIds:               teamIds,
		Impacts:               impacts,
	}
	out := shared.PatchV1IncidentTypesID{
		Name:     name,
		Template: template,
	}
	return &out
}
