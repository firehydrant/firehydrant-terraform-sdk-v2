// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"time"
)

func (r *UsersDataSourceModel) RefreshFromSharedUserEntityPaginated(resp *shared.UserEntityPaginated) {
	if resp != nil {
		r.Data = []tfTypes.UserEntity{}
		if len(r.Data) > len(resp.Data) {
			r.Data = r.Data[:len(resp.Data)]
		}
		for dataCount, dataItem := range resp.Data {
			var data1 tfTypes.UserEntity
			if dataItem.CreatedAt != nil {
				data1.CreatedAt = types.StringValue(dataItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				data1.CreatedAt = types.StringNull()
			}
			data1.Email = types.StringPointerValue(dataItem.Email)
			data1.ID = types.StringPointerValue(dataItem.ID)
			data1.Name = types.StringPointerValue(dataItem.Name)
			data1.SignalsEnabledNotificationTypes = []types.String{}
			for _, v := range dataItem.SignalsEnabledNotificationTypes {
				data1.SignalsEnabledNotificationTypes = append(data1.SignalsEnabledNotificationTypes, types.StringValue(v))
			}
			data1.SlackLinked = types.BoolPointerValue(dataItem.SlackLinked)
			data1.SlackUserID = types.StringPointerValue(dataItem.SlackUserID)
			if dataItem.UpdatedAt != nil {
				data1.UpdatedAt = types.StringValue(dataItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				data1.UpdatedAt = types.StringNull()
			}
			if dataCount+1 > len(r.Data) {
				r.Data = append(r.Data, data1)
			} else {
				r.Data[dataCount].CreatedAt = data1.CreatedAt
				r.Data[dataCount].Email = data1.Email
				r.Data[dataCount].ID = data1.ID
				r.Data[dataCount].Name = data1.Name
				r.Data[dataCount].SignalsEnabledNotificationTypes = data1.SignalsEnabledNotificationTypes
				r.Data[dataCount].SlackLinked = data1.SlackLinked
				r.Data[dataCount].SlackUserID = data1.SlackUserID
				r.Data[dataCount].UpdatedAt = data1.UpdatedAt
			}
		}
		if resp.Pagination == nil {
			r.Pagination = nil
		} else {
			r.Pagination = &tfTypes.PaginationEntity{}
			if resp.Pagination.Count != nil {
				r.Pagination.Count = types.Int64Value(int64(*resp.Pagination.Count))
			} else {
				r.Pagination.Count = types.Int64Null()
			}
			if resp.Pagination.Items != nil {
				r.Pagination.Items = types.Int64Value(int64(*resp.Pagination.Items))
			} else {
				r.Pagination.Items = types.Int64Null()
			}
			if resp.Pagination.Last != nil {
				r.Pagination.Last = types.Int64Value(int64(*resp.Pagination.Last))
			} else {
				r.Pagination.Last = types.Int64Null()
			}
			if resp.Pagination.Next != nil {
				r.Pagination.Next = types.Int64Value(int64(*resp.Pagination.Next))
			} else {
				r.Pagination.Next = types.Int64Null()
			}
			if resp.Pagination.Page != nil {
				r.Pagination.Page = types.Int64Value(int64(*resp.Pagination.Page))
			} else {
				r.Pagination.Page = types.Int64Null()
			}
			if resp.Pagination.Pages != nil {
				r.Pagination.Pages = types.Int64Value(int64(*resp.Pagination.Pages))
			} else {
				r.Pagination.Pages = types.Int64Null()
			}
			if resp.Pagination.Prev != nil {
				r.Pagination.Prev = types.Int64Value(int64(*resp.Pagination.Prev))
			} else {
				r.Pagination.Prev = types.Int64Null()
			}
		}
	}
}
