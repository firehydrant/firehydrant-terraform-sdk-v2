// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/firehydrant/terraform-provider-firehydrant/internal/sdk/models/shared"
)

func (r *RunbookResourceModel) ToSharedPostV1Runbooks() *shared.PostV1Runbooks {
	var name string
	name = r.Name.ValueString()

	typeVar := shared.PostV1RunbooksType(r.Type.ValueString())
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	autoAttachToRestrictedIncidents := new(bool)
	if !r.AutoAttachToRestrictedIncidents.IsUnknown() && !r.AutoAttachToRestrictedIncidents.IsNull() {
		*autoAttachToRestrictedIncidents = r.AutoAttachToRestrictedIncidents.ValueBool()
	} else {
		autoAttachToRestrictedIncidents = nil
	}
	tutorial := new(bool)
	if !r.Tutorial.IsUnknown() && !r.Tutorial.IsNull() {
		*tutorial = r.Tutorial.ValueBool()
	} else {
		tutorial = nil
	}
	var owner *shared.PostV1RunbooksOwner
	if r.Owner != nil {
		var id string
		id = r.Owner.ID.ValueString()

		owner = &shared.PostV1RunbooksOwner{
			ID: id,
		}
	}
	var attachmentRule *shared.AttachmentRule
	if r.AttachmentRule != nil {
		var logic string
		logic = r.AttachmentRule.Logic.ValueString()

		userData := new(string)
		if !r.AttachmentRule.UserData.IsUnknown() && !r.AttachmentRule.UserData.IsNull() {
			*userData = r.AttachmentRule.UserData.ValueString()
		} else {
			userData = nil
		}
		attachmentRule = &shared.AttachmentRule{
			Logic:    logic,
			UserData: userData,
		}
	}
	var steps []shared.PostV1RunbooksSteps = []shared.PostV1RunbooksSteps{}
	for _, stepsItem := range r.Steps {
		var name1 string
		name1 = stepsItem.Name.ValueString()

		var actionID string
		actionID = stepsItem.ActionID.ValueString()

		var rule *shared.Rule
		if stepsItem.Rule != nil {
			var logic1 string
			logic1 = stepsItem.Rule.Logic.ValueString()

			userData1 := new(string)
			if !stepsItem.Rule.UserData.IsUnknown() && !stepsItem.Rule.UserData.IsNull() {
				*userData1 = stepsItem.Rule.UserData.ValueString()
			} else {
				userData1 = nil
			}
			rule = &shared.Rule{
				Logic:    logic1,
				UserData: userData1,
			}
		}
		steps = append(steps, shared.PostV1RunbooksSteps{
			Name:     name1,
			ActionID: actionID,
			Rule:     rule,
		})
	}
	out := shared.PostV1Runbooks{
		Name:                            name,
		Type:                            typeVar,
		Summary:                         summary,
		Description:                     description,
		AutoAttachToRestrictedIncidents: autoAttachToRestrictedIncidents,
		Tutorial:                        tutorial,
		Owner:                           owner,
		AttachmentRule:                  attachmentRule,
		Steps:                           steps,
	}
	return &out
}

func (r *RunbookResourceModel) ToSharedPutV1RunbooksRunbookID() *shared.PutV1RunbooksRunbookID {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	summary := new(string)
	if !r.Summary.IsUnknown() && !r.Summary.IsNull() {
		*summary = r.Summary.ValueString()
	} else {
		summary = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	tutorial := new(bool)
	if !r.Tutorial.IsUnknown() && !r.Tutorial.IsNull() {
		*tutorial = r.Tutorial.ValueBool()
	} else {
		tutorial = nil
	}
	var owner *shared.PutV1RunbooksRunbookIDOwner
	if r.Owner != nil {
		id := new(string)
		if !r.Owner.ID.IsUnknown() && !r.Owner.ID.IsNull() {
			*id = r.Owner.ID.ValueString()
		} else {
			id = nil
		}
		owner = &shared.PutV1RunbooksRunbookIDOwner{
			ID: id,
		}
	}
	var attachmentRule *shared.PutV1RunbooksRunbookIDAttachmentRule
	if r.AttachmentRule != nil {
		var logic string
		logic = r.AttachmentRule.Logic.ValueString()

		userData := new(string)
		if !r.AttachmentRule.UserData.IsUnknown() && !r.AttachmentRule.UserData.IsNull() {
			*userData = r.AttachmentRule.UserData.ValueString()
		} else {
			userData = nil
		}
		attachmentRule = &shared.PutV1RunbooksRunbookIDAttachmentRule{
			Logic:    logic,
			UserData: userData,
		}
	}
	var steps []shared.PutV1RunbooksRunbookIDSteps = []shared.PutV1RunbooksRunbookIDSteps{}
	for _, stepsItem := range r.Steps {
		stepID := new(string)
		if !stepsItem.ActionID.IsUnknown() && !stepsItem.ActionID.IsNull() {
			*stepID = stepsItem.ActionID.ValueString()
		} else {
			stepID = nil
		}
		var name1 string
		name1 = stepsItem.Name.ValueString()

		var actionID string
		actionID = stepsItem.ActionID.ValueString()

		var rule *shared.PutV1RunbooksRunbookIDRule
		if stepsItem.Rule != nil {
			var logic1 string
			logic1 = stepsItem.Rule.Logic.ValueString()

			userData1 := new(string)
			if !stepsItem.Rule.UserData.IsUnknown() && !stepsItem.Rule.UserData.IsNull() {
				*userData1 = stepsItem.Rule.UserData.ValueString()
			} else {
				userData1 = nil
			}
			rule = &shared.PutV1RunbooksRunbookIDRule{
				Logic:    logic1,
				UserData: userData1,
			}
		}
		steps = append(steps, shared.PutV1RunbooksRunbookIDSteps{
			StepID:   stepID,
			Name:     name1,
			ActionID: actionID,
			Rule:     rule,
		})
	}
	autoAttachToRestrictedIncidents := new(bool)
	if !r.AutoAttachToRestrictedIncidents.IsUnknown() && !r.AutoAttachToRestrictedIncidents.IsNull() {
		*autoAttachToRestrictedIncidents = r.AutoAttachToRestrictedIncidents.ValueBool()
	} else {
		autoAttachToRestrictedIncidents = nil
	}
	out := shared.PutV1RunbooksRunbookID{
		Name:                            name,
		Summary:                         summary,
		Description:                     description,
		Tutorial:                        tutorial,
		Owner:                           owner,
		AttachmentRule:                  attachmentRule,
		Steps:                           steps,
		AutoAttachToRestrictedIncidents: autoAttachToRestrictedIncidents,
	}
	return &out
}
