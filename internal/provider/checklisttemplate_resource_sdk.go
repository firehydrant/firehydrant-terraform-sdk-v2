// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"time"
)

func (r *ChecklistTemplateResourceModel) ToSharedPostV1ChecklistTemplates() *shared.PostV1ChecklistTemplates {
	var name string
	name = r.Name.ValueString()

	var checks []shared.Checks = []shared.Checks{}
	for _, checksItem := range r.Checks {
		var name1 string
		name1 = checksItem.Name.ValueString()

		description := new(string)
		if !checksItem.Description.IsUnknown() && !checksItem.Description.IsNull() {
			*description = checksItem.Description.ValueString()
		} else {
			description = nil
		}
		checks = append(checks, shared.Checks{
			Name:        name1,
			Description: description,
		})
	}
	description1 := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description1 = r.Description.ValueString()
	} else {
		description1 = nil
	}
	teamID := new(string)
	if !r.TeamID.IsUnknown() && !r.TeamID.IsNull() {
		*teamID = r.TeamID.ValueString()
	} else {
		teamID = nil
	}
	out := shared.PostV1ChecklistTemplates{
		Name:        name,
		Checks:      checks,
		Description: description1,
		TeamID:      teamID,
	}
	return &out
}

func (r *ChecklistTemplateResourceModel) RefreshFromSharedChecklistTemplateEntity(resp *shared.ChecklistTemplateEntity) {
	if resp != nil {
		r.Checks = []tfTypes.Checks{}
		if len(r.Checks) > len(resp.Checks) {
			r.Checks = r.Checks[:len(resp.Checks)]
		}
		for checksCount, checksItem := range resp.Checks {
			var checks1 tfTypes.Checks
			checks1.Description = types.StringPointerValue(checksItem.Description)
			checks1.ID = types.StringPointerValue(checksItem.ID)
			checks1.Name = types.StringPointerValue(checksItem.Name)
			checks1.Status = types.BoolPointerValue(checksItem.Status)
			if checksCount+1 > len(r.Checks) {
				r.Checks = append(r.Checks, checks1)
			} else {
				r.Checks[checksCount].Description = checks1.Description
				r.Checks[checksCount].ID = checks1.ID
				r.Checks[checksCount].Name = checks1.Name
				r.Checks[checksCount].Status = checks1.Status
			}
		}
		r.CreatedAt = types.StringPointerValue(resp.CreatedAt)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringPointerValue(resp.ID)
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Owner == nil {
			r.Owner = nil
		} else {
			r.Owner = &tfTypes.TeamEntity{}
			if resp.Owner.CreatedAt != nil {
				r.Owner.CreatedAt = types.StringValue(resp.Owner.CreatedAt.Format(time.RFC3339Nano))
			} else {
				r.Owner.CreatedAt = types.StringNull()
			}
			if resp.Owner.CreatedBy == nil {
				r.Owner.CreatedBy = nil
			} else {
				r.Owner.CreatedBy = &tfTypes.AuthorEntity{}
				r.Owner.CreatedBy.Email = types.StringPointerValue(resp.Owner.CreatedBy.Email)
				r.Owner.CreatedBy.ID = types.StringPointerValue(resp.Owner.CreatedBy.ID)
				r.Owner.CreatedBy.Name = types.StringPointerValue(resp.Owner.CreatedBy.Name)
				r.Owner.CreatedBy.Source = types.StringPointerValue(resp.Owner.CreatedBy.Source)
			}
			r.Owner.Description = types.StringPointerValue(resp.Owner.Description)
			r.Owner.Functionalities = []tfTypes.FunctionalityEntity{}
			if len(r.Owner.Functionalities) > len(resp.Owner.Functionalities) {
				r.Owner.Functionalities = r.Owner.Functionalities[:len(resp.Owner.Functionalities)]
			}
			for functionalitiesCount, functionalitiesItem := range resp.Owner.Functionalities {
				var functionalities1 tfTypes.FunctionalityEntity
				functionalities1.ActiveIncidents = []types.String{}
				for _, v := range functionalitiesItem.ActiveIncidents {
					functionalities1.ActiveIncidents = append(functionalities1.ActiveIncidents, types.StringValue(v))
				}
				functionalities1.AlertOnAdd = types.BoolPointerValue(functionalitiesItem.AlertOnAdd)
				functionalities1.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem.AutoAddRespondingTeam)
				if functionalitiesItem.CreatedAt != nil {
					functionalities1.CreatedAt = types.StringValue(functionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					functionalities1.CreatedAt = types.StringNull()
				}
				functionalities1.Description = types.StringPointerValue(functionalitiesItem.Description)
				functionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
				for externalResourcesCount, externalResourcesItem := range functionalitiesItem.ExternalResources {
					var externalResources1 tfTypes.ExternalResourceEntity
					externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
					externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
					externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
					if externalResourcesItem.CreatedAt != nil {
						externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources1.CreatedAt = types.StringNull()
					}
					externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
					externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
					externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
					if externalResourcesItem.UpdatedAt != nil {
						externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources1.UpdatedAt = types.StringNull()
					}
					if externalResourcesCount+1 > len(functionalities1.ExternalResources) {
						functionalities1.ExternalResources = append(functionalities1.ExternalResources, externalResources1)
					} else {
						functionalities1.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
						functionalities1.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
						functionalities1.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
						functionalities1.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
						functionalities1.ExternalResources[externalResourcesCount].Name = externalResources1.Name
						functionalities1.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
						functionalities1.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
						functionalities1.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
					}
				}
				functionalities1.ID = types.StringPointerValue(functionalitiesItem.ID)
				if len(functionalitiesItem.Labels) > 0 {
					functionalities1.Labels = make(map[string]types.String)
					for key, value := range functionalitiesItem.Labels {
						functionalities1.Labels[key] = types.StringValue(value)
					}
				}
				functionalities1.Links = []tfTypes.LinksEntity{}
				for linksCount, linksItem := range functionalitiesItem.Links {
					var links1 tfTypes.LinksEntity
					links1.HrefURL = types.StringPointerValue(linksItem.HrefURL)
					links1.IconURL = types.StringPointerValue(linksItem.IconURL)
					links1.ID = types.StringPointerValue(linksItem.ID)
					links1.Name = types.StringPointerValue(linksItem.Name)
					if linksCount+1 > len(functionalities1.Links) {
						functionalities1.Links = append(functionalities1.Links, links1)
					} else {
						functionalities1.Links[linksCount].HrefURL = links1.HrefURL
						functionalities1.Links[linksCount].IconURL = links1.IconURL
						functionalities1.Links[linksCount].ID = links1.ID
						functionalities1.Links[linksCount].Name = links1.Name
					}
				}
				functionalities1.Name = types.StringPointerValue(functionalitiesItem.Name)
				if functionalitiesItem.Owner == nil {
					functionalities1.Owner = nil
				} else {
					functionalities1.Owner = &tfTypes.TeamEntity1{}
				}
				functionalities1.Slug = types.StringPointerValue(functionalitiesItem.Slug)
				if functionalitiesItem.UpdatedAt != nil {
					functionalities1.UpdatedAt = types.StringValue(functionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					functionalities1.UpdatedAt = types.StringNull()
				}
				if functionalitiesItem.UpdatedBy == nil {
					functionalities1.UpdatedBy = nil
				} else {
					functionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
					functionalities1.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem.UpdatedBy.Email)
					functionalities1.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem.UpdatedBy.ID)
					functionalities1.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem.UpdatedBy.Name)
					functionalities1.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem.UpdatedBy.Source)
				}
				if functionalitiesCount+1 > len(r.Owner.Functionalities) {
					r.Owner.Functionalities = append(r.Owner.Functionalities, functionalities1)
				} else {
					r.Owner.Functionalities[functionalitiesCount].ActiveIncidents = functionalities1.ActiveIncidents
					r.Owner.Functionalities[functionalitiesCount].AlertOnAdd = functionalities1.AlertOnAdd
					r.Owner.Functionalities[functionalitiesCount].AutoAddRespondingTeam = functionalities1.AutoAddRespondingTeam
					r.Owner.Functionalities[functionalitiesCount].CreatedAt = functionalities1.CreatedAt
					r.Owner.Functionalities[functionalitiesCount].Description = functionalities1.Description
					r.Owner.Functionalities[functionalitiesCount].ExternalResources = functionalities1.ExternalResources
					r.Owner.Functionalities[functionalitiesCount].ID = functionalities1.ID
					r.Owner.Functionalities[functionalitiesCount].Labels = functionalities1.Labels
					r.Owner.Functionalities[functionalitiesCount].Links = functionalities1.Links
					r.Owner.Functionalities[functionalitiesCount].Name = functionalities1.Name
					r.Owner.Functionalities[functionalitiesCount].Owner = functionalities1.Owner
					r.Owner.Functionalities[functionalitiesCount].Slug = functionalities1.Slug
					r.Owner.Functionalities[functionalitiesCount].UpdatedAt = functionalities1.UpdatedAt
					r.Owner.Functionalities[functionalitiesCount].UpdatedBy = functionalities1.UpdatedBy
				}
			}
			r.Owner.ID = types.StringPointerValue(resp.Owner.ID)
			r.Owner.Memberships = []tfTypes.MembershipEntity{}
			if len(r.Owner.Memberships) > len(resp.Owner.Memberships) {
				r.Owner.Memberships = r.Owner.Memberships[:len(resp.Owner.Memberships)]
			}
			for membershipsCount, membershipsItem := range resp.Owner.Memberships {
				var memberships1 tfTypes.MembershipEntity
				if membershipsItem.DefaultIncidentRole == nil {
					memberships1.DefaultIncidentRole = nil
				} else {
					memberships1.DefaultIncidentRole = &tfTypes.IncidentRoleEntity{}
					if membershipsItem.DefaultIncidentRole.CreatedAt != nil {
						memberships1.DefaultIncidentRole.CreatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.CreatedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.DefaultIncidentRole.CreatedAt = types.StringNull()
					}
					memberships1.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Description)
					if membershipsItem.DefaultIncidentRole.DiscardedAt != nil {
						memberships1.DefaultIncidentRole.DiscardedAt = types.StringValue(membershipsItem.DefaultIncidentRole.DiscardedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.DefaultIncidentRole.DiscardedAt = types.StringNull()
					}
					memberships1.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem.DefaultIncidentRole.ID)
					memberships1.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Name)
					memberships1.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Summary)
					if membershipsItem.DefaultIncidentRole.UpdatedAt != nil {
						memberships1.DefaultIncidentRole.UpdatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.DefaultIncidentRole.UpdatedAt = types.StringNull()
					}
				}
				if membershipsItem.Schedule == nil {
					memberships1.Schedule = nil
				} else {
					memberships1.Schedule = &tfTypes.ScheduleEntity{}
					memberships1.Schedule.Discarded = types.BoolPointerValue(membershipsItem.Schedule.Discarded)
					memberships1.Schedule.ID = types.StringPointerValue(membershipsItem.Schedule.ID)
					memberships1.Schedule.Integration = types.StringPointerValue(membershipsItem.Schedule.Integration)
					memberships1.Schedule.Name = types.StringPointerValue(membershipsItem.Schedule.Name)
				}
				if membershipsItem.User == nil {
					memberships1.User = nil
				} else {
					memberships1.User = &tfTypes.UserEntity{}
					if membershipsItem.User.CreatedAt != nil {
						memberships1.User.CreatedAt = types.StringValue(membershipsItem.User.CreatedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.User.CreatedAt = types.StringNull()
					}
					memberships1.User.Email = types.StringPointerValue(membershipsItem.User.Email)
					memberships1.User.ID = types.StringPointerValue(membershipsItem.User.ID)
					memberships1.User.Name = types.StringPointerValue(membershipsItem.User.Name)
					memberships1.User.SignalsEnabledNotificationTypes = []types.String{}
					for _, v := range membershipsItem.User.SignalsEnabledNotificationTypes {
						memberships1.User.SignalsEnabledNotificationTypes = append(memberships1.User.SignalsEnabledNotificationTypes, types.StringValue(v))
					}
					memberships1.User.SlackLinked = types.BoolPointerValue(membershipsItem.User.SlackLinked)
					memberships1.User.SlackUserID = types.StringPointerValue(membershipsItem.User.SlackUserID)
					if membershipsItem.User.UpdatedAt != nil {
						memberships1.User.UpdatedAt = types.StringValue(membershipsItem.User.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						memberships1.User.UpdatedAt = types.StringNull()
					}
				}
				if membershipsCount+1 > len(r.Owner.Memberships) {
					r.Owner.Memberships = append(r.Owner.Memberships, memberships1)
				} else {
					r.Owner.Memberships[membershipsCount].DefaultIncidentRole = memberships1.DefaultIncidentRole
					r.Owner.Memberships[membershipsCount].Schedule = memberships1.Schedule
					r.Owner.Memberships[membershipsCount].User = memberships1.User
				}
			}
			if resp.Owner.MsTeamsChannel == nil {
				r.Owner.MsTeamsChannel = nil
			} else {
				r.Owner.MsTeamsChannel = &tfTypes.IntegrationsMicrosoftTeamsV2ChannelEntity{}
				r.Owner.MsTeamsChannel.ChannelID = types.StringPointerValue(resp.Owner.MsTeamsChannel.ChannelID)
				r.Owner.MsTeamsChannel.ChannelName = types.StringPointerValue(resp.Owner.MsTeamsChannel.ChannelName)
				r.Owner.MsTeamsChannel.ChannelURL = types.StringPointerValue(resp.Owner.MsTeamsChannel.ChannelURL)
				r.Owner.MsTeamsChannel.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.ID)
				if resp.Owner.MsTeamsChannel.Incident == nil {
					r.Owner.MsTeamsChannel.Incident = nil
				} else {
					r.Owner.MsTeamsChannel.Incident = &tfTypes.IncidentEntity{}
					r.Owner.MsTeamsChannel.Incident.Active = types.BoolPointerValue(resp.Owner.MsTeamsChannel.Incident.Active)
					r.Owner.MsTeamsChannel.Incident.AiIncidentSummary = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.AiIncidentSummary)
					r.Owner.MsTeamsChannel.Incident.ChannelID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ChannelID)
					r.Owner.MsTeamsChannel.Incident.ChannelName = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ChannelName)
					r.Owner.MsTeamsChannel.Incident.ChannelReference = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ChannelReference)
					r.Owner.MsTeamsChannel.Incident.ChannelStatus = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ChannelStatus)
					r.Owner.MsTeamsChannel.Incident.ConferenceBridges = []tfTypes.IncidentsConferenceBridgeEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.ConferenceBridges) > len(resp.Owner.MsTeamsChannel.Incident.ConferenceBridges) {
						r.Owner.MsTeamsChannel.Incident.ConferenceBridges = r.Owner.MsTeamsChannel.Incident.ConferenceBridges[:len(resp.Owner.MsTeamsChannel.Incident.ConferenceBridges)]
					}
					for conferenceBridgesCount, conferenceBridgesItem := range resp.Owner.MsTeamsChannel.Incident.ConferenceBridges {
						var conferenceBridges1 tfTypes.IncidentsConferenceBridgeEntity
						conferenceBridges1.ID = types.StringPointerValue(conferenceBridgesItem.ID)
						if conferenceBridgesCount+1 > len(r.Owner.MsTeamsChannel.Incident.ConferenceBridges) {
							r.Owner.MsTeamsChannel.Incident.ConferenceBridges = append(r.Owner.MsTeamsChannel.Incident.ConferenceBridges, conferenceBridges1)
						} else {
							r.Owner.MsTeamsChannel.Incident.ConferenceBridges[conferenceBridgesCount].ID = conferenceBridges1.ID
						}
					}
					if resp.Owner.MsTeamsChannel.Incident.ContextObject == nil {
						r.Owner.MsTeamsChannel.Incident.ContextObject = nil
					} else {
						r.Owner.MsTeamsChannel.Incident.ContextObject = &tfTypes.IncidentsContextObjectEntity{}
						r.Owner.MsTeamsChannel.Incident.ContextObject.ContextDescription = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ContextObject.ContextDescription)
						r.Owner.MsTeamsChannel.Incident.ContextObject.ContextTag = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ContextObject.ContextTag)
						r.Owner.MsTeamsChannel.Incident.ContextObject.ObjectID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ContextObject.ObjectID)
						r.Owner.MsTeamsChannel.Incident.ContextObject.ObjectType = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ContextObject.ObjectType)
					}
					r.Owner.MsTeamsChannel.Incident.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
					if len(r.Owner.MsTeamsChannel.Incident.Conversations) > len(resp.Owner.MsTeamsChannel.Incident.Conversations) {
						r.Owner.MsTeamsChannel.Incident.Conversations = r.Owner.MsTeamsChannel.Incident.Conversations[:len(resp.Owner.MsTeamsChannel.Incident.Conversations)]
					}
					for conversationsCount, conversationsItem := range resp.Owner.MsTeamsChannel.Incident.Conversations {
						var conversations1 tfTypes.ConversationsAPIEntitiesReference
						if conversationsItem.Channel == nil {
							conversations1.Channel = nil
						} else {
							conversations1.Channel = &tfTypes.ConversationsAPIEntitiesChannel{}
							conversations1.Channel.Name = types.StringPointerValue(conversationsItem.Channel.Name)
						}
						conversations1.CommentsURL = types.StringPointerValue(conversationsItem.CommentsURL)
						conversations1.Field = types.StringPointerValue(conversationsItem.Field)
						conversations1.ID = types.StringPointerValue(conversationsItem.ID)
						conversations1.ResourceClass = types.StringPointerValue(conversationsItem.ResourceClass)
						conversations1.ResourceID = types.StringPointerValue(conversationsItem.ResourceID)
						if conversationsCount+1 > len(r.Owner.MsTeamsChannel.Incident.Conversations) {
							r.Owner.MsTeamsChannel.Incident.Conversations = append(r.Owner.MsTeamsChannel.Incident.Conversations, conversations1)
						} else {
							r.Owner.MsTeamsChannel.Incident.Conversations[conversationsCount].Channel = conversations1.Channel
							r.Owner.MsTeamsChannel.Incident.Conversations[conversationsCount].CommentsURL = conversations1.CommentsURL
							r.Owner.MsTeamsChannel.Incident.Conversations[conversationsCount].Field = conversations1.Field
							r.Owner.MsTeamsChannel.Incident.Conversations[conversationsCount].ID = conversations1.ID
							r.Owner.MsTeamsChannel.Incident.Conversations[conversationsCount].ResourceClass = conversations1.ResourceClass
							r.Owner.MsTeamsChannel.Incident.Conversations[conversationsCount].ResourceID = conversations1.ResourceID
						}
					}
					if resp.Owner.MsTeamsChannel.Incident.CreatedAt != nil {
						r.Owner.MsTeamsChannel.Incident.CreatedAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.CreatedAt.Format(time.RFC3339Nano))
					} else {
						r.Owner.MsTeamsChannel.Incident.CreatedAt = types.StringNull()
					}
					if resp.Owner.MsTeamsChannel.Incident.CreatedBy == nil {
						r.Owner.MsTeamsChannel.Incident.CreatedBy = nil
					} else {
						r.Owner.MsTeamsChannel.Incident.CreatedBy = &tfTypes.AuthorEntity{}
						r.Owner.MsTeamsChannel.Incident.CreatedBy.Email = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.CreatedBy.Email)
						r.Owner.MsTeamsChannel.Incident.CreatedBy.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.CreatedBy.ID)
						r.Owner.MsTeamsChannel.Incident.CreatedBy.Name = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.CreatedBy.Name)
						r.Owner.MsTeamsChannel.Incident.CreatedBy.Source = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.CreatedBy.Source)
					}
					r.Owner.MsTeamsChannel.Incident.CurrentMilestone = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.CurrentMilestone)
					r.Owner.MsTeamsChannel.Incident.CustomFields = []tfTypes.CustomFieldsFieldValue{}
					if len(r.Owner.MsTeamsChannel.Incident.CustomFields) > len(resp.Owner.MsTeamsChannel.Incident.CustomFields) {
						r.Owner.MsTeamsChannel.Incident.CustomFields = r.Owner.MsTeamsChannel.Incident.CustomFields[:len(resp.Owner.MsTeamsChannel.Incident.CustomFields)]
					}
					for customFieldsCount, customFieldsItem := range resp.Owner.MsTeamsChannel.Incident.CustomFields {
						var customFields1 tfTypes.CustomFieldsFieldValue
						customFields1.Description = types.StringPointerValue(customFieldsItem.Description)
						customFields1.DisplayName = types.StringPointerValue(customFieldsItem.DisplayName)
						customFields1.FieldID = types.StringPointerValue(customFieldsItem.FieldID)
						customFields1.Name = types.StringPointerValue(customFieldsItem.Name)
						customFields1.Slug = types.StringPointerValue(customFieldsItem.Slug)
						customFields1.Value = types.StringPointerValue(customFieldsItem.Value)
						customFields1.ValueArray = types.StringPointerValue(customFieldsItem.ValueArray)
						customFields1.ValueString = types.StringPointerValue(customFieldsItem.ValueString)
						customFields1.ValueType = types.StringPointerValue(customFieldsItem.ValueType)
						if customFieldsCount+1 > len(r.Owner.MsTeamsChannel.Incident.CustomFields) {
							r.Owner.MsTeamsChannel.Incident.CustomFields = append(r.Owner.MsTeamsChannel.Incident.CustomFields, customFields1)
						} else {
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Description = customFields1.Description
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].DisplayName = customFields1.DisplayName
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].FieldID = customFields1.FieldID
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Name = customFields1.Name
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Slug = customFields1.Slug
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].Value = customFields1.Value
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueArray = customFields1.ValueArray
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueString = customFields1.ValueString
							r.Owner.MsTeamsChannel.Incident.CustomFields[customFieldsCount].ValueType = customFields1.ValueType
						}
					}
					r.Owner.MsTeamsChannel.Incident.CustomerImpactSummary = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.CustomerImpactSummary)
					if resp.Owner.MsTeamsChannel.Incident.CustomersImpacted != nil {
						r.Owner.MsTeamsChannel.Incident.CustomersImpacted = types.Int64Value(int64(*resp.Owner.MsTeamsChannel.Incident.CustomersImpacted))
					} else {
						r.Owner.MsTeamsChannel.Incident.CustomersImpacted = types.Int64Null()
					}
					r.Owner.MsTeamsChannel.Incident.Description = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Description)
					if resp.Owner.MsTeamsChannel.Incident.DiscardedAt != nil {
						r.Owner.MsTeamsChannel.Incident.DiscardedAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.DiscardedAt.Format(time.RFC3339Nano))
					} else {
						r.Owner.MsTeamsChannel.Incident.DiscardedAt = types.StringNull()
					}
					r.Owner.MsTeamsChannel.Incident.Environments = []tfTypes.SuccinctEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.Environments) > len(resp.Owner.MsTeamsChannel.Incident.Environments) {
						r.Owner.MsTeamsChannel.Incident.Environments = r.Owner.MsTeamsChannel.Incident.Environments[:len(resp.Owner.MsTeamsChannel.Incident.Environments)]
					}
					for environmentsCount, environmentsItem := range resp.Owner.MsTeamsChannel.Incident.Environments {
						var environments1 tfTypes.SuccinctEntity
						environments1.ID = types.StringPointerValue(environmentsItem.ID)
						environments1.Name = types.StringPointerValue(environmentsItem.Name)
						if environmentsCount+1 > len(r.Owner.MsTeamsChannel.Incident.Environments) {
							r.Owner.MsTeamsChannel.Incident.Environments = append(r.Owner.MsTeamsChannel.Incident.Environments, environments1)
						} else {
							r.Owner.MsTeamsChannel.Incident.Environments[environmentsCount].ID = environments1.ID
							r.Owner.MsTeamsChannel.Incident.Environments[environmentsCount].Name = environments1.Name
						}
					}
					r.Owner.MsTeamsChannel.Incident.FieldRequirements = []tfTypes.IncidentEntityFieldRequirementEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.FieldRequirements) > len(resp.Owner.MsTeamsChannel.Incident.FieldRequirements) {
						r.Owner.MsTeamsChannel.Incident.FieldRequirements = r.Owner.MsTeamsChannel.Incident.FieldRequirements[:len(resp.Owner.MsTeamsChannel.Incident.FieldRequirements)]
					}
					for fieldRequirementsCount, fieldRequirementsItem := range resp.Owner.MsTeamsChannel.Incident.FieldRequirements {
						var fieldRequirements1 tfTypes.IncidentEntityFieldRequirementEntity
						fieldRequirements1.FieldID = types.StringPointerValue(fieldRequirementsItem.FieldID)
						fieldRequirements1.RequiredAtMilestoneID = types.StringPointerValue(fieldRequirementsItem.RequiredAtMilestoneID)
						if fieldRequirementsCount+1 > len(r.Owner.MsTeamsChannel.Incident.FieldRequirements) {
							r.Owner.MsTeamsChannel.Incident.FieldRequirements = append(r.Owner.MsTeamsChannel.Incident.FieldRequirements, fieldRequirements1)
						} else {
							r.Owner.MsTeamsChannel.Incident.FieldRequirements[fieldRequirementsCount].FieldID = fieldRequirements1.FieldID
							r.Owner.MsTeamsChannel.Incident.FieldRequirements[fieldRequirementsCount].RequiredAtMilestoneID = fieldRequirements1.RequiredAtMilestoneID
						}
					}
					r.Owner.MsTeamsChannel.Incident.Functionalities = []tfTypes.SuccinctEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.Functionalities) > len(resp.Owner.MsTeamsChannel.Incident.Functionalities) {
						r.Owner.MsTeamsChannel.Incident.Functionalities = r.Owner.MsTeamsChannel.Incident.Functionalities[:len(resp.Owner.MsTeamsChannel.Incident.Functionalities)]
					}
					for functionalitiesCount1, functionalitiesItem1 := range resp.Owner.MsTeamsChannel.Incident.Functionalities {
						var functionalities3 tfTypes.SuccinctEntity
						functionalities3.ID = types.StringPointerValue(functionalitiesItem1.ID)
						functionalities3.Name = types.StringPointerValue(functionalitiesItem1.Name)
						if functionalitiesCount1+1 > len(r.Owner.MsTeamsChannel.Incident.Functionalities) {
							r.Owner.MsTeamsChannel.Incident.Functionalities = append(r.Owner.MsTeamsChannel.Incident.Functionalities, functionalities3)
						} else {
							r.Owner.MsTeamsChannel.Incident.Functionalities[functionalitiesCount1].ID = functionalities3.ID
							r.Owner.MsTeamsChannel.Incident.Functionalities[functionalitiesCount1].Name = functionalities3.Name
						}
					}
					r.Owner.MsTeamsChannel.Incident.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ID)
					r.Owner.MsTeamsChannel.Incident.Impacts = []tfTypes.IncidentsImpactEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.Impacts) > len(resp.Owner.MsTeamsChannel.Incident.Impacts) {
						r.Owner.MsTeamsChannel.Incident.Impacts = r.Owner.MsTeamsChannel.Incident.Impacts[:len(resp.Owner.MsTeamsChannel.Incident.Impacts)]
					}
					for impactsCount, impactsItem := range resp.Owner.MsTeamsChannel.Incident.Impacts {
						var impacts1 tfTypes.IncidentsImpactEntity
						if impactsItem.Condition == nil {
							impacts1.Condition = nil
						} else {
							impacts1.Condition = &tfTypes.SeverityMatrixConditionEntity{}
							impacts1.Condition.ID = types.StringPointerValue(impactsItem.Condition.ID)
							impacts1.Condition.Name = types.StringPointerValue(impactsItem.Condition.Name)
							if impactsItem.Condition.Position != nil {
								impacts1.Condition.Position = types.Int64Value(int64(*impactsItem.Condition.Position))
							} else {
								impacts1.Condition.Position = types.Int64Null()
							}
						}
						impacts1.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
						for conversationsCount1, conversationsItem1 := range impactsItem.Conversations {
							var conversations3 tfTypes.ConversationsAPIEntitiesReference
							if conversationsItem1.Channel == nil {
								conversations3.Channel = nil
							} else {
								conversations3.Channel = &tfTypes.ConversationsAPIEntitiesChannel{}
								conversations3.Channel.Name = types.StringPointerValue(conversationsItem1.Channel.Name)
							}
							conversations3.CommentsURL = types.StringPointerValue(conversationsItem1.CommentsURL)
							conversations3.Field = types.StringPointerValue(conversationsItem1.Field)
							conversations3.ID = types.StringPointerValue(conversationsItem1.ID)
							conversations3.ResourceClass = types.StringPointerValue(conversationsItem1.ResourceClass)
							conversations3.ResourceID = types.StringPointerValue(conversationsItem1.ResourceID)
							if conversationsCount1+1 > len(impacts1.Conversations) {
								impacts1.Conversations = append(impacts1.Conversations, conversations3)
							} else {
								impacts1.Conversations[conversationsCount1].Channel = conversations3.Channel
								impacts1.Conversations[conversationsCount1].CommentsURL = conversations3.CommentsURL
								impacts1.Conversations[conversationsCount1].Field = conversations3.Field
								impacts1.Conversations[conversationsCount1].ID = conversations3.ID
								impacts1.Conversations[conversationsCount1].ResourceClass = conversations3.ResourceClass
								impacts1.Conversations[conversationsCount1].ResourceID = conversations3.ResourceID
							}
						}
						impacts1.ID = types.StringPointerValue(impactsItem.ID)
						if impactsItem.Impact == nil {
							impacts1.Impact = nil
						} else {
							impacts1.Impact = &tfTypes.SuccinctEntity{}
							impacts1.Impact.ID = types.StringPointerValue(impactsItem.Impact.ID)
							impacts1.Impact.Name = types.StringPointerValue(impactsItem.Impact.Name)
						}
						if impactsItem.Type != nil {
							impacts1.Type = types.StringValue(string(*impactsItem.Type))
						} else {
							impacts1.Type = types.StringNull()
						}
						if impactsCount+1 > len(r.Owner.MsTeamsChannel.Incident.Impacts) {
							r.Owner.MsTeamsChannel.Incident.Impacts = append(r.Owner.MsTeamsChannel.Incident.Impacts, impacts1)
						} else {
							r.Owner.MsTeamsChannel.Incident.Impacts[impactsCount].Condition = impacts1.Condition
							r.Owner.MsTeamsChannel.Incident.Impacts[impactsCount].Conversations = impacts1.Conversations
							r.Owner.MsTeamsChannel.Incident.Impacts[impactsCount].ID = impacts1.ID
							r.Owner.MsTeamsChannel.Incident.Impacts[impactsCount].Impact = impacts1.Impact
							r.Owner.MsTeamsChannel.Incident.Impacts[impactsCount].Type = impacts1.Type
						}
					}
					r.Owner.MsTeamsChannel.Incident.IncidentChannels = []tfTypes.IncidentsChannelEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.IncidentChannels) > len(resp.Owner.MsTeamsChannel.Incident.IncidentChannels) {
						r.Owner.MsTeamsChannel.Incident.IncidentChannels = r.Owner.MsTeamsChannel.Incident.IncidentChannels[:len(resp.Owner.MsTeamsChannel.Incident.IncidentChannels)]
					}
					for incidentChannelsCount, incidentChannelsItem := range resp.Owner.MsTeamsChannel.Incident.IncidentChannels {
						var incidentChannels1 tfTypes.IncidentsChannelEntity
						incidentChannels1.IconURL = types.StringPointerValue(incidentChannelsItem.IconURL)
						incidentChannels1.ID = types.StringPointerValue(incidentChannelsItem.ID)
						incidentChannels1.Name = types.StringPointerValue(incidentChannelsItem.Name)
						incidentChannels1.Source = types.StringPointerValue(incidentChannelsItem.Source)
						incidentChannels1.SourceID = types.StringPointerValue(incidentChannelsItem.SourceID)
						incidentChannels1.SourceName = types.StringPointerValue(incidentChannelsItem.SourceName)
						incidentChannels1.Status = types.StringPointerValue(incidentChannelsItem.Status)
						incidentChannels1.URL = types.StringPointerValue(incidentChannelsItem.URL)
						if incidentChannelsCount+1 > len(r.Owner.MsTeamsChannel.Incident.IncidentChannels) {
							r.Owner.MsTeamsChannel.Incident.IncidentChannels = append(r.Owner.MsTeamsChannel.Incident.IncidentChannels, incidentChannels1)
						} else {
							r.Owner.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].IconURL = incidentChannels1.IconURL
							r.Owner.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].ID = incidentChannels1.ID
							r.Owner.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Name = incidentChannels1.Name
							r.Owner.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Source = incidentChannels1.Source
							r.Owner.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].SourceID = incidentChannels1.SourceID
							r.Owner.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].SourceName = incidentChannels1.SourceName
							r.Owner.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].Status = incidentChannels1.Status
							r.Owner.MsTeamsChannel.Incident.IncidentChannels[incidentChannelsCount].URL = incidentChannels1.URL
						}
					}
					r.Owner.MsTeamsChannel.Incident.IncidentTickets = []tfTypes.TicketingTicketEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.IncidentTickets) > len(resp.Owner.MsTeamsChannel.Incident.IncidentTickets) {
						r.Owner.MsTeamsChannel.Incident.IncidentTickets = r.Owner.MsTeamsChannel.Incident.IncidentTickets[:len(resp.Owner.MsTeamsChannel.Incident.IncidentTickets)]
					}
					for incidentTicketsCount, incidentTicketsItem := range resp.Owner.MsTeamsChannel.Incident.IncidentTickets {
						var incidentTickets1 tfTypes.TicketingTicketEntity
						incidentTickets1.Assignees = []tfTypes.AuthorEntity{}
						for assigneesCount, assigneesItem := range incidentTicketsItem.Assignees {
							var assignees1 tfTypes.AuthorEntity
							assignees1.Email = types.StringPointerValue(assigneesItem.Email)
							assignees1.ID = types.StringPointerValue(assigneesItem.ID)
							assignees1.Name = types.StringPointerValue(assigneesItem.Name)
							assignees1.Source = types.StringPointerValue(assigneesItem.Source)
							if assigneesCount+1 > len(incidentTickets1.Assignees) {
								incidentTickets1.Assignees = append(incidentTickets1.Assignees, assignees1)
							} else {
								incidentTickets1.Assignees[assigneesCount].Email = assignees1.Email
								incidentTickets1.Assignees[assigneesCount].ID = assignees1.ID
								incidentTickets1.Assignees[assigneesCount].Name = assignees1.Name
								incidentTickets1.Assignees[assigneesCount].Source = assignees1.Source
							}
						}
						if incidentTicketsItem.CreatedAt != nil {
							incidentTickets1.CreatedAt = types.StringValue(incidentTicketsItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							incidentTickets1.CreatedAt = types.StringNull()
						}
						if incidentTicketsItem.CreatedBy == nil {
							incidentTickets1.CreatedBy = nil
						} else {
							incidentTickets1.CreatedBy = &tfTypes.AuthorEntity{}
							incidentTickets1.CreatedBy.Email = types.StringPointerValue(incidentTicketsItem.CreatedBy.Email)
							incidentTickets1.CreatedBy.ID = types.StringPointerValue(incidentTicketsItem.CreatedBy.ID)
							incidentTickets1.CreatedBy.Name = types.StringPointerValue(incidentTicketsItem.CreatedBy.Name)
							incidentTickets1.CreatedBy.Source = types.StringPointerValue(incidentTicketsItem.CreatedBy.Source)
						}
						incidentTickets1.Description = types.StringPointerValue(incidentTicketsItem.Description)
						if incidentTicketsItem.DueAt != nil {
							incidentTickets1.DueAt = types.StringValue(incidentTicketsItem.DueAt.Format(time.RFC3339Nano))
						} else {
							incidentTickets1.DueAt = types.StringNull()
						}
						incidentTickets1.ID = types.StringPointerValue(incidentTicketsItem.ID)
						incidentTickets1.IncidentCurrentMilestone = types.StringPointerValue(incidentTicketsItem.IncidentCurrentMilestone)
						incidentTickets1.IncidentID = types.StringPointerValue(incidentTicketsItem.IncidentID)
						incidentTickets1.IncidentName = types.StringPointerValue(incidentTicketsItem.IncidentName)
						if incidentTicketsItem.Link == nil {
							incidentTickets1.Link = nil
						} else {
							incidentTickets1.Link = &tfTypes.AttachmentsLinkEntity{}
							incidentTickets1.Link.Deletable = types.BoolPointerValue(incidentTicketsItem.Link.Deletable)
							incidentTickets1.Link.DisplayText = types.StringPointerValue(incidentTicketsItem.Link.DisplayText)
							incidentTickets1.Link.Editable = types.BoolPointerValue(incidentTicketsItem.Link.Editable)
							incidentTickets1.Link.HrefURL = types.StringPointerValue(incidentTicketsItem.Link.HrefURL)
							incidentTickets1.Link.IconURL = types.StringPointerValue(incidentTicketsItem.Link.IconURL)
							incidentTickets1.Link.ID = types.StringPointerValue(incidentTicketsItem.Link.ID)
							incidentTickets1.Link.Type = types.StringPointerValue(incidentTicketsItem.Link.Type)
						}
						if incidentTicketsItem.Priority == nil {
							incidentTickets1.Priority = nil
						} else {
							incidentTickets1.Priority = &tfTypes.TicketingPriorityEntity{}
							if incidentTicketsItem.Priority.CreatedAt != nil {
								incidentTickets1.Priority.CreatedAt = types.StringValue(incidentTicketsItem.Priority.CreatedAt.Format(time.RFC3339Nano))
							} else {
								incidentTickets1.Priority.CreatedAt = types.StringNull()
							}
							incidentTickets1.Priority.ID = types.StringPointerValue(incidentTicketsItem.Priority.ID)
							incidentTickets1.Priority.Name = types.StringPointerValue(incidentTicketsItem.Priority.Name)
							if incidentTicketsItem.Priority.Position != nil {
								incidentTickets1.Priority.Position = types.Int64Value(int64(*incidentTicketsItem.Priority.Position))
							} else {
								incidentTickets1.Priority.Position = types.Int64Null()
							}
							if incidentTicketsItem.Priority.UpdatedAt != nil {
								incidentTickets1.Priority.UpdatedAt = types.StringValue(incidentTicketsItem.Priority.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								incidentTickets1.Priority.UpdatedAt = types.StringNull()
							}
						}
						if incidentTicketsItem.State != nil {
							incidentTickets1.State = types.StringValue(string(*incidentTicketsItem.State))
						} else {
							incidentTickets1.State = types.StringNull()
						}
						incidentTickets1.Summary = types.StringPointerValue(incidentTicketsItem.Summary)
						incidentTickets1.TagList = []types.String{}
						for _, v := range incidentTicketsItem.TagList {
							incidentTickets1.TagList = append(incidentTickets1.TagList, types.StringValue(v))
						}
						incidentTickets1.TaskID = types.StringPointerValue(incidentTicketsItem.TaskID)
						if incidentTicketsItem.Type != nil {
							incidentTickets1.Type = types.StringValue(string(*incidentTicketsItem.Type))
						} else {
							incidentTickets1.Type = types.StringNull()
						}
						if incidentTicketsItem.UpdatedAt != nil {
							incidentTickets1.UpdatedAt = types.StringValue(incidentTicketsItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							incidentTickets1.UpdatedAt = types.StringNull()
						}
						if incidentTicketsCount+1 > len(r.Owner.MsTeamsChannel.Incident.IncidentTickets) {
							r.Owner.MsTeamsChannel.Incident.IncidentTickets = append(r.Owner.MsTeamsChannel.Incident.IncidentTickets, incidentTickets1)
						} else {
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Assignees = incidentTickets1.Assignees
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].CreatedAt = incidentTickets1.CreatedAt
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].CreatedBy = incidentTickets1.CreatedBy
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Description = incidentTickets1.Description
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].DueAt = incidentTickets1.DueAt
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].ID = incidentTickets1.ID
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentCurrentMilestone = incidentTickets1.IncidentCurrentMilestone
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentID = incidentTickets1.IncidentID
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].IncidentName = incidentTickets1.IncidentName
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Link = incidentTickets1.Link
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Priority = incidentTickets1.Priority
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].State = incidentTickets1.State
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Summary = incidentTickets1.Summary
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].TagList = incidentTickets1.TagList
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].TaskID = incidentTickets1.TaskID
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].Type = incidentTickets1.Type
							r.Owner.MsTeamsChannel.Incident.IncidentTickets[incidentTicketsCount].UpdatedAt = incidentTickets1.UpdatedAt
						}
					}
					r.Owner.MsTeamsChannel.Incident.IncidentURL = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.IncidentURL)
					if len(resp.Owner.MsTeamsChannel.Incident.Labels) > 0 {
						r.Owner.MsTeamsChannel.Incident.Labels = make(map[string]types.String)
						for key1, value2 := range resp.Owner.MsTeamsChannel.Incident.Labels {
							r.Owner.MsTeamsChannel.Incident.Labels[key1] = types.StringValue(value2)
						}
					}
					if resp.Owner.MsTeamsChannel.Incident.LastNote == nil {
						r.Owner.MsTeamsChannel.Incident.LastNote = nil
					} else {
						r.Owner.MsTeamsChannel.Incident.LastNote = &tfTypes.EventNoteEntity{}
						r.Owner.MsTeamsChannel.Incident.LastNote.Body = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.LastNote.Body)
						r.Owner.MsTeamsChannel.Incident.LastNote.Conversations = []tfTypes.ConversationsAPIEntitiesReference{}
						if len(r.Owner.MsTeamsChannel.Incident.LastNote.Conversations) > len(resp.Owner.MsTeamsChannel.Incident.LastNote.Conversations) {
							r.Owner.MsTeamsChannel.Incident.LastNote.Conversations = r.Owner.MsTeamsChannel.Incident.LastNote.Conversations[:len(resp.Owner.MsTeamsChannel.Incident.LastNote.Conversations)]
						}
						for conversationsCount2, conversationsItem2 := range resp.Owner.MsTeamsChannel.Incident.LastNote.Conversations {
							var conversations5 tfTypes.ConversationsAPIEntitiesReference
							if conversationsItem2.Channel == nil {
								conversations5.Channel = nil
							} else {
								conversations5.Channel = &tfTypes.ConversationsAPIEntitiesChannel{}
								conversations5.Channel.Name = types.StringPointerValue(conversationsItem2.Channel.Name)
							}
							conversations5.CommentsURL = types.StringPointerValue(conversationsItem2.CommentsURL)
							conversations5.Field = types.StringPointerValue(conversationsItem2.Field)
							conversations5.ID = types.StringPointerValue(conversationsItem2.ID)
							conversations5.ResourceClass = types.StringPointerValue(conversationsItem2.ResourceClass)
							conversations5.ResourceID = types.StringPointerValue(conversationsItem2.ResourceID)
							if conversationsCount2+1 > len(r.Owner.MsTeamsChannel.Incident.LastNote.Conversations) {
								r.Owner.MsTeamsChannel.Incident.LastNote.Conversations = append(r.Owner.MsTeamsChannel.Incident.LastNote.Conversations, conversations5)
							} else {
								r.Owner.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].Channel = conversations5.Channel
								r.Owner.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].CommentsURL = conversations5.CommentsURL
								r.Owner.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].Field = conversations5.Field
								r.Owner.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ID = conversations5.ID
								r.Owner.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ResourceClass = conversations5.ResourceClass
								r.Owner.MsTeamsChannel.Incident.LastNote.Conversations[conversationsCount2].ResourceID = conversations5.ResourceID
							}
						}
						if resp.Owner.MsTeamsChannel.Incident.LastNote.CreatedAt != nil {
							r.Owner.MsTeamsChannel.Incident.LastNote.CreatedAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.LastNote.CreatedAt.Format(time.RFC3339Nano))
						} else {
							r.Owner.MsTeamsChannel.Incident.LastNote.CreatedAt = types.StringNull()
						}
						r.Owner.MsTeamsChannel.Incident.LastNote.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.LastNote.ID)
						r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages = []tfTypes.IncidentsStatusPageEntity{}
						if len(r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages) > len(resp.Owner.MsTeamsChannel.Incident.LastNote.StatusPages) {
							r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages = r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages[:len(resp.Owner.MsTeamsChannel.Incident.LastNote.StatusPages)]
						}
						for statusPagesCount, statusPagesItem := range resp.Owner.MsTeamsChannel.Incident.LastNote.StatusPages {
							var statusPages1 tfTypes.IncidentsStatusPageEntity
							statusPages1.DisplayName = types.StringPointerValue(statusPagesItem.DisplayName)
							statusPages1.ExternalID = types.StringPointerValue(statusPagesItem.ExternalID)
							statusPages1.ID = types.StringPointerValue(statusPagesItem.ID)
							if statusPagesItem.Integration == nil {
								statusPages1.Integration = nil
							} else {
								statusPages1.Integration = &tfTypes.IntegrationEntity{}
								if statusPagesItem.Integration.CreatedAt != nil {
									statusPages1.Integration.CreatedAt = types.StringValue(statusPagesItem.Integration.CreatedAt.Format(time.RFC3339Nano))
								} else {
									statusPages1.Integration.CreatedAt = types.StringNull()
								}
								statusPages1.Integration.DisplayName = types.StringPointerValue(statusPagesItem.Integration.DisplayName)
								statusPages1.Integration.ID = types.StringPointerValue(statusPagesItem.Integration.ID)
								statusPages1.Integration.IntegrationName = types.StringPointerValue(statusPagesItem.Integration.IntegrationName)
								statusPages1.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem.Integration.IntegrationSlug)
							}
							statusPages1.Name = types.StringPointerValue(statusPagesItem.Name)
							statusPages1.URL = types.StringPointerValue(statusPagesItem.URL)
							if statusPagesCount+1 > len(r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages) {
								r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages = append(r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages, statusPages1)
							} else {
								r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].DisplayName = statusPages1.DisplayName
								r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].ExternalID = statusPages1.ExternalID
								r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].ID = statusPages1.ID
								r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].Integration = statusPages1.Integration
								r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].Name = statusPages1.Name
								r.Owner.MsTeamsChannel.Incident.LastNote.StatusPages[statusPagesCount].URL = statusPages1.URL
							}
						}
					}
					r.Owner.MsTeamsChannel.Incident.LastUpdate = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.LastUpdate)
					r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements = []tfTypes.IncidentsLifecycleMeasurementEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements) > len(resp.Owner.MsTeamsChannel.Incident.LifecycleMeasurements) {
						r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements = r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[:len(resp.Owner.MsTeamsChannel.Incident.LifecycleMeasurements)]
					}
					for lifecycleMeasurementsCount, lifecycleMeasurementsItem := range resp.Owner.MsTeamsChannel.Incident.LifecycleMeasurements {
						var lifecycleMeasurements1 tfTypes.IncidentsLifecycleMeasurementEntity
						if lifecycleMeasurementsItem.CalculatedAt != nil {
							lifecycleMeasurements1.CalculatedAt = types.StringValue(lifecycleMeasurementsItem.CalculatedAt.Format(time.RFC3339Nano))
						} else {
							lifecycleMeasurements1.CalculatedAt = types.StringNull()
						}
						lifecycleMeasurements1.Description = types.StringPointerValue(lifecycleMeasurementsItem.Description)
						lifecycleMeasurements1.EndsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.EndsAtMilestone)
						lifecycleMeasurements1.ID = types.StringPointerValue(lifecycleMeasurementsItem.ID)
						lifecycleMeasurements1.Name = types.StringPointerValue(lifecycleMeasurementsItem.Name)
						lifecycleMeasurements1.Slug = types.StringPointerValue(lifecycleMeasurementsItem.Slug)
						lifecycleMeasurements1.StartsAtMilestone = types.StringPointerValue(lifecycleMeasurementsItem.StartsAtMilestone)
						lifecycleMeasurements1.Value = types.StringPointerValue(lifecycleMeasurementsItem.Value)
						if lifecycleMeasurementsCount+1 > len(r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements) {
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements = append(r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements, lifecycleMeasurements1)
						} else {
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].CalculatedAt = lifecycleMeasurements1.CalculatedAt
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Description = lifecycleMeasurements1.Description
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].EndsAtMilestone = lifecycleMeasurements1.EndsAtMilestone
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].ID = lifecycleMeasurements1.ID
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Name = lifecycleMeasurements1.Name
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Slug = lifecycleMeasurements1.Slug
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].StartsAtMilestone = lifecycleMeasurements1.StartsAtMilestone
							r.Owner.MsTeamsChannel.Incident.LifecycleMeasurements[lifecycleMeasurementsCount].Value = lifecycleMeasurements1.Value
						}
					}
					r.Owner.MsTeamsChannel.Incident.LifecyclePhases = []tfTypes.IncidentsLifecyclePhaseEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.LifecyclePhases) > len(resp.Owner.MsTeamsChannel.Incident.LifecyclePhases) {
						r.Owner.MsTeamsChannel.Incident.LifecyclePhases = r.Owner.MsTeamsChannel.Incident.LifecyclePhases[:len(resp.Owner.MsTeamsChannel.Incident.LifecyclePhases)]
					}
					for lifecyclePhasesCount, lifecyclePhasesItem := range resp.Owner.MsTeamsChannel.Incident.LifecyclePhases {
						var lifecyclePhases1 tfTypes.IncidentsLifecyclePhaseEntity
						lifecyclePhases1.Description = types.StringPointerValue(lifecyclePhasesItem.Description)
						lifecyclePhases1.ID = types.StringPointerValue(lifecyclePhasesItem.ID)
						lifecyclePhases1.Milestones = []tfTypes.IncidentsLifecycleMilestoneEntity{}
						for milestonesCount, milestonesItem := range lifecyclePhasesItem.Milestones {
							var milestones1 tfTypes.IncidentsLifecycleMilestoneEntity
							milestones1.Description = types.StringPointerValue(milestonesItem.Description)
							milestones1.Duration = types.StringPointerValue(milestonesItem.Duration)
							milestones1.ID = types.StringPointerValue(milestonesItem.ID)
							milestones1.Name = types.StringPointerValue(milestonesItem.Name)
							if milestonesItem.OccurredAt != nil {
								milestones1.OccurredAt = types.StringValue(milestonesItem.OccurredAt.Format(time.RFC3339Nano))
							} else {
								milestones1.OccurredAt = types.StringNull()
							}
							if milestonesItem.Position != nil {
								milestones1.Position = types.Int64Value(int64(*milestonesItem.Position))
							} else {
								milestones1.Position = types.Int64Null()
							}
							milestones1.Slug = types.StringPointerValue(milestonesItem.Slug)
							if milestonesItem.UpdatedAt != nil {
								milestones1.UpdatedAt = types.StringValue(milestonesItem.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								milestones1.UpdatedAt = types.StringNull()
							}
							if milestonesItem.UpdatedBy == nil {
								milestones1.UpdatedBy = nil
							} else {
								milestones1.UpdatedBy = &tfTypes.AuthorEntity{}
								milestones1.UpdatedBy.Email = types.StringPointerValue(milestonesItem.UpdatedBy.Email)
								milestones1.UpdatedBy.ID = types.StringPointerValue(milestonesItem.UpdatedBy.ID)
								milestones1.UpdatedBy.Name = types.StringPointerValue(milestonesItem.UpdatedBy.Name)
								milestones1.UpdatedBy.Source = types.StringPointerValue(milestonesItem.UpdatedBy.Source)
							}
							if milestonesCount+1 > len(lifecyclePhases1.Milestones) {
								lifecyclePhases1.Milestones = append(lifecyclePhases1.Milestones, milestones1)
							} else {
								lifecyclePhases1.Milestones[milestonesCount].Description = milestones1.Description
								lifecyclePhases1.Milestones[milestonesCount].Duration = milestones1.Duration
								lifecyclePhases1.Milestones[milestonesCount].ID = milestones1.ID
								lifecyclePhases1.Milestones[milestonesCount].Name = milestones1.Name
								lifecyclePhases1.Milestones[milestonesCount].OccurredAt = milestones1.OccurredAt
								lifecyclePhases1.Milestones[milestonesCount].Position = milestones1.Position
								lifecyclePhases1.Milestones[milestonesCount].Slug = milestones1.Slug
								lifecyclePhases1.Milestones[milestonesCount].UpdatedAt = milestones1.UpdatedAt
								lifecyclePhases1.Milestones[milestonesCount].UpdatedBy = milestones1.UpdatedBy
							}
						}
						lifecyclePhases1.Name = types.StringPointerValue(lifecyclePhasesItem.Name)
						if lifecyclePhasesItem.Position != nil {
							lifecyclePhases1.Position = types.Int64Value(int64(*lifecyclePhasesItem.Position))
						} else {
							lifecyclePhases1.Position = types.Int64Null()
						}
						lifecyclePhases1.Type = types.StringPointerValue(lifecyclePhasesItem.Type)
						if lifecyclePhasesCount+1 > len(r.Owner.MsTeamsChannel.Incident.LifecyclePhases) {
							r.Owner.MsTeamsChannel.Incident.LifecyclePhases = append(r.Owner.MsTeamsChannel.Incident.LifecyclePhases, lifecyclePhases1)
						} else {
							r.Owner.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Description = lifecyclePhases1.Description
							r.Owner.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].ID = lifecyclePhases1.ID
							r.Owner.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Milestones = lifecyclePhases1.Milestones
							r.Owner.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Name = lifecyclePhases1.Name
							r.Owner.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Position = lifecyclePhases1.Position
							r.Owner.MsTeamsChannel.Incident.LifecyclePhases[lifecyclePhasesCount].Type = lifecyclePhases1.Type
						}
					}
					r.Owner.MsTeamsChannel.Incident.Milestones = []tfTypes.IncidentsMilestoneEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.Milestones) > len(resp.Owner.MsTeamsChannel.Incident.Milestones) {
						r.Owner.MsTeamsChannel.Incident.Milestones = r.Owner.MsTeamsChannel.Incident.Milestones[:len(resp.Owner.MsTeamsChannel.Incident.Milestones)]
					}
					for milestonesCount1, milestonesItem1 := range resp.Owner.MsTeamsChannel.Incident.Milestones {
						var milestones3 tfTypes.IncidentsMilestoneEntity
						if milestonesItem1.CreatedAt != nil {
							milestones3.CreatedAt = types.StringValue(milestonesItem1.CreatedAt.Format(time.RFC3339Nano))
						} else {
							milestones3.CreatedAt = types.StringNull()
						}
						milestones3.Duration = types.StringPointerValue(milestonesItem1.Duration)
						milestones3.ID = types.StringPointerValue(milestonesItem1.ID)
						if milestonesItem1.OccurredAt != nil {
							milestones3.OccurredAt = types.StringValue(milestonesItem1.OccurredAt.Format(time.RFC3339Nano))
						} else {
							milestones3.OccurredAt = types.StringNull()
						}
						milestones3.Type = types.StringPointerValue(milestonesItem1.Type)
						if milestonesItem1.UpdatedAt != nil {
							milestones3.UpdatedAt = types.StringValue(milestonesItem1.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							milestones3.UpdatedAt = types.StringNull()
						}
						if milestonesCount1+1 > len(r.Owner.MsTeamsChannel.Incident.Milestones) {
							r.Owner.MsTeamsChannel.Incident.Milestones = append(r.Owner.MsTeamsChannel.Incident.Milestones, milestones3)
						} else {
							r.Owner.MsTeamsChannel.Incident.Milestones[milestonesCount1].CreatedAt = milestones3.CreatedAt
							r.Owner.MsTeamsChannel.Incident.Milestones[milestonesCount1].Duration = milestones3.Duration
							r.Owner.MsTeamsChannel.Incident.Milestones[milestonesCount1].ID = milestones3.ID
							r.Owner.MsTeamsChannel.Incident.Milestones[milestonesCount1].OccurredAt = milestones3.OccurredAt
							r.Owner.MsTeamsChannel.Incident.Milestones[milestonesCount1].Type = milestones3.Type
							r.Owner.MsTeamsChannel.Incident.Milestones[milestonesCount1].UpdatedAt = milestones3.UpdatedAt
						}
					}
					if resp.Owner.MsTeamsChannel.Incident.MonetaryImpact != nil {
						r.Owner.MsTeamsChannel.Incident.MonetaryImpact = types.Int64Value(int64(*resp.Owner.MsTeamsChannel.Incident.MonetaryImpact))
					} else {
						r.Owner.MsTeamsChannel.Incident.MonetaryImpact = types.Int64Null()
					}
					if resp.Owner.MsTeamsChannel.Incident.MonetaryImpactCents != nil {
						r.Owner.MsTeamsChannel.Incident.MonetaryImpactCents = types.Int64Value(int64(*resp.Owner.MsTeamsChannel.Incident.MonetaryImpactCents))
					} else {
						r.Owner.MsTeamsChannel.Incident.MonetaryImpactCents = types.Int64Null()
					}
					r.Owner.MsTeamsChannel.Incident.Name = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Name)
					if resp.Owner.MsTeamsChannel.Incident.Number != nil {
						r.Owner.MsTeamsChannel.Incident.Number = types.Int64Value(int64(*resp.Owner.MsTeamsChannel.Incident.Number))
					} else {
						r.Owner.MsTeamsChannel.Incident.Number = types.Int64Null()
					}
					if resp.Owner.MsTeamsChannel.Incident.Organization == nil {
						r.Owner.MsTeamsChannel.Incident.Organization = nil
					} else {
						r.Owner.MsTeamsChannel.Incident.Organization = &tfTypes.SuccinctEntity{}
						r.Owner.MsTeamsChannel.Incident.Organization.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Organization.ID)
						r.Owner.MsTeamsChannel.Incident.Organization.Name = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Organization.Name)
					}
					r.Owner.MsTeamsChannel.Incident.OrganizationID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.OrganizationID)
					r.Owner.MsTeamsChannel.Incident.Priority = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Priority)
					r.Owner.MsTeamsChannel.Incident.PrivateID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.PrivateID)
					r.Owner.MsTeamsChannel.Incident.PrivateStatusPageURL = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.PrivateStatusPageURL)
					r.Owner.MsTeamsChannel.Incident.ReportID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.ReportID)
					r.Owner.MsTeamsChannel.Incident.RoleAssignments = []tfTypes.IncidentsRoleAssignmentEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.RoleAssignments) > len(resp.Owner.MsTeamsChannel.Incident.RoleAssignments) {
						r.Owner.MsTeamsChannel.Incident.RoleAssignments = r.Owner.MsTeamsChannel.Incident.RoleAssignments[:len(resp.Owner.MsTeamsChannel.Incident.RoleAssignments)]
					}
					for roleAssignmentsCount, roleAssignmentsItem := range resp.Owner.MsTeamsChannel.Incident.RoleAssignments {
						var roleAssignments1 tfTypes.IncidentsRoleAssignmentEntity
						if roleAssignmentsItem.CreatedAt != nil {
							roleAssignments1.CreatedAt = types.StringValue(roleAssignmentsItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							roleAssignments1.CreatedAt = types.StringNull()
						}
						roleAssignments1.ID = types.StringPointerValue(roleAssignmentsItem.ID)
						if roleAssignmentsItem.IncidentRole == nil {
							roleAssignments1.IncidentRole = nil
						} else {
							roleAssignments1.IncidentRole = &tfTypes.IncidentRoleEntity{}
							if roleAssignmentsItem.IncidentRole.CreatedAt != nil {
								roleAssignments1.IncidentRole.CreatedAt = types.StringValue(roleAssignmentsItem.IncidentRole.CreatedAt.Format(time.RFC3339Nano))
							} else {
								roleAssignments1.IncidentRole.CreatedAt = types.StringNull()
							}
							roleAssignments1.IncidentRole.Description = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Description)
							if roleAssignmentsItem.IncidentRole.DiscardedAt != nil {
								roleAssignments1.IncidentRole.DiscardedAt = types.StringValue(roleAssignmentsItem.IncidentRole.DiscardedAt.Format(time.RFC3339Nano))
							} else {
								roleAssignments1.IncidentRole.DiscardedAt = types.StringNull()
							}
							roleAssignments1.IncidentRole.ID = types.StringPointerValue(roleAssignmentsItem.IncidentRole.ID)
							roleAssignments1.IncidentRole.Name = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Name)
							roleAssignments1.IncidentRole.Summary = types.StringPointerValue(roleAssignmentsItem.IncidentRole.Summary)
							if roleAssignmentsItem.IncidentRole.UpdatedAt != nil {
								roleAssignments1.IncidentRole.UpdatedAt = types.StringValue(roleAssignmentsItem.IncidentRole.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								roleAssignments1.IncidentRole.UpdatedAt = types.StringNull()
							}
						}
						if roleAssignmentsItem.Status != nil {
							roleAssignments1.Status = types.StringValue(string(*roleAssignmentsItem.Status))
						} else {
							roleAssignments1.Status = types.StringNull()
						}
						if roleAssignmentsItem.UpdatedAt != nil {
							roleAssignments1.UpdatedAt = types.StringValue(roleAssignmentsItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							roleAssignments1.UpdatedAt = types.StringNull()
						}
						if roleAssignmentsItem.User == nil {
							roleAssignments1.User = nil
						} else {
							roleAssignments1.User = &tfTypes.UserEntity{}
							if roleAssignmentsItem.User.CreatedAt != nil {
								roleAssignments1.User.CreatedAt = types.StringValue(roleAssignmentsItem.User.CreatedAt.Format(time.RFC3339Nano))
							} else {
								roleAssignments1.User.CreatedAt = types.StringNull()
							}
							roleAssignments1.User.Email = types.StringPointerValue(roleAssignmentsItem.User.Email)
							roleAssignments1.User.ID = types.StringPointerValue(roleAssignmentsItem.User.ID)
							roleAssignments1.User.Name = types.StringPointerValue(roleAssignmentsItem.User.Name)
							roleAssignments1.User.SignalsEnabledNotificationTypes = []types.String{}
							for _, v := range roleAssignmentsItem.User.SignalsEnabledNotificationTypes {
								roleAssignments1.User.SignalsEnabledNotificationTypes = append(roleAssignments1.User.SignalsEnabledNotificationTypes, types.StringValue(v))
							}
							roleAssignments1.User.SlackLinked = types.BoolPointerValue(roleAssignmentsItem.User.SlackLinked)
							roleAssignments1.User.SlackUserID = types.StringPointerValue(roleAssignmentsItem.User.SlackUserID)
							if roleAssignmentsItem.User.UpdatedAt != nil {
								roleAssignments1.User.UpdatedAt = types.StringValue(roleAssignmentsItem.User.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								roleAssignments1.User.UpdatedAt = types.StringNull()
							}
						}
						if roleAssignmentsCount+1 > len(r.Owner.MsTeamsChannel.Incident.RoleAssignments) {
							r.Owner.MsTeamsChannel.Incident.RoleAssignments = append(r.Owner.MsTeamsChannel.Incident.RoleAssignments, roleAssignments1)
						} else {
							r.Owner.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].CreatedAt = roleAssignments1.CreatedAt
							r.Owner.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].ID = roleAssignments1.ID
							r.Owner.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].IncidentRole = roleAssignments1.IncidentRole
							r.Owner.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].Status = roleAssignments1.Status
							r.Owner.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].UpdatedAt = roleAssignments1.UpdatedAt
							r.Owner.MsTeamsChannel.Incident.RoleAssignments[roleAssignmentsCount].User = roleAssignments1.User
						}
					}
					r.Owner.MsTeamsChannel.Incident.Services = []tfTypes.SuccinctEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.Services) > len(resp.Owner.MsTeamsChannel.Incident.Services) {
						r.Owner.MsTeamsChannel.Incident.Services = r.Owner.MsTeamsChannel.Incident.Services[:len(resp.Owner.MsTeamsChannel.Incident.Services)]
					}
					for servicesCount, servicesItem := range resp.Owner.MsTeamsChannel.Incident.Services {
						var services1 tfTypes.SuccinctEntity
						services1.ID = types.StringPointerValue(servicesItem.ID)
						services1.Name = types.StringPointerValue(servicesItem.Name)
						if servicesCount+1 > len(r.Owner.MsTeamsChannel.Incident.Services) {
							r.Owner.MsTeamsChannel.Incident.Services = append(r.Owner.MsTeamsChannel.Incident.Services, services1)
						} else {
							r.Owner.MsTeamsChannel.Incident.Services[servicesCount].ID = services1.ID
							r.Owner.MsTeamsChannel.Incident.Services[servicesCount].Name = services1.Name
						}
					}
					r.Owner.MsTeamsChannel.Incident.Severity = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Severity)
					r.Owner.MsTeamsChannel.Incident.SeverityColor = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityColor)
					r.Owner.MsTeamsChannel.Incident.SeverityCondition = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityCondition)
					if resp.Owner.MsTeamsChannel.Incident.SeverityConditionObject == nil {
						r.Owner.MsTeamsChannel.Incident.SeverityConditionObject = nil
					} else {
						r.Owner.MsTeamsChannel.Incident.SeverityConditionObject = &tfTypes.SeverityMatrixConditionEntity{}
						r.Owner.MsTeamsChannel.Incident.SeverityConditionObject.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityConditionObject.ID)
						r.Owner.MsTeamsChannel.Incident.SeverityConditionObject.Name = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityConditionObject.Name)
						if resp.Owner.MsTeamsChannel.Incident.SeverityConditionObject.Position != nil {
							r.Owner.MsTeamsChannel.Incident.SeverityConditionObject.Position = types.Int64Value(int64(*resp.Owner.MsTeamsChannel.Incident.SeverityConditionObject.Position))
						} else {
							r.Owner.MsTeamsChannel.Incident.SeverityConditionObject.Position = types.Int64Null()
						}
					}
					r.Owner.MsTeamsChannel.Incident.SeverityImpact = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityImpact)
					if resp.Owner.MsTeamsChannel.Incident.SeverityImpactObject == nil {
						r.Owner.MsTeamsChannel.Incident.SeverityImpactObject = nil
					} else {
						r.Owner.MsTeamsChannel.Incident.SeverityImpactObject = &tfTypes.SeverityMatrixImpactEntity{}
						r.Owner.MsTeamsChannel.Incident.SeverityImpactObject.AffectsID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityImpactObject.AffectsID)
						r.Owner.MsTeamsChannel.Incident.SeverityImpactObject.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityImpactObject.ID)
						r.Owner.MsTeamsChannel.Incident.SeverityImpactObject.Name = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityImpactObject.Name)
						if resp.Owner.MsTeamsChannel.Incident.SeverityImpactObject.Position != nil {
							r.Owner.MsTeamsChannel.Incident.SeverityImpactObject.Position = types.Int64Value(int64(*resp.Owner.MsTeamsChannel.Incident.SeverityImpactObject.Position))
						} else {
							r.Owner.MsTeamsChannel.Incident.SeverityImpactObject.Position = types.Int64Null()
						}
						r.Owner.MsTeamsChannel.Incident.SeverityImpactObject.Type = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.SeverityImpactObject.Type)
					}
					if resp.Owner.MsTeamsChannel.Incident.StartedAt != nil {
						r.Owner.MsTeamsChannel.Incident.StartedAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.StartedAt.Format(time.RFC3339Nano))
					} else {
						r.Owner.MsTeamsChannel.Incident.StartedAt = types.StringNull()
					}
					r.Owner.MsTeamsChannel.Incident.StatusPages = []tfTypes.IncidentsStatusPageEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.StatusPages) > len(resp.Owner.MsTeamsChannel.Incident.StatusPages) {
						r.Owner.MsTeamsChannel.Incident.StatusPages = r.Owner.MsTeamsChannel.Incident.StatusPages[:len(resp.Owner.MsTeamsChannel.Incident.StatusPages)]
					}
					for statusPagesCount1, statusPagesItem1 := range resp.Owner.MsTeamsChannel.Incident.StatusPages {
						var statusPages3 tfTypes.IncidentsStatusPageEntity
						statusPages3.DisplayName = types.StringPointerValue(statusPagesItem1.DisplayName)
						statusPages3.ExternalID = types.StringPointerValue(statusPagesItem1.ExternalID)
						statusPages3.ID = types.StringPointerValue(statusPagesItem1.ID)
						if statusPagesItem1.Integration == nil {
							statusPages3.Integration = nil
						} else {
							statusPages3.Integration = &tfTypes.IntegrationEntity{}
							if statusPagesItem1.Integration.CreatedAt != nil {
								statusPages3.Integration.CreatedAt = types.StringValue(statusPagesItem1.Integration.CreatedAt.Format(time.RFC3339Nano))
							} else {
								statusPages3.Integration.CreatedAt = types.StringNull()
							}
							statusPages3.Integration.DisplayName = types.StringPointerValue(statusPagesItem1.Integration.DisplayName)
							statusPages3.Integration.ID = types.StringPointerValue(statusPagesItem1.Integration.ID)
							statusPages3.Integration.IntegrationName = types.StringPointerValue(statusPagesItem1.Integration.IntegrationName)
							statusPages3.Integration.IntegrationSlug = types.StringPointerValue(statusPagesItem1.Integration.IntegrationSlug)
						}
						statusPages3.Name = types.StringPointerValue(statusPagesItem1.Name)
						statusPages3.URL = types.StringPointerValue(statusPagesItem1.URL)
						if statusPagesCount1+1 > len(r.Owner.MsTeamsChannel.Incident.StatusPages) {
							r.Owner.MsTeamsChannel.Incident.StatusPages = append(r.Owner.MsTeamsChannel.Incident.StatusPages, statusPages3)
						} else {
							r.Owner.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].DisplayName = statusPages3.DisplayName
							r.Owner.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].ExternalID = statusPages3.ExternalID
							r.Owner.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].ID = statusPages3.ID
							r.Owner.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].Integration = statusPages3.Integration
							r.Owner.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].Name = statusPages3.Name
							r.Owner.MsTeamsChannel.Incident.StatusPages[statusPagesCount1].URL = statusPages3.URL
						}
					}
					r.Owner.MsTeamsChannel.Incident.Summary = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Summary)
					r.Owner.MsTeamsChannel.Incident.TagList = []types.String{}
					for _, v := range resp.Owner.MsTeamsChannel.Incident.TagList {
						r.Owner.MsTeamsChannel.Incident.TagList = append(r.Owner.MsTeamsChannel.Incident.TagList, types.StringValue(v))
					}
					r.Owner.MsTeamsChannel.Incident.TeamAssignments = []tfTypes.IncidentsTeamAssignmentEntity{}
					if len(r.Owner.MsTeamsChannel.Incident.TeamAssignments) > len(resp.Owner.MsTeamsChannel.Incident.TeamAssignments) {
						r.Owner.MsTeamsChannel.Incident.TeamAssignments = r.Owner.MsTeamsChannel.Incident.TeamAssignments[:len(resp.Owner.MsTeamsChannel.Incident.TeamAssignments)]
					}
					for teamAssignmentsCount, teamAssignmentsItem := range resp.Owner.MsTeamsChannel.Incident.TeamAssignments {
						var teamAssignments1 tfTypes.IncidentsTeamAssignmentEntity
						if teamAssignmentsItem.CreatedAt != nil {
							teamAssignments1.CreatedAt = types.StringValue(teamAssignmentsItem.CreatedAt.Format(time.RFC3339Nano))
						} else {
							teamAssignments1.CreatedAt = types.StringNull()
						}
						teamAssignments1.ID = types.StringPointerValue(teamAssignmentsItem.ID)
						teamAssignments1.Status = types.StringPointerValue(teamAssignmentsItem.Status)
						if teamAssignmentsItem.Team == nil {
							teamAssignments1.Team = nil
						} else {
							teamAssignments1.Team = &tfTypes.TeamEntity1{}
						}
						if teamAssignmentsItem.UpdatedAt != nil {
							teamAssignments1.UpdatedAt = types.StringValue(teamAssignmentsItem.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							teamAssignments1.UpdatedAt = types.StringNull()
						}
						if teamAssignmentsCount+1 > len(r.Owner.MsTeamsChannel.Incident.TeamAssignments) {
							r.Owner.MsTeamsChannel.Incident.TeamAssignments = append(r.Owner.MsTeamsChannel.Incident.TeamAssignments, teamAssignments1)
						} else {
							r.Owner.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].CreatedAt = teamAssignments1.CreatedAt
							r.Owner.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].ID = teamAssignments1.ID
							r.Owner.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].Status = teamAssignments1.Status
							r.Owner.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].Team = teamAssignments1.Team
							r.Owner.MsTeamsChannel.Incident.TeamAssignments[teamAssignmentsCount].UpdatedAt = teamAssignments1.UpdatedAt
						}
					}
					if resp.Owner.MsTeamsChannel.Incident.Ticket == nil {
						r.Owner.MsTeamsChannel.Incident.Ticket = nil
					} else {
						r.Owner.MsTeamsChannel.Incident.Ticket = &tfTypes.TicketingTicketEntity{}
						r.Owner.MsTeamsChannel.Incident.Ticket.Assignees = []tfTypes.AuthorEntity{}
						if len(r.Owner.MsTeamsChannel.Incident.Ticket.Assignees) > len(resp.Owner.MsTeamsChannel.Incident.Ticket.Assignees) {
							r.Owner.MsTeamsChannel.Incident.Ticket.Assignees = r.Owner.MsTeamsChannel.Incident.Ticket.Assignees[:len(resp.Owner.MsTeamsChannel.Incident.Ticket.Assignees)]
						}
						for assigneesCount1, assigneesItem1 := range resp.Owner.MsTeamsChannel.Incident.Ticket.Assignees {
							var assignees3 tfTypes.AuthorEntity
							assignees3.Email = types.StringPointerValue(assigneesItem1.Email)
							assignees3.ID = types.StringPointerValue(assigneesItem1.ID)
							assignees3.Name = types.StringPointerValue(assigneesItem1.Name)
							assignees3.Source = types.StringPointerValue(assigneesItem1.Source)
							if assigneesCount1+1 > len(r.Owner.MsTeamsChannel.Incident.Ticket.Assignees) {
								r.Owner.MsTeamsChannel.Incident.Ticket.Assignees = append(r.Owner.MsTeamsChannel.Incident.Ticket.Assignees, assignees3)
							} else {
								r.Owner.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Email = assignees3.Email
								r.Owner.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].ID = assignees3.ID
								r.Owner.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Name = assignees3.Name
								r.Owner.MsTeamsChannel.Incident.Ticket.Assignees[assigneesCount1].Source = assignees3.Source
							}
						}
						if resp.Owner.MsTeamsChannel.Incident.Ticket.CreatedAt != nil {
							r.Owner.MsTeamsChannel.Incident.Ticket.CreatedAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.Ticket.CreatedAt.Format(time.RFC3339Nano))
						} else {
							r.Owner.MsTeamsChannel.Incident.Ticket.CreatedAt = types.StringNull()
						}
						if resp.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy == nil {
							r.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy = nil
						} else {
							r.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy = &tfTypes.AuthorEntity{}
							r.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy.Email = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy.Email)
							r.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy.ID)
							r.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy.Name = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy.Name)
							r.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy.Source = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.CreatedBy.Source)
						}
						r.Owner.MsTeamsChannel.Incident.Ticket.Description = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Description)
						if resp.Owner.MsTeamsChannel.Incident.Ticket.DueAt != nil {
							r.Owner.MsTeamsChannel.Incident.Ticket.DueAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.Ticket.DueAt.Format(time.RFC3339Nano))
						} else {
							r.Owner.MsTeamsChannel.Incident.Ticket.DueAt = types.StringNull()
						}
						r.Owner.MsTeamsChannel.Incident.Ticket.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.ID)
						r.Owner.MsTeamsChannel.Incident.Ticket.IncidentCurrentMilestone = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.IncidentCurrentMilestone)
						r.Owner.MsTeamsChannel.Incident.Ticket.IncidentID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.IncidentID)
						r.Owner.MsTeamsChannel.Incident.Ticket.IncidentName = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.IncidentName)
						if resp.Owner.MsTeamsChannel.Incident.Ticket.Link == nil {
							r.Owner.MsTeamsChannel.Incident.Ticket.Link = nil
						} else {
							r.Owner.MsTeamsChannel.Incident.Ticket.Link = &tfTypes.AttachmentsLinkEntity{}
							r.Owner.MsTeamsChannel.Incident.Ticket.Link.Deletable = types.BoolPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Link.Deletable)
							r.Owner.MsTeamsChannel.Incident.Ticket.Link.DisplayText = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Link.DisplayText)
							r.Owner.MsTeamsChannel.Incident.Ticket.Link.Editable = types.BoolPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Link.Editable)
							r.Owner.MsTeamsChannel.Incident.Ticket.Link.HrefURL = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Link.HrefURL)
							r.Owner.MsTeamsChannel.Incident.Ticket.Link.IconURL = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Link.IconURL)
							r.Owner.MsTeamsChannel.Incident.Ticket.Link.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Link.ID)
							r.Owner.MsTeamsChannel.Incident.Ticket.Link.Type = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Link.Type)
						}
						if resp.Owner.MsTeamsChannel.Incident.Ticket.Priority == nil {
							r.Owner.MsTeamsChannel.Incident.Ticket.Priority = nil
						} else {
							r.Owner.MsTeamsChannel.Incident.Ticket.Priority = &tfTypes.TicketingPriorityEntity{}
							if resp.Owner.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt != nil {
								r.Owner.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt.Format(time.RFC3339Nano))
							} else {
								r.Owner.MsTeamsChannel.Incident.Ticket.Priority.CreatedAt = types.StringNull()
							}
							r.Owner.MsTeamsChannel.Incident.Ticket.Priority.ID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Priority.ID)
							r.Owner.MsTeamsChannel.Incident.Ticket.Priority.Name = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Priority.Name)
							if resp.Owner.MsTeamsChannel.Incident.Ticket.Priority.Position != nil {
								r.Owner.MsTeamsChannel.Incident.Ticket.Priority.Position = types.Int64Value(int64(*resp.Owner.MsTeamsChannel.Incident.Ticket.Priority.Position))
							} else {
								r.Owner.MsTeamsChannel.Incident.Ticket.Priority.Position = types.Int64Null()
							}
							if resp.Owner.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt != nil {
								r.Owner.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt.Format(time.RFC3339Nano))
							} else {
								r.Owner.MsTeamsChannel.Incident.Ticket.Priority.UpdatedAt = types.StringNull()
							}
						}
						if resp.Owner.MsTeamsChannel.Incident.Ticket.State != nil {
							r.Owner.MsTeamsChannel.Incident.Ticket.State = types.StringValue(string(*resp.Owner.MsTeamsChannel.Incident.Ticket.State))
						} else {
							r.Owner.MsTeamsChannel.Incident.Ticket.State = types.StringNull()
						}
						r.Owner.MsTeamsChannel.Incident.Ticket.Summary = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.Summary)
						r.Owner.MsTeamsChannel.Incident.Ticket.TagList = []types.String{}
						for _, v := range resp.Owner.MsTeamsChannel.Incident.Ticket.TagList {
							r.Owner.MsTeamsChannel.Incident.Ticket.TagList = append(r.Owner.MsTeamsChannel.Incident.Ticket.TagList, types.StringValue(v))
						}
						r.Owner.MsTeamsChannel.Incident.Ticket.TaskID = types.StringPointerValue(resp.Owner.MsTeamsChannel.Incident.Ticket.TaskID)
						if resp.Owner.MsTeamsChannel.Incident.Ticket.Type != nil {
							r.Owner.MsTeamsChannel.Incident.Ticket.Type = types.StringValue(string(*resp.Owner.MsTeamsChannel.Incident.Ticket.Type))
						} else {
							r.Owner.MsTeamsChannel.Incident.Ticket.Type = types.StringNull()
						}
						if resp.Owner.MsTeamsChannel.Incident.Ticket.UpdatedAt != nil {
							r.Owner.MsTeamsChannel.Incident.Ticket.UpdatedAt = types.StringValue(resp.Owner.MsTeamsChannel.Incident.Ticket.UpdatedAt.Format(time.RFC3339Nano))
						} else {
							r.Owner.MsTeamsChannel.Incident.Ticket.UpdatedAt = types.StringNull()
						}
					}
				}
				r.Owner.MsTeamsChannel.MsTeamID = types.StringPointerValue(resp.Owner.MsTeamsChannel.MsTeamID)
				r.Owner.MsTeamsChannel.Status = types.StringPointerValue(resp.Owner.MsTeamsChannel.Status)
				r.Owner.MsTeamsChannel.TeamName = types.StringPointerValue(resp.Owner.MsTeamsChannel.TeamName)
			}
			r.Owner.Name = types.StringPointerValue(resp.Owner.Name)
			r.Owner.OwnedFunctionalities = []tfTypes.FunctionalityEntity{}
			if len(r.Owner.OwnedFunctionalities) > len(resp.Owner.OwnedFunctionalities) {
				r.Owner.OwnedFunctionalities = r.Owner.OwnedFunctionalities[:len(resp.Owner.OwnedFunctionalities)]
			}
			for ownedFunctionalitiesCount, ownedFunctionalitiesItem := range resp.Owner.OwnedFunctionalities {
				var ownedFunctionalities1 tfTypes.FunctionalityEntity
				ownedFunctionalities1.ActiveIncidents = []types.String{}
				for _, v := range ownedFunctionalitiesItem.ActiveIncidents {
					ownedFunctionalities1.ActiveIncidents = append(ownedFunctionalities1.ActiveIncidents, types.StringValue(v))
				}
				ownedFunctionalities1.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem.AlertOnAdd)
				ownedFunctionalities1.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem.AutoAddRespondingTeam)
				if ownedFunctionalitiesItem.CreatedAt != nil {
					ownedFunctionalities1.CreatedAt = types.StringValue(ownedFunctionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					ownedFunctionalities1.CreatedAt = types.StringNull()
				}
				ownedFunctionalities1.Description = types.StringPointerValue(ownedFunctionalitiesItem.Description)
				ownedFunctionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
				for externalResourcesCount1, externalResourcesItem1 := range ownedFunctionalitiesItem.ExternalResources {
					var externalResources3 tfTypes.ExternalResourceEntity
					externalResources3.ConnectionID = types.StringPointerValue(externalResourcesItem1.ConnectionID)
					externalResources3.ConnectionName = types.StringPointerValue(externalResourcesItem1.ConnectionName)
					externalResources3.ConnectionType = types.StringPointerValue(externalResourcesItem1.ConnectionType)
					if externalResourcesItem1.CreatedAt != nil {
						externalResources3.CreatedAt = types.StringValue(externalResourcesItem1.CreatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources3.CreatedAt = types.StringNull()
					}
					externalResources3.Name = types.StringPointerValue(externalResourcesItem1.Name)
					externalResources3.RemoteID = types.StringPointerValue(externalResourcesItem1.RemoteID)
					externalResources3.RemoteURL = types.StringPointerValue(externalResourcesItem1.RemoteURL)
					if externalResourcesItem1.UpdatedAt != nil {
						externalResources3.UpdatedAt = types.StringValue(externalResourcesItem1.UpdatedAt.Format(time.RFC3339Nano))
					} else {
						externalResources3.UpdatedAt = types.StringNull()
					}
					if externalResourcesCount1+1 > len(ownedFunctionalities1.ExternalResources) {
						ownedFunctionalities1.ExternalResources = append(ownedFunctionalities1.ExternalResources, externalResources3)
					} else {
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionID = externalResources3.ConnectionID
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionName = externalResources3.ConnectionName
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionType = externalResources3.ConnectionType
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].CreatedAt = externalResources3.CreatedAt
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].Name = externalResources3.Name
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteID = externalResources3.RemoteID
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteURL = externalResources3.RemoteURL
						ownedFunctionalities1.ExternalResources[externalResourcesCount1].UpdatedAt = externalResources3.UpdatedAt
					}
				}
				ownedFunctionalities1.ID = types.StringPointerValue(ownedFunctionalitiesItem.ID)
				if len(ownedFunctionalitiesItem.Labels) > 0 {
					ownedFunctionalities1.Labels = make(map[string]types.String)
					for key2, value4 := range ownedFunctionalitiesItem.Labels {
						ownedFunctionalities1.Labels[key2] = types.StringValue(value4)
					}
				}
				ownedFunctionalities1.Links = []tfTypes.LinksEntity{}
				for linksCount1, linksItem1 := range ownedFunctionalitiesItem.Links {
					var links3 tfTypes.LinksEntity
					links3.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
					links3.IconURL = types.StringPointerValue(linksItem1.IconURL)
					links3.ID = types.StringPointerValue(linksItem1.ID)
					links3.Name = types.StringPointerValue(linksItem1.Name)
					if linksCount1+1 > len(ownedFunctionalities1.Links) {
						ownedFunctionalities1.Links = append(ownedFunctionalities1.Links, links3)
					} else {
						ownedFunctionalities1.Links[linksCount1].HrefURL = links3.HrefURL
						ownedFunctionalities1.Links[linksCount1].IconURL = links3.IconURL
						ownedFunctionalities1.Links[linksCount1].ID = links3.ID
						ownedFunctionalities1.Links[linksCount1].Name = links3.Name
					}
				}
				ownedFunctionalities1.Name = types.StringPointerValue(ownedFunctionalitiesItem.Name)
				if ownedFunctionalitiesItem.Owner == nil {
					ownedFunctionalities1.Owner = nil
				} else {
					ownedFunctionalities1.Owner = &tfTypes.TeamEntity1{}
				}
				ownedFunctionalities1.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Slug)
				if ownedFunctionalitiesItem.UpdatedAt != nil {
					ownedFunctionalities1.UpdatedAt = types.StringValue(ownedFunctionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					ownedFunctionalities1.UpdatedAt = types.StringNull()
				}
				if ownedFunctionalitiesItem.UpdatedBy == nil {
					ownedFunctionalities1.UpdatedBy = nil
				} else {
					ownedFunctionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
					ownedFunctionalities1.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Email)
					ownedFunctionalities1.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.ID)
					ownedFunctionalities1.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Name)
					ownedFunctionalities1.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Source)
				}
				if ownedFunctionalitiesCount+1 > len(r.Owner.OwnedFunctionalities) {
					r.Owner.OwnedFunctionalities = append(r.Owner.OwnedFunctionalities, ownedFunctionalities1)
				} else {
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ActiveIncidents = ownedFunctionalities1.ActiveIncidents
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].AlertOnAdd = ownedFunctionalities1.AlertOnAdd
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].AutoAddRespondingTeam = ownedFunctionalities1.AutoAddRespondingTeam
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].CreatedAt = ownedFunctionalities1.CreatedAt
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Description = ownedFunctionalities1.Description
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ExternalResources = ownedFunctionalities1.ExternalResources
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].ID = ownedFunctionalities1.ID
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Labels = ownedFunctionalities1.Labels
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Links = ownedFunctionalities1.Links
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Name = ownedFunctionalities1.Name
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Owner = ownedFunctionalities1.Owner
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].Slug = ownedFunctionalities1.Slug
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedAt = ownedFunctionalities1.UpdatedAt
					r.Owner.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedBy = ownedFunctionalities1.UpdatedBy
				}
			}
			r.Owner.OwnedRunbooks = []tfTypes.SlimRunbookEntity{}
			if len(r.Owner.OwnedRunbooks) > len(resp.Owner.OwnedRunbooks) {
				r.Owner.OwnedRunbooks = r.Owner.OwnedRunbooks[:len(resp.Owner.OwnedRunbooks)]
			}
			for ownedRunbooksCount, ownedRunbooksItem := range resp.Owner.OwnedRunbooks {
				var ownedRunbooks1 tfTypes.SlimRunbookEntity
				if ownedRunbooksItem.AttachmentRule == nil {
					ownedRunbooks1.AttachmentRule = nil
				} else {
					ownedRunbooks1.AttachmentRule = &tfTypes.RulesRuleEntity{}
					if ownedRunbooksItem.AttachmentRule.Logic == nil {
						ownedRunbooks1.AttachmentRule.Logic = nil
					} else {
						ownedRunbooks1.AttachmentRule.Logic = &tfTypes.TeamEntity1{}
					}
					if ownedRunbooksItem.AttachmentRule.UserData == nil {
						ownedRunbooks1.AttachmentRule.UserData = nil
					} else {
						ownedRunbooks1.AttachmentRule.UserData = &tfTypes.FHTypesGenericEntity{}
						ownedRunbooks1.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Label)
						ownedRunbooks1.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Type)
						ownedRunbooks1.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Value)
					}
				}
				ownedRunbooks1.Categories = types.StringPointerValue(ownedRunbooksItem.Categories)
				if ownedRunbooksItem.CreatedAt != nil {
					ownedRunbooks1.CreatedAt = types.StringValue(ownedRunbooksItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					ownedRunbooks1.CreatedAt = types.StringNull()
				}
				ownedRunbooks1.Description = types.StringPointerValue(ownedRunbooksItem.Description)
				ownedRunbooks1.ID = types.StringPointerValue(ownedRunbooksItem.ID)
				ownedRunbooks1.Name = types.StringPointerValue(ownedRunbooksItem.Name)
				if ownedRunbooksItem.Owner == nil {
					ownedRunbooks1.Owner = nil
				} else {
					ownedRunbooks1.Owner = &tfTypes.TeamEntity1{}
				}
				ownedRunbooks1.Summary = types.StringPointerValue(ownedRunbooksItem.Summary)
				ownedRunbooks1.Type = types.StringPointerValue(ownedRunbooksItem.Type)
				if ownedRunbooksItem.UpdatedAt != nil {
					ownedRunbooks1.UpdatedAt = types.StringValue(ownedRunbooksItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					ownedRunbooks1.UpdatedAt = types.StringNull()
				}
				if ownedRunbooksCount+1 > len(r.Owner.OwnedRunbooks) {
					r.Owner.OwnedRunbooks = append(r.Owner.OwnedRunbooks, ownedRunbooks1)
				} else {
					r.Owner.OwnedRunbooks[ownedRunbooksCount].AttachmentRule = ownedRunbooks1.AttachmentRule
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Categories = ownedRunbooks1.Categories
					r.Owner.OwnedRunbooks[ownedRunbooksCount].CreatedAt = ownedRunbooks1.CreatedAt
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Description = ownedRunbooks1.Description
					r.Owner.OwnedRunbooks[ownedRunbooksCount].ID = ownedRunbooks1.ID
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Name = ownedRunbooks1.Name
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Owner = ownedRunbooks1.Owner
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Summary = ownedRunbooks1.Summary
					r.Owner.OwnedRunbooks[ownedRunbooksCount].Type = ownedRunbooks1.Type
					r.Owner.OwnedRunbooks[ownedRunbooksCount].UpdatedAt = ownedRunbooks1.UpdatedAt
				}
			}
			r.Owner.SignalsIcalURL = types.StringPointerValue(resp.Owner.SignalsIcalURL)
			if resp.Owner.SlackChannel == nil {
				r.Owner.SlackChannel = nil
			} else {
				r.Owner.SlackChannel = &tfTypes.IntegrationsSlackSlackChannelEntity{}
				r.Owner.SlackChannel.ID = types.StringPointerValue(resp.Owner.SlackChannel.ID)
				r.Owner.SlackChannel.Name = types.StringPointerValue(resp.Owner.SlackChannel.Name)
				r.Owner.SlackChannel.SlackChannelID = types.StringPointerValue(resp.Owner.SlackChannel.SlackChannelID)
			}
			r.Owner.Slug = types.StringPointerValue(resp.Owner.Slug)
			if resp.Owner.UpdatedAt != nil {
				r.Owner.UpdatedAt = types.StringValue(resp.Owner.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				r.Owner.UpdatedAt = types.StringNull()
			}
		}
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
	}
}

func (r *ChecklistTemplateResourceModel) ToSharedPatchV1ChecklistTemplatesID() *shared.PatchV1ChecklistTemplatesID {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var checks []shared.PatchV1ChecklistTemplatesIDChecks = []shared.PatchV1ChecklistTemplatesIDChecks{}
	for _, checksItem := range r.Checks {
		id := new(string)
		if !checksItem.ID.IsUnknown() && !checksItem.ID.IsNull() {
			*id = checksItem.ID.ValueString()
		} else {
			id = nil
		}
		description1 := new(string)
		if !checksItem.Description.IsUnknown() && !checksItem.Description.IsNull() {
			*description1 = checksItem.Description.ValueString()
		} else {
			description1 = nil
		}
		var name1 string
		name1 = checksItem.Name.ValueString()

		checks = append(checks, shared.PatchV1ChecklistTemplatesIDChecks{
			ID:          id,
			Description: description1,
			Name:        name1,
		})
	}
	teamID := new(string)
	if !r.TeamID.IsUnknown() && !r.TeamID.IsNull() {
		*teamID = r.TeamID.ValueString()
	} else {
		teamID = nil
	}
	out := shared.PatchV1ChecklistTemplatesID{
		Name:        name,
		Description: description,
		Checks:      checks,
		TeamID:      teamID,
	}
	return &out
}
