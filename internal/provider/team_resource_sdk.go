// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"time"
)

func (r *TeamResourceModel) ToSharedPostV1Teams() *shared.PostV1Teams {
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	slackChannelID := new(string)
	if !r.SlackChannelID.IsUnknown() && !r.SlackChannelID.IsNull() {
		*slackChannelID = r.SlackChannelID.ValueString()
	} else {
		slackChannelID = nil
	}
	var msTeamsChannel *shared.MsTeamsChannel
	if r.MsTeamsChannel != nil {
		var channelID string
		channelID = r.MsTeamsChannel.ChannelID.ValueString()

		var msTeamID string
		msTeamID = r.MsTeamsChannel.MsTeamID.ValueString()

		msTeamsChannel = &shared.MsTeamsChannel{
			ChannelID: channelID,
			MsTeamID:  msTeamID,
		}
	}
	var memberships []shared.Memberships = []shared.Memberships{}
	for _, membershipsItem := range r.Memberships {
		userID := new(string)
		if !membershipsItem.UserID.IsUnknown() && !membershipsItem.UserID.IsNull() {
			*userID = membershipsItem.UserID.ValueString()
		} else {
			userID = nil
		}
		scheduleID := new(string)
		if !membershipsItem.ScheduleID.IsUnknown() && !membershipsItem.ScheduleID.IsNull() {
			*scheduleID = membershipsItem.ScheduleID.ValueString()
		} else {
			scheduleID = nil
		}
		incidentRoleID := new(string)
		if !membershipsItem.IncidentRoleID.IsUnknown() && !membershipsItem.IncidentRoleID.IsNull() {
			*incidentRoleID = membershipsItem.IncidentRoleID.ValueString()
		} else {
			incidentRoleID = nil
		}
		memberships = append(memberships, shared.Memberships{
			UserID:         userID,
			ScheduleID:     scheduleID,
			IncidentRoleID: incidentRoleID,
		})
	}
	out := shared.PostV1Teams{
		Name:           name,
		Description:    description,
		Slug:           slug,
		SlackChannelID: slackChannelID,
		MsTeamsChannel: msTeamsChannel,
		Memberships:    memberships,
	}
	return &out
}

func (r *TeamResourceModel) RefreshFromSharedTeamEntity(resp *shared.TeamEntity) {
	if resp != nil {
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		if resp.CreatedBy == nil {
			r.CreatedBy = nil
		} else {
			r.CreatedBy = &tfTypes.AuthorEntity{}
			r.CreatedBy.Email = types.StringPointerValue(resp.CreatedBy.Email)
			r.CreatedBy.ID = types.StringPointerValue(resp.CreatedBy.ID)
			r.CreatedBy.Name = types.StringPointerValue(resp.CreatedBy.Name)
			r.CreatedBy.Source = types.StringPointerValue(resp.CreatedBy.Source)
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.Functionalities = []tfTypes.FunctionalityEntity{}
		if len(r.Functionalities) > len(resp.Functionalities) {
			r.Functionalities = r.Functionalities[:len(resp.Functionalities)]
		}
		for functionalitiesCount, functionalitiesItem := range resp.Functionalities {
			var functionalities1 tfTypes.FunctionalityEntity
			functionalities1.ActiveIncidents = []types.String{}
			for _, v := range functionalitiesItem.ActiveIncidents {
				functionalities1.ActiveIncidents = append(functionalities1.ActiveIncidents, types.StringValue(v))
			}
			functionalities1.AlertOnAdd = types.BoolPointerValue(functionalitiesItem.AlertOnAdd)
			functionalities1.AutoAddRespondingTeam = types.BoolPointerValue(functionalitiesItem.AutoAddRespondingTeam)
			if functionalitiesItem.CreatedAt != nil {
				functionalities1.CreatedAt = types.StringValue(functionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				functionalities1.CreatedAt = types.StringNull()
			}
			functionalities1.Description = types.StringPointerValue(functionalitiesItem.Description)
			functionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
			for externalResourcesCount, externalResourcesItem := range functionalitiesItem.ExternalResources {
				var externalResources1 tfTypes.ExternalResourceEntity
				externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
				externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
				externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
				if externalResourcesItem.CreatedAt != nil {
					externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
				} else {
					externalResources1.CreatedAt = types.StringNull()
				}
				externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
				externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
				externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
				if externalResourcesItem.UpdatedAt != nil {
					externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					externalResources1.UpdatedAt = types.StringNull()
				}
				if externalResourcesCount+1 > len(functionalities1.ExternalResources) {
					functionalities1.ExternalResources = append(functionalities1.ExternalResources, externalResources1)
				} else {
					functionalities1.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
					functionalities1.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
					functionalities1.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
					functionalities1.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
					functionalities1.ExternalResources[externalResourcesCount].Name = externalResources1.Name
					functionalities1.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
					functionalities1.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
					functionalities1.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
				}
			}
			functionalities1.ID = types.StringPointerValue(functionalitiesItem.ID)
			if len(functionalitiesItem.Labels) > 0 {
				functionalities1.Labels = make(map[string]types.String)
				for key, value := range functionalitiesItem.Labels {
					functionalities1.Labels[key] = types.StringValue(value)
				}
			}
			functionalities1.Links = []tfTypes.LinksEntity{}
			for linksCount, linksItem := range functionalitiesItem.Links {
				var links1 tfTypes.LinksEntity
				links1.HrefURL = types.StringPointerValue(linksItem.HrefURL)
				links1.IconURL = types.StringPointerValue(linksItem.IconURL)
				links1.ID = types.StringPointerValue(linksItem.ID)
				links1.Name = types.StringPointerValue(linksItem.Name)
				if linksCount+1 > len(functionalities1.Links) {
					functionalities1.Links = append(functionalities1.Links, links1)
				} else {
					functionalities1.Links[linksCount].HrefURL = links1.HrefURL
					functionalities1.Links[linksCount].IconURL = links1.IconURL
					functionalities1.Links[linksCount].ID = links1.ID
					functionalities1.Links[linksCount].Name = links1.Name
				}
			}
			functionalities1.Name = types.StringPointerValue(functionalitiesItem.Name)
			if functionalitiesItem.Owner == nil {
				functionalities1.Owner = nil
			} else {
				functionalities1.Owner = &tfTypes.TeamEntity1{}
			}
			functionalities1.Slug = types.StringPointerValue(functionalitiesItem.Slug)
			if functionalitiesItem.UpdatedAt != nil {
				functionalities1.UpdatedAt = types.StringValue(functionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				functionalities1.UpdatedAt = types.StringNull()
			}
			if functionalitiesItem.UpdatedBy == nil {
				functionalities1.UpdatedBy = nil
			} else {
				functionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
				functionalities1.UpdatedBy.Email = types.StringPointerValue(functionalitiesItem.UpdatedBy.Email)
				functionalities1.UpdatedBy.ID = types.StringPointerValue(functionalitiesItem.UpdatedBy.ID)
				functionalities1.UpdatedBy.Name = types.StringPointerValue(functionalitiesItem.UpdatedBy.Name)
				functionalities1.UpdatedBy.Source = types.StringPointerValue(functionalitiesItem.UpdatedBy.Source)
			}
			if functionalitiesCount+1 > len(r.Functionalities) {
				r.Functionalities = append(r.Functionalities, functionalities1)
			} else {
				r.Functionalities[functionalitiesCount].ActiveIncidents = functionalities1.ActiveIncidents
				r.Functionalities[functionalitiesCount].AlertOnAdd = functionalities1.AlertOnAdd
				r.Functionalities[functionalitiesCount].AutoAddRespondingTeam = functionalities1.AutoAddRespondingTeam
				r.Functionalities[functionalitiesCount].CreatedAt = functionalities1.CreatedAt
				r.Functionalities[functionalitiesCount].Description = functionalities1.Description
				r.Functionalities[functionalitiesCount].ExternalResources = functionalities1.ExternalResources
				r.Functionalities[functionalitiesCount].ID = functionalities1.ID
				r.Functionalities[functionalitiesCount].Labels = functionalities1.Labels
				r.Functionalities[functionalitiesCount].Links = functionalities1.Links
				r.Functionalities[functionalitiesCount].Name = functionalities1.Name
				r.Functionalities[functionalitiesCount].Owner = functionalities1.Owner
				r.Functionalities[functionalitiesCount].Slug = functionalities1.Slug
				r.Functionalities[functionalitiesCount].UpdatedAt = functionalities1.UpdatedAt
				r.Functionalities[functionalitiesCount].UpdatedBy = functionalities1.UpdatedBy
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Memberships = []tfTypes.Memberships{}
		if len(r.Memberships) > len(resp.Memberships) {
			r.Memberships = r.Memberships[:len(resp.Memberships)]
		}
		for membershipsCount, membershipsItem := range resp.Memberships {
			var memberships1 tfTypes.Memberships
			if membershipsItem.DefaultIncidentRole == nil {
				memberships1.DefaultIncidentRole = nil
			} else {
				memberships1.DefaultIncidentRole = &tfTypes.IncidentRoleEntity{}
				if membershipsItem.DefaultIncidentRole.CreatedAt != nil {
					memberships1.DefaultIncidentRole.CreatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.CreatedAt.Format(time.RFC3339Nano))
				} else {
					memberships1.DefaultIncidentRole.CreatedAt = types.StringNull()
				}
				memberships1.DefaultIncidentRole.Description = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Description)
				if membershipsItem.DefaultIncidentRole.DiscardedAt != nil {
					memberships1.DefaultIncidentRole.DiscardedAt = types.StringValue(membershipsItem.DefaultIncidentRole.DiscardedAt.Format(time.RFC3339Nano))
				} else {
					memberships1.DefaultIncidentRole.DiscardedAt = types.StringNull()
				}
				memberships1.DefaultIncidentRole.ID = types.StringPointerValue(membershipsItem.DefaultIncidentRole.ID)
				memberships1.DefaultIncidentRole.Name = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Name)
				memberships1.DefaultIncidentRole.Summary = types.StringPointerValue(membershipsItem.DefaultIncidentRole.Summary)
				if membershipsItem.DefaultIncidentRole.UpdatedAt != nil {
					memberships1.DefaultIncidentRole.UpdatedAt = types.StringValue(membershipsItem.DefaultIncidentRole.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					memberships1.DefaultIncidentRole.UpdatedAt = types.StringNull()
				}
			}
			if membershipsItem.Schedule == nil {
				memberships1.Schedule = nil
			} else {
				memberships1.Schedule = &tfTypes.ScheduleEntity{}
				memberships1.Schedule.Discarded = types.BoolPointerValue(membershipsItem.Schedule.Discarded)
				memberships1.Schedule.ID = types.StringPointerValue(membershipsItem.Schedule.ID)
				memberships1.Schedule.Integration = types.StringPointerValue(membershipsItem.Schedule.Integration)
				memberships1.Schedule.Name = types.StringPointerValue(membershipsItem.Schedule.Name)
			}
			if membershipsItem.User == nil {
				memberships1.User = nil
			} else {
				memberships1.User = &tfTypes.UserEntity{}
				if membershipsItem.User.CreatedAt != nil {
					memberships1.User.CreatedAt = types.StringValue(membershipsItem.User.CreatedAt.Format(time.RFC3339Nano))
				} else {
					memberships1.User.CreatedAt = types.StringNull()
				}
				memberships1.User.Email = types.StringPointerValue(membershipsItem.User.Email)
				memberships1.User.ID = types.StringPointerValue(membershipsItem.User.ID)
				memberships1.User.Name = types.StringPointerValue(membershipsItem.User.Name)
				memberships1.User.SignalsEnabledNotificationTypes = []types.String{}
				for _, v := range membershipsItem.User.SignalsEnabledNotificationTypes {
					memberships1.User.SignalsEnabledNotificationTypes = append(memberships1.User.SignalsEnabledNotificationTypes, types.StringValue(v))
				}
				memberships1.User.SlackLinked = types.BoolPointerValue(membershipsItem.User.SlackLinked)
				memberships1.User.SlackUserID = types.StringPointerValue(membershipsItem.User.SlackUserID)
				if membershipsItem.User.UpdatedAt != nil {
					memberships1.User.UpdatedAt = types.StringValue(membershipsItem.User.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					memberships1.User.UpdatedAt = types.StringNull()
				}
			}
			if membershipsCount+1 > len(r.Memberships) {
				r.Memberships = append(r.Memberships, memberships1)
			} else {
				r.Memberships[membershipsCount].DefaultIncidentRole = memberships1.DefaultIncidentRole
				r.Memberships[membershipsCount].Schedule = memberships1.Schedule
				r.Memberships[membershipsCount].User = memberships1.User
			}
		}
		if resp.MsTeamsChannel == nil {
			r.MsTeamsChannel = nil
		} else {
			r.MsTeamsChannel = &tfTypes.MsTeamsChannel{}
			r.MsTeamsChannel.ChannelID = types.StringPointerValue(resp.MsTeamsChannel.ChannelID)
			r.MsTeamsChannel.ChannelName = types.StringPointerValue(resp.MsTeamsChannel.ChannelName)
			r.MsTeamsChannel.ChannelURL = types.StringPointerValue(resp.MsTeamsChannel.ChannelURL)
			r.MsTeamsChannel.ID = types.StringPointerValue(resp.MsTeamsChannel.ID)
			r.MsTeamsChannel.MsTeamID = types.StringPointerValue(resp.MsTeamsChannel.MsTeamID)
			r.MsTeamsChannel.Status = types.StringPointerValue(resp.MsTeamsChannel.Status)
			r.MsTeamsChannel.TeamName = types.StringPointerValue(resp.MsTeamsChannel.TeamName)
		}
		r.Name = types.StringPointerValue(resp.Name)
		r.OwnedFunctionalities = []tfTypes.FunctionalityEntity{}
		if len(r.OwnedFunctionalities) > len(resp.OwnedFunctionalities) {
			r.OwnedFunctionalities = r.OwnedFunctionalities[:len(resp.OwnedFunctionalities)]
		}
		for ownedFunctionalitiesCount, ownedFunctionalitiesItem := range resp.OwnedFunctionalities {
			var ownedFunctionalities1 tfTypes.FunctionalityEntity
			ownedFunctionalities1.ActiveIncidents = []types.String{}
			for _, v := range ownedFunctionalitiesItem.ActiveIncidents {
				ownedFunctionalities1.ActiveIncidents = append(ownedFunctionalities1.ActiveIncidents, types.StringValue(v))
			}
			ownedFunctionalities1.AlertOnAdd = types.BoolPointerValue(ownedFunctionalitiesItem.AlertOnAdd)
			ownedFunctionalities1.AutoAddRespondingTeam = types.BoolPointerValue(ownedFunctionalitiesItem.AutoAddRespondingTeam)
			if ownedFunctionalitiesItem.CreatedAt != nil {
				ownedFunctionalities1.CreatedAt = types.StringValue(ownedFunctionalitiesItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				ownedFunctionalities1.CreatedAt = types.StringNull()
			}
			ownedFunctionalities1.Description = types.StringPointerValue(ownedFunctionalitiesItem.Description)
			ownedFunctionalities1.ExternalResources = []tfTypes.ExternalResourceEntity{}
			for externalResourcesCount1, externalResourcesItem1 := range ownedFunctionalitiesItem.ExternalResources {
				var externalResources3 tfTypes.ExternalResourceEntity
				externalResources3.ConnectionID = types.StringPointerValue(externalResourcesItem1.ConnectionID)
				externalResources3.ConnectionName = types.StringPointerValue(externalResourcesItem1.ConnectionName)
				externalResources3.ConnectionType = types.StringPointerValue(externalResourcesItem1.ConnectionType)
				if externalResourcesItem1.CreatedAt != nil {
					externalResources3.CreatedAt = types.StringValue(externalResourcesItem1.CreatedAt.Format(time.RFC3339Nano))
				} else {
					externalResources3.CreatedAt = types.StringNull()
				}
				externalResources3.Name = types.StringPointerValue(externalResourcesItem1.Name)
				externalResources3.RemoteID = types.StringPointerValue(externalResourcesItem1.RemoteID)
				externalResources3.RemoteURL = types.StringPointerValue(externalResourcesItem1.RemoteURL)
				if externalResourcesItem1.UpdatedAt != nil {
					externalResources3.UpdatedAt = types.StringValue(externalResourcesItem1.UpdatedAt.Format(time.RFC3339Nano))
				} else {
					externalResources3.UpdatedAt = types.StringNull()
				}
				if externalResourcesCount1+1 > len(ownedFunctionalities1.ExternalResources) {
					ownedFunctionalities1.ExternalResources = append(ownedFunctionalities1.ExternalResources, externalResources3)
				} else {
					ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionID = externalResources3.ConnectionID
					ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionName = externalResources3.ConnectionName
					ownedFunctionalities1.ExternalResources[externalResourcesCount1].ConnectionType = externalResources3.ConnectionType
					ownedFunctionalities1.ExternalResources[externalResourcesCount1].CreatedAt = externalResources3.CreatedAt
					ownedFunctionalities1.ExternalResources[externalResourcesCount1].Name = externalResources3.Name
					ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteID = externalResources3.RemoteID
					ownedFunctionalities1.ExternalResources[externalResourcesCount1].RemoteURL = externalResources3.RemoteURL
					ownedFunctionalities1.ExternalResources[externalResourcesCount1].UpdatedAt = externalResources3.UpdatedAt
				}
			}
			ownedFunctionalities1.ID = types.StringPointerValue(ownedFunctionalitiesItem.ID)
			if len(ownedFunctionalitiesItem.Labels) > 0 {
				ownedFunctionalities1.Labels = make(map[string]types.String)
				for key1, value1 := range ownedFunctionalitiesItem.Labels {
					ownedFunctionalities1.Labels[key1] = types.StringValue(value1)
				}
			}
			ownedFunctionalities1.Links = []tfTypes.LinksEntity{}
			for linksCount1, linksItem1 := range ownedFunctionalitiesItem.Links {
				var links3 tfTypes.LinksEntity
				links3.HrefURL = types.StringPointerValue(linksItem1.HrefURL)
				links3.IconURL = types.StringPointerValue(linksItem1.IconURL)
				links3.ID = types.StringPointerValue(linksItem1.ID)
				links3.Name = types.StringPointerValue(linksItem1.Name)
				if linksCount1+1 > len(ownedFunctionalities1.Links) {
					ownedFunctionalities1.Links = append(ownedFunctionalities1.Links, links3)
				} else {
					ownedFunctionalities1.Links[linksCount1].HrefURL = links3.HrefURL
					ownedFunctionalities1.Links[linksCount1].IconURL = links3.IconURL
					ownedFunctionalities1.Links[linksCount1].ID = links3.ID
					ownedFunctionalities1.Links[linksCount1].Name = links3.Name
				}
			}
			ownedFunctionalities1.Name = types.StringPointerValue(ownedFunctionalitiesItem.Name)
			if ownedFunctionalitiesItem.Owner == nil {
				ownedFunctionalities1.Owner = nil
			} else {
				ownedFunctionalities1.Owner = &tfTypes.TeamEntity1{}
			}
			ownedFunctionalities1.Slug = types.StringPointerValue(ownedFunctionalitiesItem.Slug)
			if ownedFunctionalitiesItem.UpdatedAt != nil {
				ownedFunctionalities1.UpdatedAt = types.StringValue(ownedFunctionalitiesItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				ownedFunctionalities1.UpdatedAt = types.StringNull()
			}
			if ownedFunctionalitiesItem.UpdatedBy == nil {
				ownedFunctionalities1.UpdatedBy = nil
			} else {
				ownedFunctionalities1.UpdatedBy = &tfTypes.AuthorEntity{}
				ownedFunctionalities1.UpdatedBy.Email = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Email)
				ownedFunctionalities1.UpdatedBy.ID = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.ID)
				ownedFunctionalities1.UpdatedBy.Name = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Name)
				ownedFunctionalities1.UpdatedBy.Source = types.StringPointerValue(ownedFunctionalitiesItem.UpdatedBy.Source)
			}
			if ownedFunctionalitiesCount+1 > len(r.OwnedFunctionalities) {
				r.OwnedFunctionalities = append(r.OwnedFunctionalities, ownedFunctionalities1)
			} else {
				r.OwnedFunctionalities[ownedFunctionalitiesCount].ActiveIncidents = ownedFunctionalities1.ActiveIncidents
				r.OwnedFunctionalities[ownedFunctionalitiesCount].AlertOnAdd = ownedFunctionalities1.AlertOnAdd
				r.OwnedFunctionalities[ownedFunctionalitiesCount].AutoAddRespondingTeam = ownedFunctionalities1.AutoAddRespondingTeam
				r.OwnedFunctionalities[ownedFunctionalitiesCount].CreatedAt = ownedFunctionalities1.CreatedAt
				r.OwnedFunctionalities[ownedFunctionalitiesCount].Description = ownedFunctionalities1.Description
				r.OwnedFunctionalities[ownedFunctionalitiesCount].ExternalResources = ownedFunctionalities1.ExternalResources
				r.OwnedFunctionalities[ownedFunctionalitiesCount].ID = ownedFunctionalities1.ID
				r.OwnedFunctionalities[ownedFunctionalitiesCount].Labels = ownedFunctionalities1.Labels
				r.OwnedFunctionalities[ownedFunctionalitiesCount].Links = ownedFunctionalities1.Links
				r.OwnedFunctionalities[ownedFunctionalitiesCount].Name = ownedFunctionalities1.Name
				r.OwnedFunctionalities[ownedFunctionalitiesCount].Owner = ownedFunctionalities1.Owner
				r.OwnedFunctionalities[ownedFunctionalitiesCount].Slug = ownedFunctionalities1.Slug
				r.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedAt = ownedFunctionalities1.UpdatedAt
				r.OwnedFunctionalities[ownedFunctionalitiesCount].UpdatedBy = ownedFunctionalities1.UpdatedBy
			}
		}
		r.OwnedRunbooks = []tfTypes.SlimRunbookEntity{}
		if len(r.OwnedRunbooks) > len(resp.OwnedRunbooks) {
			r.OwnedRunbooks = r.OwnedRunbooks[:len(resp.OwnedRunbooks)]
		}
		for ownedRunbooksCount, ownedRunbooksItem := range resp.OwnedRunbooks {
			var ownedRunbooks1 tfTypes.SlimRunbookEntity
			if ownedRunbooksItem.AttachmentRule == nil {
				ownedRunbooks1.AttachmentRule = nil
			} else {
				ownedRunbooks1.AttachmentRule = &tfTypes.RulesRuleEntity{}
				if ownedRunbooksItem.AttachmentRule.Logic == nil {
					ownedRunbooks1.AttachmentRule.Logic = nil
				} else {
					ownedRunbooks1.AttachmentRule.Logic = &tfTypes.TeamEntity1{}
				}
				if ownedRunbooksItem.AttachmentRule.UserData == nil {
					ownedRunbooks1.AttachmentRule.UserData = nil
				} else {
					ownedRunbooks1.AttachmentRule.UserData = &tfTypes.FHTypesGenericEntity{}
					ownedRunbooks1.AttachmentRule.UserData.Label = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Label)
					ownedRunbooks1.AttachmentRule.UserData.Type = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Type)
					ownedRunbooks1.AttachmentRule.UserData.Value = types.StringPointerValue(ownedRunbooksItem.AttachmentRule.UserData.Value)
				}
			}
			ownedRunbooks1.Categories = types.StringPointerValue(ownedRunbooksItem.Categories)
			if ownedRunbooksItem.CreatedAt != nil {
				ownedRunbooks1.CreatedAt = types.StringValue(ownedRunbooksItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				ownedRunbooks1.CreatedAt = types.StringNull()
			}
			ownedRunbooks1.Description = types.StringPointerValue(ownedRunbooksItem.Description)
			ownedRunbooks1.ID = types.StringPointerValue(ownedRunbooksItem.ID)
			ownedRunbooks1.Name = types.StringPointerValue(ownedRunbooksItem.Name)
			if ownedRunbooksItem.Owner == nil {
				ownedRunbooks1.Owner = nil
			} else {
				ownedRunbooks1.Owner = &tfTypes.TeamEntity1{}
			}
			ownedRunbooks1.Summary = types.StringPointerValue(ownedRunbooksItem.Summary)
			ownedRunbooks1.Type = types.StringPointerValue(ownedRunbooksItem.Type)
			if ownedRunbooksItem.UpdatedAt != nil {
				ownedRunbooks1.UpdatedAt = types.StringValue(ownedRunbooksItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				ownedRunbooks1.UpdatedAt = types.StringNull()
			}
			if ownedRunbooksCount+1 > len(r.OwnedRunbooks) {
				r.OwnedRunbooks = append(r.OwnedRunbooks, ownedRunbooks1)
			} else {
				r.OwnedRunbooks[ownedRunbooksCount].AttachmentRule = ownedRunbooks1.AttachmentRule
				r.OwnedRunbooks[ownedRunbooksCount].Categories = ownedRunbooks1.Categories
				r.OwnedRunbooks[ownedRunbooksCount].CreatedAt = ownedRunbooks1.CreatedAt
				r.OwnedRunbooks[ownedRunbooksCount].Description = ownedRunbooks1.Description
				r.OwnedRunbooks[ownedRunbooksCount].ID = ownedRunbooks1.ID
				r.OwnedRunbooks[ownedRunbooksCount].Name = ownedRunbooks1.Name
				r.OwnedRunbooks[ownedRunbooksCount].Owner = ownedRunbooks1.Owner
				r.OwnedRunbooks[ownedRunbooksCount].Summary = ownedRunbooks1.Summary
				r.OwnedRunbooks[ownedRunbooksCount].Type = ownedRunbooks1.Type
				r.OwnedRunbooks[ownedRunbooksCount].UpdatedAt = ownedRunbooks1.UpdatedAt
			}
		}
		r.SignalsIcalURL = types.StringPointerValue(resp.SignalsIcalURL)
		if resp.SlackChannel == nil {
			r.SlackChannel = nil
		} else {
			r.SlackChannel = &tfTypes.IntegrationsSlackSlackChannelEntity{}
			r.SlackChannel.ID = types.StringPointerValue(resp.SlackChannel.ID)
			r.SlackChannel.Name = types.StringPointerValue(resp.SlackChannel.Name)
			r.SlackChannel.SlackChannelID = types.StringPointerValue(resp.SlackChannel.SlackChannelID)
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
	}
}

func (r *TeamResourceModel) ToSharedPatchV1TeamsTeamID() *shared.PatchV1TeamsTeamID {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	slug := new(string)
	if !r.Slug.IsUnknown() && !r.Slug.IsNull() {
		*slug = r.Slug.ValueString()
	} else {
		slug = nil
	}
	slackChannelID := new(string)
	if !r.SlackChannelID.IsUnknown() && !r.SlackChannelID.IsNull() {
		*slackChannelID = r.SlackChannelID.ValueString()
	} else {
		slackChannelID = nil
	}
	var msTeamsChannel *shared.PatchV1TeamsTeamIDMsTeamsChannel
	if r.MsTeamsChannel != nil {
		var channelID string
		channelID = r.MsTeamsChannel.ChannelID.ValueString()

		var msTeamID string
		msTeamID = r.MsTeamsChannel.MsTeamID.ValueString()

		msTeamsChannel = &shared.PatchV1TeamsTeamIDMsTeamsChannel{
			ChannelID: channelID,
			MsTeamID:  msTeamID,
		}
	}
	var memberships []shared.PatchV1TeamsTeamIDMemberships = []shared.PatchV1TeamsTeamIDMemberships{}
	for _, membershipsItem := range r.Memberships {
		userID := new(string)
		if !membershipsItem.UserID.IsUnknown() && !membershipsItem.UserID.IsNull() {
			*userID = membershipsItem.UserID.ValueString()
		} else {
			userID = nil
		}
		scheduleID := new(string)
		if !membershipsItem.ScheduleID.IsUnknown() && !membershipsItem.ScheduleID.IsNull() {
			*scheduleID = membershipsItem.ScheduleID.ValueString()
		} else {
			scheduleID = nil
		}
		incidentRoleID := new(string)
		if !membershipsItem.IncidentRoleID.IsUnknown() && !membershipsItem.IncidentRoleID.IsNull() {
			*incidentRoleID = membershipsItem.IncidentRoleID.ValueString()
		} else {
			incidentRoleID = nil
		}
		memberships = append(memberships, shared.PatchV1TeamsTeamIDMemberships{
			UserID:         userID,
			ScheduleID:     scheduleID,
			IncidentRoleID: incidentRoleID,
		})
	}
	out := shared.PatchV1TeamsTeamID{
		Name:           name,
		Description:    description,
		Slug:           slug,
		SlackChannelID: slackChannelID,
		MsTeamsChannel: msTeamsChannel,
		Memberships:    memberships,
	}
	return &out
}
