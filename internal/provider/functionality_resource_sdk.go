// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/provider/types"
	"github.com/speakeasy/terraform-provider-firehydrant-terraform-sdk/internal/sdk/models/shared"
	"time"
)

func (r *FunctionalityResourceModel) ToSharedPostV1Functionalities() *shared.PostV1Functionalities {
	var name string
	name = r.Name.ValueString()

	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	alertOnAdd := new(bool)
	if !r.AlertOnAdd.IsUnknown() && !r.AlertOnAdd.IsNull() {
		*alertOnAdd = r.AlertOnAdd.ValueBool()
	} else {
		alertOnAdd = nil
	}
	autoAddRespondingTeam := new(bool)
	if !r.AutoAddRespondingTeam.IsUnknown() && !r.AutoAddRespondingTeam.IsNull() {
		*autoAddRespondingTeam = r.AutoAddRespondingTeam.ValueBool()
	} else {
		autoAddRespondingTeam = nil
	}
	var externalResources []shared.PostV1FunctionalitiesExternalResources = []shared.PostV1FunctionalitiesExternalResources{}
	for _, externalResourcesItem := range r.ExternalResources {
		var remoteID string
		remoteID = externalResourcesItem.RemoteID.ValueString()

		connectionType := new(string)
		if !externalResourcesItem.ConnectionType.IsUnknown() && !externalResourcesItem.ConnectionType.IsNull() {
			*connectionType = externalResourcesItem.ConnectionType.ValueString()
		} else {
			connectionType = nil
		}
		externalResources = append(externalResources, shared.PostV1FunctionalitiesExternalResources{
			RemoteID:       remoteID,
			ConnectionType: connectionType,
		})
	}
	var links []shared.PostV1FunctionalitiesLinks = []shared.PostV1FunctionalitiesLinks{}
	for _, linksItem := range r.Links {
		var name1 string
		name1 = linksItem.Name.ValueString()

		var hrefURL string
		hrefURL = linksItem.HrefURL.ValueString()

		iconURL := new(string)
		if !linksItem.IconURL.IsUnknown() && !linksItem.IconURL.IsNull() {
			*iconURL = linksItem.IconURL.ValueString()
		} else {
			iconURL = nil
		}
		links = append(links, shared.PostV1FunctionalitiesLinks{
			Name:    name1,
			HrefURL: hrefURL,
			IconURL: iconURL,
		})
	}
	var owner *shared.PostV1FunctionalitiesOwner
	if r.Owner != nil {
		var id string
		id = r.Owner.ID.ValueString()

		owner = &shared.PostV1FunctionalitiesOwner{
			ID: id,
		}
	}
	out := shared.PostV1Functionalities{
		Name:                  name,
		Description:           description,
		Labels:                labels,
		AlertOnAdd:            alertOnAdd,
		AutoAddRespondingTeam: autoAddRespondingTeam,
		ExternalResources:     externalResources,
		Links:                 links,
		Owner:                 owner,
	}
	return &out
}

func (r *FunctionalityResourceModel) RefreshFromSharedFunctionalityEntity(resp *shared.FunctionalityEntity) {
	if resp != nil {
		r.ActiveIncidents = []types.String{}
		for _, v := range resp.ActiveIncidents {
			r.ActiveIncidents = append(r.ActiveIncidents, types.StringValue(v))
		}
		r.AlertOnAdd = types.BoolPointerValue(resp.AlertOnAdd)
		r.AutoAddRespondingTeam = types.BoolPointerValue(resp.AutoAddRespondingTeam)
		if resp.CreatedAt != nil {
			r.CreatedAt = types.StringValue(resp.CreatedAt.Format(time.RFC3339Nano))
		} else {
			r.CreatedAt = types.StringNull()
		}
		r.Description = types.StringPointerValue(resp.Description)
		r.ExternalResources = []tfTypes.ExternalResourceEntity1{}
		if len(r.ExternalResources) > len(resp.ExternalResources) {
			r.ExternalResources = r.ExternalResources[:len(resp.ExternalResources)]
		}
		for externalResourcesCount, externalResourcesItem := range resp.ExternalResources {
			var externalResources1 tfTypes.ExternalResourceEntity1
			externalResources1.ConnectionID = types.StringPointerValue(externalResourcesItem.ConnectionID)
			externalResources1.ConnectionName = types.StringPointerValue(externalResourcesItem.ConnectionName)
			externalResources1.ConnectionType = types.StringPointerValue(externalResourcesItem.ConnectionType)
			if externalResourcesItem.CreatedAt != nil {
				externalResources1.CreatedAt = types.StringValue(externalResourcesItem.CreatedAt.Format(time.RFC3339Nano))
			} else {
				externalResources1.CreatedAt = types.StringNull()
			}
			externalResources1.Name = types.StringPointerValue(externalResourcesItem.Name)
			externalResources1.RemoteID = types.StringPointerValue(externalResourcesItem.RemoteID)
			externalResources1.RemoteURL = types.StringPointerValue(externalResourcesItem.RemoteURL)
			if externalResourcesItem.UpdatedAt != nil {
				externalResources1.UpdatedAt = types.StringValue(externalResourcesItem.UpdatedAt.Format(time.RFC3339Nano))
			} else {
				externalResources1.UpdatedAt = types.StringNull()
			}
			if externalResourcesCount+1 > len(r.ExternalResources) {
				r.ExternalResources = append(r.ExternalResources, externalResources1)
			} else {
				r.ExternalResources[externalResourcesCount].ConnectionID = externalResources1.ConnectionID
				r.ExternalResources[externalResourcesCount].ConnectionName = externalResources1.ConnectionName
				r.ExternalResources[externalResourcesCount].ConnectionType = externalResources1.ConnectionType
				r.ExternalResources[externalResourcesCount].CreatedAt = externalResources1.CreatedAt
				r.ExternalResources[externalResourcesCount].Name = externalResources1.Name
				r.ExternalResources[externalResourcesCount].RemoteID = externalResources1.RemoteID
				r.ExternalResources[externalResourcesCount].RemoteURL = externalResources1.RemoteURL
				r.ExternalResources[externalResourcesCount].UpdatedAt = externalResources1.UpdatedAt
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String)
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Links = []tfTypes.LinksEntity1{}
		if len(r.Links) > len(resp.Links) {
			r.Links = r.Links[:len(resp.Links)]
		}
		for linksCount, linksItem := range resp.Links {
			var links1 tfTypes.LinksEntity1
			links1.HrefURL = types.StringPointerValue(linksItem.HrefURL)
			links1.IconURL = types.StringPointerValue(linksItem.IconURL)
			links1.ID = types.StringPointerValue(linksItem.ID)
			links1.Name = types.StringPointerValue(linksItem.Name)
			if linksCount+1 > len(r.Links) {
				r.Links = append(r.Links, links1)
			} else {
				r.Links[linksCount].HrefURL = links1.HrefURL
				r.Links[linksCount].IconURL = links1.IconURL
				r.Links[linksCount].ID = links1.ID
				r.Links[linksCount].Name = links1.Name
			}
		}
		r.Name = types.StringPointerValue(resp.Name)
		if resp.Owner == nil {
			r.Owner = nil
		} else {
			r.Owner = &tfTypes.PostV1FunctionalitiesOwner{}
		}
		r.Slug = types.StringPointerValue(resp.Slug)
		if resp.UpdatedAt != nil {
			r.UpdatedAt = types.StringValue(resp.UpdatedAt.Format(time.RFC3339Nano))
		} else {
			r.UpdatedAt = types.StringNull()
		}
		if resp.UpdatedBy == nil {
			r.UpdatedBy = nil
		} else {
			r.UpdatedBy = &tfTypes.AuthorEntity{}
			r.UpdatedBy.Email = types.StringPointerValue(resp.UpdatedBy.Email)
			r.UpdatedBy.ID = types.StringPointerValue(resp.UpdatedBy.ID)
			r.UpdatedBy.Name = types.StringPointerValue(resp.UpdatedBy.Name)
			r.UpdatedBy.Source = types.StringPointerValue(resp.UpdatedBy.Source)
		}
	}
}

func (r *FunctionalityResourceModel) ToSharedPatchV1FunctionalitiesFunctionalityID() *shared.PatchV1FunctionalitiesFunctionalityID {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var links []shared.PatchV1FunctionalitiesFunctionalityIDLinks = []shared.PatchV1FunctionalitiesFunctionalityIDLinks{}
	for _, linksItem := range r.Links {
		var hrefURL string
		hrefURL = linksItem.HrefURL.ValueString()

		var name1 string
		name1 = linksItem.Name.ValueString()

		iconURL := new(string)
		if !linksItem.IconURL.IsUnknown() && !linksItem.IconURL.IsNull() {
			*iconURL = linksItem.IconURL.ValueString()
		} else {
			iconURL = nil
		}
		// Functionality#update.links.removeFunctionality#update.links.remove impedance mismatch: boolean != stringtrace=["Functionality#create.req.links.[].name"]
		var remove *bool
		id := new(string)
		if !linksItem.ID.IsUnknown() && !linksItem.ID.IsNull() {
			*id = linksItem.ID.ValueString()
		} else {
			id = nil
		}
		links = append(links, shared.PatchV1FunctionalitiesFunctionalityIDLinks{
			HrefURL: hrefURL,
			Name:    name1,
			IconURL: iconURL,
			Remove:  remove,
			ID:      id,
		})
	}
	var owner *shared.PatchV1FunctionalitiesFunctionalityIDOwner
	if r.Owner != nil {
		var id1 string
		id1 = r.Owner.ID.ValueString()

		owner = &shared.PatchV1FunctionalitiesFunctionalityIDOwner{
			ID: id1,
		}
	}
	var externalResources []shared.PatchV1FunctionalitiesFunctionalityIDExternalResources = []shared.PatchV1FunctionalitiesFunctionalityIDExternalResources{}
	for _, externalResourcesItem := range r.ExternalResources {
		var remoteID string
		remoteID = externalResourcesItem.RemoteID.ValueString()

		connectionType := new(string)
		if !externalResourcesItem.ConnectionType.IsUnknown() && !externalResourcesItem.ConnectionType.IsNull() {
			*connectionType = externalResourcesItem.ConnectionType.ValueString()
		} else {
			connectionType = nil
		}
		// Functionality#update.external_resources.removeFunctionality#update.external_resources.remove impedance mismatch: boolean != stringtrace=["Functionality#create.req.external_resources.[].connection_type"]
		var remove1 *bool
		externalResources = append(externalResources, shared.PatchV1FunctionalitiesFunctionalityIDExternalResources{
			RemoteID:       remoteID,
			ConnectionType: connectionType,
			Remove:         remove1,
		})
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	alertOnAdd := new(bool)
	if !r.AlertOnAdd.IsUnknown() && !r.AlertOnAdd.IsNull() {
		*alertOnAdd = r.AlertOnAdd.ValueBool()
	} else {
		alertOnAdd = nil
	}
	autoAddRespondingTeam := new(bool)
	if !r.AutoAddRespondingTeam.IsUnknown() && !r.AutoAddRespondingTeam.IsNull() {
		*autoAddRespondingTeam = r.AutoAddRespondingTeam.ValueBool()
	} else {
		autoAddRespondingTeam = nil
	}
	out := shared.PatchV1FunctionalitiesFunctionalityID{
		Name:                  name,
		Description:           description,
		Links:                 links,
		Owner:                 owner,
		ExternalResources:     externalResources,
		Labels:                labels,
		AlertOnAdd:            alertOnAdd,
		AutoAddRespondingTeam: autoAddRespondingTeam,
	}
	return &out
}
